/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-12-07 00:13:07.517986
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((0.4)*x3);
x15=((1.0)*x5);
x16=((0.126)*x7);
x17=((1.0)*x8);
x18=((1.0)*x0);
x19=((1.0)*x3);
x20=((1.0)*x13);
x21=((0.4)*x1);
x22=((1.0)*x9);
x23=((0.4)*x0);
x24=((0.126)*x9);
x25=((0.126)*x8);
x26=(x5*x6);
x27=(x6*x7);
x28=(x0*x4);
x29=((-1.0)*x9);
x30=(x1*x7);
x31=(x1*x4);
x32=(x1*x2);
x33=((-1.0)*x8);
x34=(x1*x5);
x35=(x19*x4);
x36=(x4*x6*x9);
x37=(x15*x2*x6);
x38=(x22*x4*x6);
x39=((((-1.0)*x35))+((x0*x32)));
x40=(((x3*x32))+x28);
x41=(((x2*x27))+x34);
x42=((((-1.0)*x18*x32))+x35);
x43=(((x19*x31))+(((-1.0)*x18*x2)));
x44=((((-1.0)*x30))+x37);
x45=(((x19*x2))+((x18*x31)));
x46=((((-1.0)*x18*x4))+(((-1.0)*x19*x32)));
x47=(x12*x41);
x48=(x39*x5);
x49=(x44*x8);
x50=(x43*x9);
x51=(x45*x9);
x52=(((x0*x27))+x48);
x53=(((x27*x3))+((x40*x5)));
x54=(((x0*x26))+((x42*x7)));
x55=((((-1.0)*x38))+x49);
x56=(((x17*x4*x6))+((x22*(((((-1.0)*x30))+x37)))));
x57=((((-1.0)*x18*x27))+(((-1.0)*x15*x39)));
x58=(((x46*x7))+((x26*x3)));
x59=((((-1.0)*x15*x40))+(((-1.0)*x19*x27)));
x60=(x12*x54);
x61=(x57*x8);
x62=(x12*x58);
x63=(x50+((x59*x8)));
eerot[0]=(((x11*(((((-1.0)*x17*x45))+(((-1.0)*x22*x52))))))+(((-1.0)*x10*(((((1.0)*x13*((((x8*(((((-1.0)*x48))+(((-1.0)*x0*x27))))))+x51))))+(((1.0)*x60)))))));
eerot[1]=(((x10*((((x33*x45))+((x29*x52))))))+((x11*((((x13*((x51+x61))))+x60)))));
eerot[2]=(((x13*x54))+((x12*(((((-1.0)*x22*x45))+(((-1.0)*x17*x57)))))));
eetrans[0]=(((x23*x26))+((x12*(((((-1.0)*x24*x45))+(((-1.0)*x25*x57))))))+((x23*x6))+((x13*(((((0.126)*x0*x26))+((x16*x42))))))+((x7*(((((-1.0)*x0*x2*x21))+((x14*x4)))))));
eerot[3]=(((x11*((((x33*x43))+((x29*x53))))))+((x10*(((((-1.0)*x20*x63))+(((-1.0)*x62)))))));
eerot[4]=(((x11*((((x13*x63))+x62))))+((x10*(((((-1.0)*x17*x43))+(((-1.0)*x22*x53)))))));
eerot[5]=(((x13*x58))+((x12*(((((-1.0)*x22*x43))+(((-1.0)*x17*x59)))))));
eetrans[1]=(((x7*(((((-1.0)*x14*x32))+(((-1.0)*x23*x4))))))+((x14*x26))+((x14*x6))+((x12*(((((-1.0)*x24*x43))+(((-1.0)*x25*x59))))))+((x13*(((((0.126)*x26*x3))+((x16*x46)))))));
eerot[6]=(((x10*(((((-1.0)*x47))+(((-1.0)*x20*x55))))))+((x11*x56)));
eerot[7]=(((x11*((((x13*x55))+x47))))+((x10*x56)));
eerot[8]=(((x12*(((((-1.0)*x17*x44))+x38))))+((x13*x41)));
eetrans[2]=((0.34)+((x21*x5))+((x13*((((x16*x2*x6))+(((0.126)*x34))))))+((x12*(((((-1.0)*x25*x44))+((x24*x4*x6))))))+x21+(((0.4)*x2*x27)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {1}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j1,cj1,sj1,htj1,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij1[2], _nj1;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j1=pfree[0]; cj1=cos(pfree[0]); sj1=sin(pfree[0]), htj1=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=r02;
new_px=((((-0.126)*r02))+px);
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=r12;
new_py=((((-0.126)*r12))+py);
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=r22;
new_pz=((-0.34)+(((-0.126)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x64=((1.0)*px);
IkReal x65=((1.0)*pz);
IkReal x66=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x66))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x65)));
rxp0_2=((((-1.0)*r10*x64))+((py*r00)));
rxp1_0=((((-1.0)*r21*x66))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x65)));
rxp1_2=((((-1.0)*r11*x64))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x66)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x65)));
rxp2_2=((((-1.0)*r12*x64))+((py*r02)));
{
IkReal j0eval[4];
IkReal x67=sj1*sj1;
j0eval[0]=0.64;
j0eval[1]=sj1;
j0eval[2]=(pp+(((-1.0)*(pz*pz))));
j0eval[3]=(((x67*(py*py)))+((x67*(px*px))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x68=((0.4)*cj1);
IkReal x69=((0.4)*r22);
IkReal x70=((1.0)*pz);
IkReal x71=pz*pz;
IkReal x72=(pz*r22);
IkReal x73=((0.8)*x72);
IkReal x74=(pz*x70);
IkReal x75=((-1.0)*pz);
IkReal x76=((((-1.0)*x70))+x68+x69);
IkReal x77=((((-1.0)*x70))+x68+(((-1.0)*x69)));
IkReal x78=((((-1.0)*x74))+x73);
IkReal x79=((((-1.0)*x73))+(((-1.0)*x74)));
px=0;
py=0;
pp=x71;
npx=(pz*r20);
npy=(pz*r21);
npz=x72;
rxp0_0=(pz*r10);
rxp0_1=(r00*x75);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x75);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x75);
rxp2_2=0;
IkReal gconst0=x76;
IkReal gconst1=x77;
IkReal gconst2=x78;
IkReal gconst3=x79;
IkReal gconst4=x76;
IkReal gconst5=x77;
IkReal gconst6=x78;
IkReal gconst7=x79;
IkReal gconst8=x76;
IkReal gconst9=x77;
IkReal gconst10=x78;
IkReal gconst11=x79;
IkReal gconst12=x76;
IkReal gconst13=x77;
IkReal gconst14=x78;
IkReal gconst15=x79;
IkReal x80=r20*r20;
IkReal x81=pz*pz*pz;
IkReal x82=pz*pz*pz*pz;
IkReal x83=r22*r22;
IkReal x84=cj1*cj1;
IkReal x85=pz*pz;
IkReal x86=r21*r21;
IkReal x87=(r20*r21);
IkReal x88=((2.56)*x82);
IkReal x89=(cj1*x81);
IkReal x90=((0.64)*x82);
IkReal x91=(x84*x85);
IkReal x92=((4.096)*x87*x89);
IkReal x93=((((1.6384)*x87*x91))+((x87*x88)));
j6eval[0]=((IKabs(((((-1.0)*x83*x88))+(((4.096)*x86*x89))+(((-1.6384)*x83*x91))+(((-1.6384)*x86*x91))+(((-1.0)*x86*x88))+(((4.096)*x83*x89)))))+(((0.5)*(IKabs(((((1.024)*x80*x89))+(((-0.4096)*x80*x91))+(((1.024)*x83*x89))+(((-1.0)*x80*x90))+(((-1.0)*x83*x90))+(((-0.4096)*x83*x91)))))))+(IKabs((x92+(((-1.0)*x93)))))+(((0.5)*(IKabs(((((-2.4576)*x83*x91))+(((8.192)*x86*x89))+(((-5.12)*x82*x86))+(((6.144)*x83*x89))+(((-3.2768)*x86*x91))+(((-3.84)*x82*x83))+(((1.28)*x80*x82))+(((0.8192)*x80*x91))+(((-2.048)*x80*x89)))))))+(IKabs((x93+(((-1.0)*x92))))));
if( IKabs(j6eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5, j6]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x94=r20*r20;
IkReal x95=pz*pz;
IkReal x96=r21*r21;
IkReal x97=(gconst0*gconst11);
IkReal x98=(gconst5*gconst6);
IkReal x99=((1.0)*gconst12);
IkReal x100=((0.64)*gconst14);
IkReal x101=((2.56)*gconst1);
IkReal x102=(gconst13*gconst14);
IkReal x103=(gconst9*pz);
IkReal x104=(gconst14*gconst5);
IkReal x105=(gconst4*gconst9);
IkReal x106=(gconst10*gconst7);
IkReal x107=(gconst0*gconst3);
IkReal x108=(gconst11*gconst8);
IkReal x109=((1.28)*pz);
IkReal x110=((1.0)*gconst1);
IkReal x111=(r20*r21);
IkReal x112=((5.12)*gconst14);
IkReal x113=((2.56)*pz);
IkReal x114=(gconst1*pz);
IkReal x115=(gconst2*gconst9);
IkReal x116=((5.12)*gconst6);
IkReal x117=(gconst1*gconst12);
IkReal x118=(gconst3*gconst8);
IkReal x119=((2.56)*gconst6);
IkReal x120=(gconst12*gconst9);
IkReal x121=(gconst1*gconst4);
IkReal x122=(gconst10*gconst15);
IkReal x123=((2.56)*gconst14);
IkReal x124=((1.0)*gconst9);
IkReal x125=(gconst13*gconst6);
IkReal x126=(gconst15*gconst2);
IkReal x127=(gconst2*gconst7);
IkReal x128=(gconst11*x94);
IkReal x129=((1.0)*gconst4*gconst7);
IkReal x130=(gconst10*x125);
IkReal x131=(gconst14*x94);
IkReal x132=(gconst6*x94);
IkReal x133=((5.12)*gconst4*pz);
IkReal x134=(gconst11*x96);
IkReal x135=((10.24)*x95);
IkReal x136=(gconst3*x96);
IkReal x137=((5.12)*gconst12*pz);
IkReal x138=((1.0)*gconst15*gconst4);
IkReal x139=(x94*x95);
IkReal x140=((1.28)*x132);
IkReal x141=(x116*x96);
IkReal x142=(gconst3*gconst4*x94);
IkReal x143=(gconst12*gconst3*x94);
IkReal x144=(gconst11*x111*x123);
IkReal x145=(x100*x128);
IkReal x146=(gconst11*x111*x119);
IkReal x147=(gconst3*x111*x123);
IkReal x148=((0.64)*gconst6*x128);
IkReal x149=(gconst3*x100*x94);
IkReal x150=(gconst3*x111*x119);
IkReal x151=((0.64)*gconst3*x132);
IkReal x152=(x121*x135);
IkReal x153=(gconst11*x111*x137);
IkReal x154=(x103*x111*x112);
IkReal x155=(gconst12*x109*x128);
IkReal x156=((1.28)*x103*x131);
IkReal x157=(gconst3*x111*x137);
IkReal x158=(gconst11*x111*x133);
IkReal x159=(x103*x111*x116);
IkReal x160=(x111*x112*x114);
IkReal x161=(gconst1*x109*x131);
IkReal x162=(x103*x140);
IkReal x163=(x109*x143);
IkReal x164=(gconst4*x109*x128);
IkReal x165=(gconst3*x111*x133);
IkReal x166=(x111*x114*x116);
IkReal x167=(x109*x142);
IkReal x168=(gconst1*x109*x132);
IkReal x169=(x111*x120*x135);
IkReal x170=((2.56)*x120*x139);
IkReal x171=(x111*x117*x135);
IkReal x172=(x105*x111*x135);
IkReal x173=((2.56)*x105*x139);
IkReal x174=(gconst12*x101*x139);
IkReal x175=(x111*x152);
IkReal x176=(gconst4*x101*x139);
IkReal x177=(x170+x145);
IkReal x178=(x176+x151);
IkReal x179=(x154+x153);
IkReal x180=(x168+x167);
IkReal x181=(x169+x144);
IkReal x182=(x166+x165);
IkReal x183=(x175+x150);
IkReal x184=(x156+x155);
IkReal x185=(x171+x172+x146+x147);
IkReal x186=(x160+x157+x159+x158);
IkReal x187=(x162+x163+x161+x164);
IkReal x188=(x173+x174+x148+x149);
op[0]=((((-1.0)*x177))+(((-1.0)*gconst15*x108*x99))+x184+((x102*x108))+((x120*x122))+(((-1.0)*gconst10*x102*x124)));
op[1]=((((-1.0)*x181))+x179);
op[2]=((((1.28)*gconst14*x128))+((x117*x122))+(((-1.0)*x123*x134))+(((5.12)*x120*x139))+(((-1.0)*gconst15*x118*x99))+(((-1.0)*x102*x115))+(((-1.0)*x188))+((x102*x97))+(((-1.0)*gconst15*x97*x99))+((x106*x120))+((gconst12*gconst15*x115))+(((-1.0)*gconst10*x104*x124))+((x102*x118))+((x108*x125))+(((-1.0)*x124*x130))+x187+((x103*x112*x96))+(((-1.0)*x103*x123*x94))+((x105*x122))+((x134*x137))+(((-1.0)*x108*x138))+(((-1.0)*gconst7*x108*x99))+(((-1.0)*gconst10*x102*x110))+((x104*x108))+(((-1.0)*x120*x135*x96))+(((-1.0)*gconst12*x113*x128)));
op[3]=((((-1.0)*x179))+(((-1.0)*x185))+x186+x181);
op[4]=(((x117*x126))+(((-1.0)*x123*x136))+(((5.12)*x105*x139))+(((-1.0)*x115*x125))+((x121*x122))+(((-1.0)*gconst7*x118*x99))+((x103*x141))+((x106*x117))+(((-1.0)*x178))+(((-1.0)*x177))+(((-1.0)*gconst7*x97*x99))+((x125*x97))+(((-1.0)*x110*x130))+((x112*x114*x96))+(((-1.0)*x103*x119*x94))+(((-1.0)*x105*x135*x96))+(((-1.0)*gconst10*x124*x98))+(((-1.0)*gconst15*x107*x99))+(((1.28)*gconst3*x131))+(((5.12)*x117*x139))+((x136*x137))+(((-1.0)*gconst10*x104*x110))+x184+x180+((x102*x107))+((gconst12*gconst7*x115))+((x108*x98))+(((1.28)*gconst6*x128))+((x105*x126))+((x133*x134))+((x104*x118))+((x105*x106))+(((-1.0)*x138*x97))+(((-1.0)*x108*x129))+(((-1.0)*gconst2*x102*x110))+(((-1.0)*x104*x115))+((x118*x125))+(((-1.0)*x113*x143))+(((-1.0)*x117*x135*x96))+(((-1.0)*pz*x101*x131))+(((-1.0)*gconst4*x113*x128))+((x104*x97))+(((-1.0)*x118*x138))+(((-1.0)*x119*x134)));
op[5]=((((-1.0)*x186))+(((-1.0)*x183))+x185+x182);
op[6]=(((x117*x127))+(((-1.0)*gconst10*x110*x98))+(((-1.0)*x118*x129))+(((5.12)*x121*x139))+((x121*x126))+((gconst3*x140))+(((-1.0)*gconst2*x104*x110))+(((-1.0)*x188))+((x106*x121))+((x97*x98))+(((-1.0)*x107*x138))+x187+(((-1.0)*gconst2*x110*x125))+(((-1.0)*gconst7*x107*x99))+((x105*x127))+((x118*x98))+((x133*x136))+((x104*x107))+(((-1.0)*x115*x98))+(((-1.0)*x152*x96))+(((-1.0)*x113*x142))+((x107*x125))+((x114*x141))+(((-1.0)*x129*x97))+(((-1.0)*pz*x101*x132))+(((-1.0)*x119*x136)));
op[7]=((((-1.0)*x182))+x183);
op[8]=(((x121*x127))+((x107*x98))+(((-1.0)*x178))+x180+(((-1.0)*x107*x129))+(((-1.0)*gconst2*x110*x98)));
polyroots8(op,zeror,numroots);
IkReal j6array[8], cj6array[8], sj6array[8], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[8]={true,true,true,true,true,true,true,true};
_nj6 = 8;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j5eval[2];
IkReal x189=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x189);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x189);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x189);
rxp2_2=0;
IkReal x190=(r21*sj6);
IkReal x191=(cj6*r20);
j5eval[0]=((IKabs(r22))+(((2.5)*(IKabs(((((0.4)*x191))+(((-0.4)*x190))))))));
j5eval[1]=((r22*r22)+(((-2.0)*x190*x191))+(x190*x190)+(x191*x191));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x192=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x192);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x192);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x192);
rxp2_2=0;
IkReal x193=pz*pz;
IkReal x194=(cj6*r20);
IkReal x195=(r21*sj6);
j5eval[0]=((IKabs((pz*r22)))+(IKabs(((((-1.0)*pz*x195))+((pz*x194))))));
j5eval[1]=(((x193*(r22*r22)))+((x193*(x194*x194)))+(((-2.0)*x193*x194*x195))+((x193*(x195*x195))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x196=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x196);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x196);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x196);
rxp2_2=0;
IkReal x197=sj1*sj1;
IkReal x198=cj6*cj6;
IkReal x199=sj6*sj6;
IkReal x200=(sj1*sj6);
IkReal x201=(cj6*sj1);
IkReal x202=(x197*x199);
IkReal x203=(x197*x198);
IkReal x204=((2.0)*cj6*sj6*x197);
j0eval[0]=(((x202*(r00*r00)))+((r10*r11*x204))+((x202*(r10*r10)))+((r00*r01*x204))+((x203*(r01*r01)))+((x203*(r11*r11))));
j0eval[1]=((IKabs((((r11*x201))+((r10*x200)))))+(IKabs((((r01*x201))+((r00*x200))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j5]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x205=(cj6*r21);
IkReal x206=((1.0)*pz);
IkReal x207=((0.4)*sj1);
IkReal x208=((0.4)*cj1);
IkReal x209=(r20*sj6);
IkReal x210=(((cj6*r01*x207))+((r00*sj6*x207)));
IkReal x211=(((cj6*r11*x207))+((r10*sj6*x207)));
CheckValue<IkReal> x214 = IKatan2WithCheck(IkReal(x210),IkReal(x211),IKFAST_ATAN2_MAGTHRESH);
if(!x214.valid){
continue;
}
IkReal x212=((1.0)*(x214.value));
if((((x211*x211)+(x210*x210))) < -0.00001)
continue;
CheckValue<IkReal> x215=IKPowWithIntegerCheck(IKabs(IKsqrt(((x211*x211)+(x210*x210)))),-1);
if(!x215.valid){
continue;
}
if( (((x215.value)*((((x205*x208))+(((-1.0)*x206*x209))+(((-1.0)*x205*x206))+((x208*x209)))))) < -1-IKFAST_SINCOS_THRESH || (((x215.value)*((((x205*x208))+(((-1.0)*x206*x209))+(((-1.0)*x205*x206))+((x208*x209)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x213=IKasin(((x215.value)*((((x205*x208))+(((-1.0)*x206*x209))+(((-1.0)*x205*x206))+((x208*x209))))));
j0array[0]=((((-1.0)*x213))+(((-1.0)*x212)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x213+(((-1.0)*x212)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j5eval[1];
IkReal x216=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x216);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x216);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x216);
rxp2_2=0;
j5eval[0]=((((-1.0)*r01*sj6))+((cj6*r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x217=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x217);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x217);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x217);
rxp2_2=0;
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x218=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x218);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x218);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x218);
rxp2_2=0;
j5eval[0]=(((cj6*r21))+((r20*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x220 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x220)==0){
continue;
}
IkReal x219=pow(x220,-0.5);
CheckValue<IkReal> x221 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x221.valid){
continue;
}
IkReal gconst32=((-1.0)*(x221.value));
IkReal gconst33=((-1.0)*r21*x219);
IkReal gconst34=(r20*x219);
CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x222.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x222.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x223=((2.0)*sj1);
IkReal x224=(pz*r22);
IkReal x225=(r12*sj0);
IkReal x226=(cj1*r22);
IkReal x227=((1.0)*sj1);
CheckValue<IkReal> x228=IKPowWithIntegerCheck(((((-2.0)*gconst33*r01))+(((2.0)*gconst34*r00))),-1);
if(!x228.valid){
continue;
}
if( IKabs(((x228.value)*(((((-1.0)*cj0*x223))+(((2.0)*r02*x226))+((r02*x223*x225))+(((-5.0)*r02*x224))+((cj0*x223*(r02*r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.5)*x224))+(((-1.0)*x225*x227))+(((-1.0)*cj0*r02*x227))+(((-1.0)*x226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x228.value)*(((((-1.0)*cj0*x223))+(((2.0)*r02*x226))+((r02*x223*x225))+(((-5.0)*r02*x224))+((cj0*x223*(r02*r02)))))))+IKsqr(((((2.5)*x224))+(((-1.0)*x225*x227))+(((-1.0)*cj0*r02*x227))+(((-1.0)*x226))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x228.value)*(((((-1.0)*cj0*x223))+(((2.0)*r02*x226))+((r02*x223*x225))+(((-5.0)*r02*x224))+((cj0*x223*(r02*r02)))))), ((((2.5)*x224))+(((-1.0)*x225*x227))+(((-1.0)*cj0*r02*x227))+(((-1.0)*x226))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x229=IKcos(j5);
IkReal x230=IKsin(j5);
IkReal x231=((0.4)*gconst34);
IkReal x232=(gconst33*r01);
IkReal x233=((0.8)*pz);
IkReal x234=(gconst33*r21);
IkReal x235=((1.0)*pz);
IkReal x236=(gconst33*r11);
IkReal x237=((0.4)*cj1);
IkReal x238=((0.4)*x229);
IkReal x239=((0.4)*cj0*sj1);
IkReal x240=((0.4)*x230);
IkReal x241=((0.4)*sj0*sj1);
IkReal x242=(r20*x230);
evalcond[0]=(((r02*x239))+(((-1.0)*r22*x235))+x238+((r12*x241))+((r22*x237)));
evalcond[1]=(((r02*x238))+(((-1.0)*x232*x240))+x239+((r00*x230*x231)));
evalcond[2]=(((r10*x230*x231))+(((-1.0)*x236*x240))+x241+((r12*x238)));
evalcond[3]=((((-1.0)*x234*x240))+(((-1.0)*x235))+x237+((x231*x242))+((r22*x238)));
evalcond[4]=(((r22*x229*x233))+(((-1.0)*pz*x235))+(((-1.0)*x230*x233*x234))+((gconst34*x233*x242)));
evalcond[5]=((((-1.0)*x236*x241))+((pz*x234))+(((-1.0)*gconst34*r20*x235))+x240+((cj1*r20*x231))+((cj0*r00*sj1*x231))+(((-1.0)*x234*x237))+((r10*sj0*sj1*x231))+(((-1.0)*x232*x239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1168 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1168)==0){
continue;
}
IkReal x1167=pow(x1168,-0.5);
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x1169.value))));
IkReal gconst36=((1.0)*r21*x1167);
IkReal gconst37=((-1.0)*r20*x1167);
CheckValue<IkReal> x1170 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1170.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1170.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1171=((2.0)*sj1);
IkReal x1172=(pz*r22);
IkReal x1173=(r12*sj0);
IkReal x1174=(cj1*r22);
IkReal x1175=((1.0)*sj1);
CheckValue<IkReal> x1176=IKPowWithIntegerCheck(((((-2.0)*gconst36*r01))+(((2.0)*gconst37*r00))),-1);
if(!x1176.valid){
continue;
}
if( IKabs(((x1176.value)*((((cj0*x1171*(r02*r02)))+(((-1.0)*cj0*x1171))+((r02*x1171*x1173))+(((2.0)*r02*x1174))+(((-5.0)*r02*x1172)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1173*x1175))+(((2.5)*x1172))+(((-1.0)*cj0*r02*x1175))+(((-1.0)*x1174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1176.value)*((((cj0*x1171*(r02*r02)))+(((-1.0)*cj0*x1171))+((r02*x1171*x1173))+(((2.0)*r02*x1174))+(((-5.0)*r02*x1172))))))+IKsqr(((((-1.0)*x1173*x1175))+(((2.5)*x1172))+(((-1.0)*cj0*r02*x1175))+(((-1.0)*x1174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1176.value)*((((cj0*x1171*(r02*r02)))+(((-1.0)*cj0*x1171))+((r02*x1171*x1173))+(((2.0)*r02*x1174))+(((-5.0)*r02*x1172))))), ((((-1.0)*x1173*x1175))+(((2.5)*x1172))+(((-1.0)*cj0*r02*x1175))+(((-1.0)*x1174))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1177=IKcos(j5);
IkReal x1178=IKsin(j5);
IkReal x1179=(gconst37*r20);
IkReal x1180=(gconst36*r11);
IkReal x1181=(gconst37*r00);
IkReal x1182=(pz*r22);
IkReal x1183=((0.4)*sj1);
IkReal x1184=((1.0)*pz);
IkReal x1185=((0.4)*cj1);
IkReal x1186=(gconst37*r10);
IkReal x1187=(gconst36*r01);
IkReal x1188=(gconst36*r21);
IkReal x1189=((0.4)*x1178);
IkReal x1190=((0.4)*x1177);
IkReal x1191=(pz*x1188);
IkReal x1192=((0.8)*x1178);
evalcond[0]=(x1190+((r22*x1185))+((r12*sj0*x1183))+((cj0*r02*x1183))+(((-1.0)*x1182)));
evalcond[1]=(((cj0*x1183))+(((-1.0)*x1187*x1189))+((x1181*x1189))+((r02*x1190)));
evalcond[2]=(((x1186*x1189))+((sj0*x1183))+(((-1.0)*x1180*x1189))+((r12*x1190)));
evalcond[3]=(x1185+(((-1.0)*x1188*x1189))+((x1179*x1189))+((r22*x1190))+(((-1.0)*x1184)));
evalcond[4]=((((-1.0)*x1191*x1192))+(((0.8)*x1177*x1182))+(((-1.0)*pz*x1184))+((pz*x1179*x1192)));
evalcond[5]=(x1189+x1191+((x1179*x1185))+(((-1.0)*x1179*x1184))+((cj0*x1181*x1183))+(((-1.0)*cj0*x1183*x1187))+(((-1.0)*x1185*x1188))+(((-1.0)*sj0*x1180*x1183))+((sj0*x1183*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1195 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1195)==0){
continue;
}
IkReal x1193=pow(x1195,-0.5);
IkReal x1194=((-1.0)*x1193);
CheckValue<IkReal> x1196 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1196.valid){
continue;
}
IkReal gconst38=((-1.0)*(x1196.value));
IkReal gconst39=(r10*x1194);
IkReal gconst40=(r11*x1194);
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j6+(x1197.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1198=((2.0)*sj1);
IkReal x1199=(pz*r22);
IkReal x1200=(r12*sj0);
IkReal x1201=((1.0)*sj1);
IkReal x1202=(cj1*r22);
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(((((-2.0)*gconst39*r01))+(((2.0)*gconst40*r00))),-1);
if(!x1203.valid){
continue;
}
if( IKabs(((x1203.value)*(((((2.0)*r02*x1202))+((r02*x1198*x1200))+((cj0*x1198*(r02*r02)))+(((-5.0)*r02*x1199))+(((-1.0)*cj0*x1198)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r02*x1201))+(((2.5)*x1199))+(((-1.0)*x1200*x1201))+(((-1.0)*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1203.value)*(((((2.0)*r02*x1202))+((r02*x1198*x1200))+((cj0*x1198*(r02*r02)))+(((-5.0)*r02*x1199))+(((-1.0)*cj0*x1198))))))+IKsqr(((((-1.0)*cj0*r02*x1201))+(((2.5)*x1199))+(((-1.0)*x1200*x1201))+(((-1.0)*x1202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1203.value)*(((((2.0)*r02*x1202))+((r02*x1198*x1200))+((cj0*x1198*(r02*r02)))+(((-5.0)*r02*x1199))+(((-1.0)*cj0*x1198))))), ((((-1.0)*cj0*r02*x1201))+(((2.5)*x1199))+(((-1.0)*x1200*x1201))+(((-1.0)*x1202))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1204=IKcos(j5);
IkReal x1205=IKsin(j5);
IkReal x1206=(gconst39*r21);
IkReal x1207=(gconst40*r20);
IkReal x1208=(gconst40*r10);
IkReal x1209=(pz*r22);
IkReal x1210=(gconst39*r01);
IkReal x1211=((1.0)*pz);
IkReal x1212=((0.4)*cj1);
IkReal x1213=(gconst39*r11);
IkReal x1214=(gconst40*r00);
IkReal x1215=((0.4)*x1204);
IkReal x1216=((0.4)*x1205);
IkReal x1217=((0.4)*cj0*sj1);
IkReal x1218=((0.4)*sj0*sj1);
IkReal x1219=((0.8)*pz*x1205);
evalcond[0]=(((r12*x1218))+x1215+((r22*x1212))+((r02*x1217))+(((-1.0)*x1209)));
evalcond[1]=(((x1214*x1216))+x1217+((r02*x1215))+(((-1.0)*x1210*x1216)));
evalcond[2]=(((r12*x1215))+x1218+(((-1.0)*x1213*x1216))+((x1208*x1216)));
evalcond[3]=(x1212+((r22*x1215))+(((-1.0)*x1206*x1216))+((x1207*x1216))+(((-1.0)*x1211)));
evalcond[4]=((((-1.0)*x1206*x1219))+((x1207*x1219))+(((-1.0)*pz*x1211))+(((0.8)*x1204*x1209)));
evalcond[5]=(((x1214*x1217))+x1216+(((-1.0)*x1207*x1211))+(((-1.0)*x1206*x1212))+((x1207*x1212))+(((-1.0)*x1213*x1218))+(((-1.0)*x1210*x1217))+((pz*x1206))+((x1208*x1218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1222 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1222)==0){
continue;
}
IkReal x1220=pow(x1222,-0.5);
IkReal x1221=((1.0)*x1220);
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x1223.value))));
IkReal gconst42=(r10*x1221);
IkReal gconst43=(r11*x1221);
CheckValue<IkReal> x1224 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1224.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6+(x1224.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1225=((2.0)*sj1);
IkReal x1226=(pz*r22);
IkReal x1227=(r12*sj0);
IkReal x1228=((1.0)*sj1);
IkReal x1229=(cj1*r22);
CheckValue<IkReal> x1230=IKPowWithIntegerCheck(((((-2.0)*gconst42*r01))+(((2.0)*gconst43*r00))),-1);
if(!x1230.valid){
continue;
}
if( IKabs(((x1230.value)*(((((-5.0)*r02*x1226))+(((-1.0)*cj0*x1225))+((r02*x1225*x1227))+((cj0*x1225*(r02*r02)))+(((2.0)*r02*x1229)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1229))+(((-1.0)*x1227*x1228))+(((-1.0)*cj0*r02*x1228))+(((2.5)*x1226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1230.value)*(((((-5.0)*r02*x1226))+(((-1.0)*cj0*x1225))+((r02*x1225*x1227))+((cj0*x1225*(r02*r02)))+(((2.0)*r02*x1229))))))+IKsqr(((((-1.0)*x1229))+(((-1.0)*x1227*x1228))+(((-1.0)*cj0*r02*x1228))+(((2.5)*x1226))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1230.value)*(((((-5.0)*r02*x1226))+(((-1.0)*cj0*x1225))+((r02*x1225*x1227))+((cj0*x1225*(r02*r02)))+(((2.0)*r02*x1229))))), ((((-1.0)*x1229))+(((-1.0)*x1227*x1228))+(((-1.0)*cj0*r02*x1228))+(((2.5)*x1226))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1231=IKcos(j5);
IkReal x1232=IKsin(j5);
IkReal x1233=(gconst42*r21);
IkReal x1234=((0.4)*cj1);
IkReal x1235=(pz*r22);
IkReal x1236=((0.4)*sj1);
IkReal x1237=(gconst43*r10);
IkReal x1238=((1.0)*pz);
IkReal x1239=(gconst43*r00);
IkReal x1240=(gconst43*r20);
IkReal x1241=(gconst42*x1236);
IkReal x1242=((0.4)*x1231);
IkReal x1243=((0.4)*x1232);
IkReal x1244=((0.8)*pz*x1232);
evalcond[0]=((((-1.0)*x1235))+x1242+((cj0*r02*x1236))+((r22*x1234))+((r12*sj0*x1236)));
evalcond[1]=(((x1239*x1243))+((cj0*x1236))+((r02*x1242))+(((-1.0)*gconst42*r01*x1243)));
evalcond[2]=((((-1.0)*gconst42*r11*x1243))+((sj0*x1236))+((r12*x1242))+((x1237*x1243)));
evalcond[3]=(x1234+(((-1.0)*x1238))+((x1240*x1243))+(((-1.0)*x1233*x1243))+((r22*x1242)));
evalcond[4]=(((x1240*x1244))+(((-1.0)*x1233*x1244))+(((-1.0)*pz*x1238))+(((0.8)*x1231*x1235)));
evalcond[5]=(x1243+((pz*x1233))+((cj0*x1236*x1239))+((sj0*x1236*x1237))+(((-1.0)*x1238*x1240))+(((-1.0)*x1233*x1234))+(((-1.0)*r11*sj0*x1241))+(((-1.0)*cj0*r01*x1241))+((x1234*x1240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1247 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1247)==0){
continue;
}
IkReal x1245=pow(x1247,-0.5);
IkReal x1246=((-1.0)*x1245);
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
IkReal gconst44=((-1.0)*(x1248.value));
IkReal gconst45=(r00*x1246);
IkReal gconst46=(r01*x1246);
CheckValue<IkReal> x1249 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1249.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1249.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1250=(r12*r22);
IkReal x1251=(r12*sj1);
IkReal x1252=(cj0*r02);
IkReal x1253=((2.0)*sj0*sj1);
CheckValue<IkReal> x1254=IKPowWithIntegerCheck(((((2.0)*gconst46*r10))+(((-2.0)*gconst45*r11))),-1);
if(!x1254.valid){
continue;
}
if( IKabs(((x1254.value)*(((((-1.0)*x1253))+(((2.0)*cj1*x1250))+(((2.0)*r12*sj0*x1251))+(((2.0)*x1251*x1252))+(((-5.0)*pz*x1250)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.5)*pz*r22))+(((-1.0)*cj1*r22))+(((-1.0)*sj1*x1252))+(((-1.0)*sj0*x1251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1254.value)*(((((-1.0)*x1253))+(((2.0)*cj1*x1250))+(((2.0)*r12*sj0*x1251))+(((2.0)*x1251*x1252))+(((-5.0)*pz*x1250))))))+IKsqr(((((2.5)*pz*r22))+(((-1.0)*cj1*r22))+(((-1.0)*sj1*x1252))+(((-1.0)*sj0*x1251))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1254.value)*(((((-1.0)*x1253))+(((2.0)*cj1*x1250))+(((2.0)*r12*sj0*x1251))+(((2.0)*x1251*x1252))+(((-5.0)*pz*x1250))))), ((((2.5)*pz*r22))+(((-1.0)*cj1*r22))+(((-1.0)*sj1*x1252))+(((-1.0)*sj0*x1251))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1255=IKcos(j5);
IkReal x1256=IKsin(j5);
IkReal x1257=((0.4)*sj1);
IkReal x1258=(gconst45*r11);
IkReal x1259=(pz*r22);
IkReal x1260=(gconst46*r00);
IkReal x1261=(gconst46*r10);
IkReal x1262=((0.4)*cj1);
IkReal x1263=(gconst46*r20);
IkReal x1264=(gconst45*r01);
IkReal x1265=(gconst45*r21);
IkReal x1266=((0.4)*x1255);
IkReal x1267=(pz*x1263);
IkReal x1268=(pz*x1265);
IkReal x1269=((0.8)*x1256);
IkReal x1270=((0.4)*x1256);
evalcond[0]=(x1266+((r22*x1262))+((r12*sj0*x1257))+(((-1.0)*x1259))+((cj0*r02*x1257)));
evalcond[1]=(((cj0*x1257))+((r02*x1266))+((x1260*x1270))+(((-1.0)*x1264*x1270)));
evalcond[2]=(((r12*x1266))+((x1261*x1270))+((sj0*x1257))+(((-1.0)*x1258*x1270)));
evalcond[3]=(x1262+((r22*x1266))+(((-1.0)*pz))+((x1263*x1270))+(((-1.0)*x1265*x1270)));
evalcond[4]=((((-1.0)*x1268*x1269))+((x1267*x1269))+(((-1.0)*(pz*pz)))+(((0.8)*x1255*x1259)));
evalcond[5]=(x1270+x1268+(((-1.0)*x1262*x1265))+((sj0*x1257*x1261))+(((-1.0)*sj0*x1257*x1258))+((x1262*x1263))+(((-1.0)*cj0*x1257*x1264))+((cj0*x1257*x1260))+(((-1.0)*x1267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1273 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1273)==0){
continue;
}
IkReal x1271=pow(x1273,-0.5);
IkReal x1272=((1.0)*x1271);
CheckValue<IkReal> x1274 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1274.valid){
continue;
}
IkReal gconst47=((3.14159265358979)+(((-1.0)*(x1274.value))));
IkReal gconst48=(r00*x1272);
IkReal gconst49=(r01*x1272);
CheckValue<IkReal> x1275 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1275.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1275.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1276=(r12*r22);
IkReal x1277=((1.0)*sj1);
IkReal x1278=(cj0*r02);
IkReal x1279=((2.0)*sj0*sj1);
CheckValue<IkReal> x1280=IKPowWithIntegerCheck(((((-2.0)*gconst48*r11))+(((2.0)*gconst49*r10))),-1);
if(!x1280.valid){
continue;
}
if( IKabs(((x1280.value)*(((((-1.0)*x1279))+(((2.0)*r12*sj1*x1278))+(((2.0)*cj1*x1276))+(((-5.0)*pz*x1276))+((x1279*(r12*r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*sj0*x1277))+(((2.5)*pz*r22))+(((-1.0)*x1277*x1278))+(((-1.0)*cj1*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1280.value)*(((((-1.0)*x1279))+(((2.0)*r12*sj1*x1278))+(((2.0)*cj1*x1276))+(((-5.0)*pz*x1276))+((x1279*(r12*r12)))))))+IKsqr(((((-1.0)*r12*sj0*x1277))+(((2.5)*pz*r22))+(((-1.0)*x1277*x1278))+(((-1.0)*cj1*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1280.value)*(((((-1.0)*x1279))+(((2.0)*r12*sj1*x1278))+(((2.0)*cj1*x1276))+(((-5.0)*pz*x1276))+((x1279*(r12*r12)))))), ((((-1.0)*r12*sj0*x1277))+(((2.5)*pz*r22))+(((-1.0)*x1277*x1278))+(((-1.0)*cj1*r22))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1281=IKcos(j5);
IkReal x1282=IKsin(j5);
IkReal x1283=(gconst48*r21);
IkReal x1284=((1.0)*pz);
IkReal x1285=(gconst49*r20);
IkReal x1286=((0.8)*pz);
IkReal x1287=(gconst48*r01);
IkReal x1288=(gconst48*r11);
IkReal x1289=((0.4)*cj1);
IkReal x1290=((0.4)*sj0*sj1);
IkReal x1291=((0.4)*x1281);
IkReal x1292=((0.4)*x1282);
IkReal x1293=((0.4)*cj0*sj1);
IkReal x1294=(gconst49*x1292);
evalcond[0]=(x1291+(((-1.0)*r22*x1284))+((r22*x1289))+((r12*x1290))+((r02*x1293)));
evalcond[1]=(x1293+(((-1.0)*x1287*x1292))+((r02*x1291))+((r00*x1294)));
evalcond[2]=(x1290+(((-1.0)*x1288*x1292))+((r12*x1291))+((r10*x1294)));
evalcond[3]=(x1289+(((-1.0)*x1283*x1292))+((x1285*x1292))+(((-1.0)*x1284))+((r22*x1291)));
evalcond[4]=(((r22*x1281*x1286))+(((-1.0)*x1282*x1283*x1286))+((x1282*x1285*x1286))+(((-1.0)*pz*x1284)));
evalcond[5]=(((x1285*x1289))+x1292+(((-1.0)*x1287*x1293))+(((-1.0)*x1288*x1290))+(((-1.0)*x1284*x1285))+((gconst49*r10*x1290))+(((-1.0)*x1283*x1289))+((pz*x1283))+((gconst49*r00*x1293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=0;
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=0;
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
j5eval[0]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=0;
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
j5eval[0]=(((cj6*pz*r20))+(((-1.0)*pz*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
pz=0;
j5eval[0]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
pz=0;
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
pz=0;
j5eval[0]=(((cj6*r20))+(((-1.0)*r21*sj6)));
j5eval[1]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1295=IKPowWithIntegerCheck(((((-2.0)*r21*sj6))+(((2.0)*cj6*r20))),-1);
if(!x1295.valid){
continue;
}
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(r02,-1);
if(!x1296.valid){
continue;
}
if( IKabs(((-2.0)*cj1*(x1295.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*sj1*(x1296.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.0)*cj1*(x1295.value)))+IKsqr(((-1.0)*cj0*sj1*(x1296.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-2.0)*cj1*(x1295.value)), ((-1.0)*cj0*sj1*(x1296.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1297=IKcos(j5);
IkReal x1298=IKsin(j5);
IkReal x1299=((0.4)*r02);
IkReal x1300=(r21*sj6);
IkReal x1301=(cj0*sj1);
IkReal x1302=((0.4)*cj1);
IkReal x1303=(r11*sj6);
IkReal x1304=(cj6*r10);
IkReal x1305=(cj6*r20);
IkReal x1306=((0.4)*x1298);
IkReal x1307=((0.4)*sj0*sj1);
evalcond[0]=(((x1299*x1301))+(((0.4)*x1297)));
evalcond[1]=(((x1297*x1299))+(((0.4)*x1301)));
evalcond[2]=(x1302+((x1305*x1306))+(((-1.0)*x1300*x1306)));
evalcond[3]=(x1307+(((-1.0)*x1303*x1306))+((x1304*x1306)));
evalcond[4]=(x1306+(((-1.0)*x1300*x1302))+(((-1.0)*x1303*x1307))+((x1302*x1305))+((x1304*x1307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(((((2.0)*cj6*r10))+(((-2.0)*r11*sj6))),-1);
if(!x1308.valid){
continue;
}
if( IKabs(((-2.0)*sj0*sj1*(x1308.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*r02*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.0)*sj0*sj1*(x1308.value)))+IKsqr(((-1.0)*cj0*r02*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-2.0)*sj0*sj1*(x1308.value)), ((-1.0)*cj0*r02*sj1));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1309=IKcos(j5);
IkReal x1310=IKsin(j5);
IkReal x1311=((0.4)*r02);
IkReal x1312=(r21*sj6);
IkReal x1313=(cj0*sj1);
IkReal x1314=((0.4)*cj1);
IkReal x1315=(r11*sj6);
IkReal x1316=(cj6*r10);
IkReal x1317=(cj6*r20);
IkReal x1318=((0.4)*x1310);
IkReal x1319=((0.4)*sj0*sj1);
evalcond[0]=(((x1311*x1313))+(((0.4)*x1309)));
evalcond[1]=((((0.4)*x1313))+((x1309*x1311)));
evalcond[2]=(x1314+((x1317*x1318))+(((-1.0)*x1312*x1318)));
evalcond[3]=(x1319+(((-1.0)*x1315*x1318))+((x1316*x1318)));
evalcond[4]=(x1318+(((-1.0)*x1315*x1319))+((x1314*x1317))+((x1316*x1319))+(((-1.0)*x1312*x1314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1320=IKPowWithIntegerCheck(((((-2.0)*r21*sj6))+(((2.0)*cj6*r20))),-1);
if(!x1320.valid){
continue;
}
if( IKabs(((-2.0)*cj1*(x1320.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*r02*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.0)*cj1*(x1320.value)))+IKsqr(((-1.0)*cj0*r02*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-2.0)*cj1*(x1320.value)), ((-1.0)*cj0*r02*sj1));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1321=IKcos(j5);
IkReal x1322=IKsin(j5);
IkReal x1323=((0.4)*r02);
IkReal x1324=(r21*sj6);
IkReal x1325=(cj0*sj1);
IkReal x1326=((0.4)*cj1);
IkReal x1327=(r11*sj6);
IkReal x1328=(cj6*r10);
IkReal x1329=(cj6*r20);
IkReal x1330=((0.4)*x1322);
IkReal x1331=((0.4)*sj0*sj1);
evalcond[0]=((((0.4)*x1321))+((x1323*x1325)));
evalcond[1]=((((0.4)*x1325))+((x1321*x1323)));
evalcond[2]=(x1326+((x1329*x1330))+(((-1.0)*x1324*x1330)));
evalcond[3]=(x1331+(((-1.0)*x1327*x1330))+((x1328*x1330)));
evalcond[4]=(x1330+(((-1.0)*x1327*x1331))+(((-1.0)*x1324*x1326))+((x1326*x1329))+((x1328*x1331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1332=((0.8)*pz);
CheckValue<IkReal> x1333=IKPowWithIntegerCheck(((((-1.0)*r21*sj6*x1332))+((cj6*r20*x1332))),-1);
if(!x1333.valid){
continue;
}
if( IKabs(((pz*pz)*(x1333.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*r02*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((pz*pz)*(x1333.value)))+IKsqr(((-1.0)*cj0*r02*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((pz*pz)*(x1333.value)), ((-1.0)*cj0*r02*sj1));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1334=IKcos(j5);
IkReal x1335=IKsin(j5);
IkReal x1336=((0.4)*sj6);
IkReal x1337=(sj0*sj1);
IkReal x1338=((1.0)*pz);
IkReal x1339=(cj6*r20);
IkReal x1340=((0.8)*pz);
IkReal x1341=((0.4)*cj1);
IkReal x1342=(cj6*r10);
IkReal x1343=((0.4)*x1334);
IkReal x1344=(r21*x1335);
IkReal x1345=((0.4)*x1335);
IkReal x1346=((0.4)*cj0*sj1);
evalcond[0]=(x1343+((r02*x1346)));
evalcond[1]=(x1346+((r02*x1343)));
evalcond[2]=(((x1342*x1345))+(((0.4)*x1337))+(((-1.0)*r11*x1335*x1336)));
evalcond[3]=(x1341+(((-1.0)*x1336*x1344))+((x1339*x1345))+(((-1.0)*x1338)));
evalcond[4]=((((-1.0)*sj6*x1340*x1344))+(((-1.0)*pz*x1338))+((x1335*x1339*x1340)));
evalcond[5]=(x1345+(((0.4)*x1337*x1342))+((x1339*x1341))+((pz*r21*sj6))+(((-1.0)*x1338*x1339))+(((-1.0)*r11*x1336*x1337))+(((-1.0)*cj1*r21*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1347=IKPowWithIntegerCheck(((((0.4)*cj6*r20))+(((-0.4)*r21*sj6))),-1);
if(!x1347.valid){
continue;
}
if( IKabs(((x1347.value)*((pz+(((-0.4)*cj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*r02*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1347.value)*((pz+(((-0.4)*cj1))))))+IKsqr(((-1.0)*cj0*r02*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1347.value)*((pz+(((-0.4)*cj1))))), ((-1.0)*cj0*r02*sj1));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1348=IKcos(j5);
IkReal x1349=IKsin(j5);
IkReal x1350=((0.4)*sj6);
IkReal x1351=(sj0*sj1);
IkReal x1352=((1.0)*pz);
IkReal x1353=(cj6*r20);
IkReal x1354=((0.8)*pz);
IkReal x1355=((0.4)*cj1);
IkReal x1356=(cj6*r10);
IkReal x1357=((0.4)*x1348);
IkReal x1358=(r21*x1349);
IkReal x1359=((0.4)*x1349);
IkReal x1360=((0.4)*cj0*sj1);
evalcond[0]=(x1357+((r02*x1360)));
evalcond[1]=(x1360+((r02*x1357)));
evalcond[2]=((((-1.0)*r11*x1349*x1350))+(((0.4)*x1351))+((x1356*x1359)));
evalcond[3]=(x1355+(((-1.0)*x1352))+(((-1.0)*x1350*x1358))+((x1353*x1359)));
evalcond[4]=(((x1349*x1353*x1354))+(((-1.0)*sj6*x1354*x1358))+(((-1.0)*pz*x1352)));
evalcond[5]=(x1359+(((-1.0)*x1352*x1353))+(((0.4)*x1351*x1356))+((pz*r21*sj6))+((x1353*x1355))+(((-1.0)*cj1*r21*x1350))+(((-1.0)*r11*x1350*x1351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1361=IKPowWithIntegerCheck(((((2.0)*cj6*r10))+(((-2.0)*r11*sj6))),-1);
if(!x1361.valid){
continue;
}
if( IKabs(((-2.0)*sj0*sj1*(x1361.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*r02*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.0)*sj0*sj1*(x1361.value)))+IKsqr(((-1.0)*cj0*r02*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-2.0)*sj0*sj1*(x1361.value)), ((-1.0)*cj0*r02*sj1));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1362=IKcos(j5);
IkReal x1363=IKsin(j5);
IkReal x1364=((0.4)*sj6);
IkReal x1365=(sj0*sj1);
IkReal x1366=((1.0)*pz);
IkReal x1367=(cj6*r20);
IkReal x1368=((0.8)*pz);
IkReal x1369=((0.4)*cj1);
IkReal x1370=(cj6*r10);
IkReal x1371=((0.4)*x1362);
IkReal x1372=(r21*x1363);
IkReal x1373=((0.4)*x1363);
IkReal x1374=((0.4)*cj0*sj1);
evalcond[0]=(x1371+((r02*x1374)));
evalcond[1]=(x1374+((r02*x1371)));
evalcond[2]=((((0.4)*x1365))+((x1370*x1373))+(((-1.0)*r11*x1363*x1364)));
evalcond[3]=(x1369+((x1367*x1373))+(((-1.0)*x1364*x1372))+(((-1.0)*x1366)));
evalcond[4]=((((-1.0)*pz*x1366))+((x1363*x1367*x1368))+(((-1.0)*sj6*x1368*x1372)));
evalcond[5]=((((-1.0)*x1366*x1367))+x1373+((x1367*x1369))+(((-1.0)*r11*x1364*x1365))+(((0.4)*x1365*x1370))+((pz*r21*sj6))+(((-1.0)*cj1*r21*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1375=(cj0*sj1);
IkReal x1376=((0.4)*sj6);
IkReal x1377=((0.4)*cj6);
IkReal x1378=(sj0*sj1);
CheckValue<IkReal> x1379=IKPowWithIntegerCheck(((((2.0)*cj6*r21))+(((2.0)*r20*sj6))),-1);
if(!x1379.valid){
continue;
}
CheckValue<IkReal> x1380=IKPowWithIntegerCheck((((r21*x1377))+((r20*x1376))),-1);
if(!x1380.valid){
continue;
}
if( IKabs(((x1379.value)*(((((-2.0)*r02*x1378))+(((2.0)*r12*x1375)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1380.value)*(((((-1.0)*r01*x1376*x1378))+(((-1.0)*r10*x1375*x1377))+((r11*x1375*x1376))+((r00*x1377*x1378)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1379.value)*(((((-2.0)*r02*x1378))+(((2.0)*r12*x1375))))))+IKsqr(((x1380.value)*(((((-1.0)*r01*x1376*x1378))+(((-1.0)*r10*x1375*x1377))+((r11*x1375*x1376))+((r00*x1377*x1378))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1379.value)*(((((-2.0)*r02*x1378))+(((2.0)*r12*x1375))))), ((x1380.value)*(((((-1.0)*r01*x1376*x1378))+(((-1.0)*r10*x1375*x1377))+((r11*x1375*x1376))+((r00*x1377*x1378))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1381=IKcos(j5);
IkReal x1382=IKsin(j5);
IkReal x1383=(sj0*sj1);
IkReal x1384=((0.8)*pz);
IkReal x1385=(cj6*r20);
IkReal x1386=((0.4)*sj6);
IkReal x1387=(r21*sj6);
IkReal x1388=((1.0)*pz);
IkReal x1389=((0.4)*cj1);
IkReal x1390=(cj6*r00);
IkReal x1391=((0.4)*cj6*r10);
IkReal x1392=((0.4)*x1381);
IkReal x1393=((0.4)*x1382);
IkReal x1394=((0.4)*cj0*sj1);
evalcond[0]=(x1392+(((0.4)*r12*x1383))+((r22*x1389))+(((-1.0)*r22*x1388))+((r02*x1394)));
evalcond[1]=(x1394+(((-1.0)*r01*x1382*x1386))+((x1390*x1393))+((r02*x1392)));
evalcond[2]=(((x1382*x1391))+(((-1.0)*r11*x1382*x1386))+(((0.4)*x1383))+((r12*x1392)));
evalcond[3]=((((-1.0)*x1388))+x1389+(((-1.0)*r21*x1382*x1386))+((x1385*x1393))+((r22*x1392)));
evalcond[4]=((((-1.0)*x1382*x1384*x1387))+((x1382*x1384*x1385))+(((-1.0)*pz*x1388))+((r22*x1381*x1384)));
evalcond[5]=(x1393+(((-1.0)*r11*x1383*x1386))+((x1390*x1394))+((pz*x1387))+(((-1.0)*cj1*r21*x1386))+((x1385*x1389))+((x1383*x1391))+(((-1.0)*x1385*x1388))+(((-1.0)*cj0*r01*sj1*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1395=(r12*r22);
IkReal x1396=(r12*sj1);
IkReal x1397=(cj0*r02);
IkReal x1398=((2.0)*sj0*sj1);
CheckValue<IkReal> x1399=IKPowWithIntegerCheck(((((2.0)*cj6*r10))+(((-2.0)*r11*sj6))),-1);
if(!x1399.valid){
continue;
}
if( IKabs(((x1399.value)*(((((2.0)*r12*sj0*x1396))+(((2.0)*x1396*x1397))+(((2.0)*cj1*x1395))+(((-5.0)*pz*x1395))+(((-1.0)*x1398)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.5)*pz*r22))+(((-1.0)*sj0*x1396))+(((-1.0)*sj1*x1397))+(((-1.0)*cj1*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1399.value)*(((((2.0)*r12*sj0*x1396))+(((2.0)*x1396*x1397))+(((2.0)*cj1*x1395))+(((-5.0)*pz*x1395))+(((-1.0)*x1398))))))+IKsqr(((((2.5)*pz*r22))+(((-1.0)*sj0*x1396))+(((-1.0)*sj1*x1397))+(((-1.0)*cj1*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1399.value)*(((((2.0)*r12*sj0*x1396))+(((2.0)*x1396*x1397))+(((2.0)*cj1*x1395))+(((-5.0)*pz*x1395))+(((-1.0)*x1398))))), ((((2.5)*pz*r22))+(((-1.0)*sj0*x1396))+(((-1.0)*sj1*x1397))+(((-1.0)*cj1*r22))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1400=IKcos(j5);
IkReal x1401=IKsin(j5);
IkReal x1402=(sj0*sj1);
IkReal x1403=((0.8)*pz);
IkReal x1404=(cj6*r20);
IkReal x1405=((0.4)*sj6);
IkReal x1406=(r21*sj6);
IkReal x1407=((1.0)*pz);
IkReal x1408=((0.4)*cj1);
IkReal x1409=(cj6*r00);
IkReal x1410=((0.4)*cj6*r10);
IkReal x1411=((0.4)*x1400);
IkReal x1412=((0.4)*x1401);
IkReal x1413=((0.4)*cj0*sj1);
evalcond[0]=((((-1.0)*r22*x1407))+x1411+((r02*x1413))+((r22*x1408))+(((0.4)*r12*x1402)));
evalcond[1]=((((-1.0)*r01*x1401*x1405))+x1413+((r02*x1411))+((x1409*x1412)));
evalcond[2]=((((0.4)*x1402))+((x1401*x1410))+(((-1.0)*r11*x1401*x1405))+((r12*x1411)));
evalcond[3]=(((r22*x1411))+(((-1.0)*x1407))+((x1404*x1412))+x1408+(((-1.0)*r21*x1401*x1405)));
evalcond[4]=(((r22*x1400*x1403))+((x1401*x1403*x1404))+(((-1.0)*pz*x1407))+(((-1.0)*x1401*x1403*x1406)));
evalcond[5]=((((-1.0)*cj1*r21*x1405))+((x1402*x1410))+((pz*x1406))+(((-1.0)*cj0*r01*sj1*x1405))+(((-1.0)*r11*x1402*x1405))+(((-1.0)*x1404*x1407))+((x1404*x1408))+x1412+((x1409*x1413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1414=((2.0)*sj1);
IkReal x1415=(pz*r22);
IkReal x1416=(r12*sj0);
IkReal x1417=((1.0)*sj1);
IkReal x1418=(cj1*r22);
CheckValue<IkReal> x1419=IKPowWithIntegerCheck(((((2.0)*cj6*r00))+(((-2.0)*r01*sj6))),-1);
if(!x1419.valid){
continue;
}
if( IKabs(((x1419.value)*((((cj0*x1414*(r02*r02)))+(((-5.0)*r02*x1415))+((r02*x1414*x1416))+(((2.0)*r02*x1418))+(((-1.0)*cj0*x1414)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.5)*x1415))+(((-1.0)*x1416*x1417))+(((-1.0)*cj0*r02*x1417))+(((-1.0)*x1418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1419.value)*((((cj0*x1414*(r02*r02)))+(((-5.0)*r02*x1415))+((r02*x1414*x1416))+(((2.0)*r02*x1418))+(((-1.0)*cj0*x1414))))))+IKsqr(((((2.5)*x1415))+(((-1.0)*x1416*x1417))+(((-1.0)*cj0*r02*x1417))+(((-1.0)*x1418))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1419.value)*((((cj0*x1414*(r02*r02)))+(((-5.0)*r02*x1415))+((r02*x1414*x1416))+(((2.0)*r02*x1418))+(((-1.0)*cj0*x1414))))), ((((2.5)*x1415))+(((-1.0)*x1416*x1417))+(((-1.0)*cj0*r02*x1417))+(((-1.0)*x1418))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1420=IKcos(j5);
IkReal x1421=IKsin(j5);
IkReal x1422=(sj0*sj1);
IkReal x1423=((0.8)*pz);
IkReal x1424=(cj6*r20);
IkReal x1425=((0.4)*sj6);
IkReal x1426=(r21*sj6);
IkReal x1427=((1.0)*pz);
IkReal x1428=((0.4)*cj1);
IkReal x1429=(cj6*r00);
IkReal x1430=((0.4)*cj6*r10);
IkReal x1431=((0.4)*x1420);
IkReal x1432=((0.4)*x1421);
IkReal x1433=((0.4)*cj0*sj1);
evalcond[0]=(((r02*x1433))+((r22*x1428))+(((0.4)*r12*x1422))+x1431+(((-1.0)*r22*x1427)));
evalcond[1]=(((x1429*x1432))+(((-1.0)*r01*x1421*x1425))+((r02*x1431))+x1433);
evalcond[2]=(((r12*x1431))+((x1421*x1430))+(((0.4)*x1422))+(((-1.0)*r11*x1421*x1425)));
evalcond[3]=((((-1.0)*r21*x1421*x1425))+((x1424*x1432))+x1428+((r22*x1431))+(((-1.0)*x1427)));
evalcond[4]=(((r22*x1420*x1423))+(((-1.0)*x1421*x1423*x1426))+(((-1.0)*pz*x1427))+((x1421*x1423*x1424)));
evalcond[5]=(((x1429*x1433))+((x1424*x1428))+(((-1.0)*x1424*x1427))+(((-1.0)*cj0*r01*sj1*x1425))+(((-1.0)*r11*x1422*x1425))+(((-1.0)*cj1*r21*x1425))+x1432+((x1422*x1430))+((pz*x1426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1434=pz*pz;
IkReal x1435=((0.8)*pz);
IkReal x1436=(((cj6*r20*x1435))+(((-1.0)*r21*sj6*x1435)));
CheckValue<IkReal> x1439 = IKatan2WithCheck(IkReal((r22*x1435)),IkReal(x1436),IKFAST_ATAN2_MAGTHRESH);
if(!x1439.valid){
continue;
}
IkReal x1437=((1.0)*(x1439.value));
if((((((0.64)*x1434*(r22*r22)))+(x1436*x1436))) < -0.00001)
continue;
CheckValue<IkReal> x1440=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.64)*x1434*(r22*r22)))+(x1436*x1436)))),-1);
if(!x1440.valid){
continue;
}
if( ((x1434*(x1440.value))) < -1-IKFAST_SINCOS_THRESH || ((x1434*(x1440.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1438=IKasin((x1434*(x1440.value)));
j5array[0]=((((-1.0)*x1437))+x1438);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1438))+(((-1.0)*x1437)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1441=IKsin(j5);
IkReal x1442=((0.4)*x1441);
evalcond[0]=((((-1.0)*r21*sj6*x1442))+(((0.4)*r22*(IKcos(j5))))+(((0.4)*cj1))+(((-1.0)*pz))+((cj6*r20*x1442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x1443=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1443);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1443);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1443);
rxp2_2=0;
IkReal x1444=((2.0)*sj5);
IkReal x1445=((2.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs(((((-1.0)*cj6*r10*x1444))+(((-1.0)*r12*x1445))+((r11*sj6*x1444)))))+(IKabs(((((-1.0)*cj6*r00*x1444))+(((-1.0)*r02*x1445))+((r01*sj6*x1444))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1446=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1446);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1446);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1446);
rxp2_2=0;
IkReal x1447=cj1*cj1;
IkReal x1448=(r10*sj6);
IkReal x1449=(cj6*r11);
IkReal x1450=((1.0)*x1447);
j0eval[0]=((((-1.0)*x1448*x1450))+x1449+x1448+(((-1.0)*x1449*x1450)));
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1451=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1451);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1451);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1451);
rxp2_2=0;
j0eval[0]=r12;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1458=IKPowWithIntegerCheck(sj1,-1);
if(!x1458.valid){
continue;
}
IkReal x1452=x1458.value;
IkReal x1453=((2.0)*sj5);
IkReal x1454=(cj6*r00);
IkReal x1455=(r01*sj6);
IkReal x1456=((2.0)*cj5);
IkReal x1457=((0.5)*x1452);
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(r12,-1);
if(!x1459.valid){
continue;
}
if( IKabs((x1457*(x1459.value)*(((((-1.0)*r02*x1453*x1455))+(((-2.0)*cj1*r22))+(((-1.0)*x1456))+((r02*x1453*x1454))+((x1456*(r02*r02)))+(((5.0)*pz*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1457*(((((-1.0)*r02*x1456))+(((-1.0)*x1453*x1454))+((x1453*x1455)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1457*(x1459.value)*(((((-1.0)*r02*x1453*x1455))+(((-2.0)*cj1*r22))+(((-1.0)*x1456))+((r02*x1453*x1454))+((x1456*(r02*r02)))+(((5.0)*pz*r22))))))+IKsqr((x1457*(((((-1.0)*r02*x1456))+(((-1.0)*x1453*x1454))+((x1453*x1455))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1457*(x1459.value)*(((((-1.0)*r02*x1453*x1455))+(((-2.0)*cj1*r22))+(((-1.0)*x1456))+((r02*x1453*x1454))+((x1456*(r02*r02)))+(((5.0)*pz*r22))))), (x1457*(((((-1.0)*r02*x1456))+(((-1.0)*x1453*x1454))+((x1453*x1455))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1460=IKsin(j0);
IkReal x1461=IKcos(j0);
IkReal x1462=((0.4)*sj6);
IkReal x1463=((0.4)*cj6);
IkReal x1464=(pz*sj6);
IkReal x1465=((1.0)*r20);
IkReal x1466=(cj1*r21);
IkReal x1467=(cj6*pz);
IkReal x1468=((0.4)*r02);
IkReal x1469=(cj1*r20);
IkReal x1470=((0.4)*cj5);
IkReal x1471=(sj1*x1461);
IkReal x1472=(r10*sj1*x1460);
IkReal x1473=((0.4)*sj1*x1460);
IkReal x1474=(r11*sj1*x1460);
evalcond[0]=(((r00*sj5*x1463))+(((-1.0)*r01*sj5*x1462))+((cj5*x1468))+(((0.4)*x1471)));
evalcond[1]=(((r12*x1470))+((r10*sj5*x1463))+x1473+(((-1.0)*r11*sj5*x1462)));
evalcond[2]=(((r12*x1473))+(((-1.0)*pz*r22))+(((0.4)*cj1*r22))+x1470+((x1468*x1471)));
evalcond[3]=(((x1463*x1466))+((x1462*x1472))+((r00*x1462*x1471))+(((-1.0)*x1464*x1465))+((x1463*x1474))+((r01*x1463*x1471))+((x1462*x1469))+(((-1.0)*r21*x1467)));
evalcond[4]=(((x1463*x1469))+((r00*x1463*x1471))+(((-1.0)*x1462*x1466))+((x1463*x1472))+(((0.4)*sj5))+(((-1.0)*r01*x1462*x1471))+((r21*x1464))+(((-1.0)*x1465*x1467))+(((-1.0)*x1462*x1474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1475=cj1*cj1;
IkReal x1476=((2.0)*sj6);
IkReal x1477=(pz*sj1);
IkReal x1478=(r01*sj5);
IkReal x1479=(cj5*r02);
IkReal x1480=(r00*sj1);
IkReal x1481=(sj5*sj6);
IkReal x1482=((2.0)*cj6);
IkReal x1483=((0.8)*sj6);
IkReal x1484=((0.8)*cj6*sj1);
IkReal x1485=(r10*x1483);
IkReal x1486=((0.8)*cj6*r11);
CheckValue<IkReal> x1487=IKPowWithIntegerCheck(((((-1.0)*x1475*x1486))+(((-1.0)*x1475*x1485))+x1486+x1485),-1);
if(!x1487.valid){
continue;
}
CheckValue<IkReal> x1488=IKPowWithIntegerCheck(sj1,-1);
if(!x1488.valid){
continue;
}
if( IKabs(((x1487.value)*((((x1479*x1480*x1483))+(((0.8)*cj6*r00*x1480*x1481))+(((-1.0)*cj1*r21*x1484))+((r01*x1479*x1484))+(((-0.8)*x1478*x1480))+(((1.6)*x1478*x1480*(cj6*cj6)))+(((-1.0)*cj6*r01*sj1*x1478*x1483))+((r21*x1477*x1482))+((r20*x1476*x1477))+(((-1.0)*cj1*r20*sj1*x1483)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.5)*(x1488.value)*(((((-1.0)*r00*sj5*x1482))+((x1476*x1478))+(((-2.0)*x1479)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1487.value)*((((x1479*x1480*x1483))+(((0.8)*cj6*r00*x1480*x1481))+(((-1.0)*cj1*r21*x1484))+((r01*x1479*x1484))+(((-0.8)*x1478*x1480))+(((1.6)*x1478*x1480*(cj6*cj6)))+(((-1.0)*cj6*r01*sj1*x1478*x1483))+((r21*x1477*x1482))+((r20*x1476*x1477))+(((-1.0)*cj1*r20*sj1*x1483))))))+IKsqr(((0.5)*(x1488.value)*(((((-1.0)*r00*sj5*x1482))+((x1476*x1478))+(((-2.0)*x1479))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1487.value)*((((x1479*x1480*x1483))+(((0.8)*cj6*r00*x1480*x1481))+(((-1.0)*cj1*r21*x1484))+((r01*x1479*x1484))+(((-0.8)*x1478*x1480))+(((1.6)*x1478*x1480*(cj6*cj6)))+(((-1.0)*cj6*r01*sj1*x1478*x1483))+((r21*x1477*x1482))+((r20*x1476*x1477))+(((-1.0)*cj1*r20*sj1*x1483))))), ((0.5)*(x1488.value)*(((((-1.0)*r00*sj5*x1482))+((x1476*x1478))+(((-2.0)*x1479))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1489=IKsin(j0);
IkReal x1490=IKcos(j0);
IkReal x1491=((0.4)*sj6);
IkReal x1492=((0.4)*cj6);
IkReal x1493=(pz*sj6);
IkReal x1494=((1.0)*r20);
IkReal x1495=(cj1*r21);
IkReal x1496=(cj6*pz);
IkReal x1497=((0.4)*r02);
IkReal x1498=(cj1*r20);
IkReal x1499=((0.4)*cj5);
IkReal x1500=(sj1*x1490);
IkReal x1501=(r10*sj1*x1489);
IkReal x1502=((0.4)*sj1*x1489);
IkReal x1503=(r11*sj1*x1489);
evalcond[0]=(((cj5*x1497))+(((-1.0)*r01*sj5*x1491))+((r00*sj5*x1492))+(((0.4)*x1500)));
evalcond[1]=((((-1.0)*r11*sj5*x1491))+((r12*x1499))+x1502+((r10*sj5*x1492)));
evalcond[2]=((((-1.0)*pz*r22))+((r12*x1502))+(((0.4)*cj1*r22))+((x1497*x1500))+x1499);
evalcond[3]=(((x1492*x1503))+((r00*x1491*x1500))+(((-1.0)*x1493*x1494))+(((-1.0)*r21*x1496))+((x1491*x1498))+((r01*x1492*x1500))+((x1492*x1495))+((x1491*x1501)));
evalcond[4]=(((x1492*x1501))+(((-1.0)*x1494*x1496))+((r00*x1492*x1500))+(((-1.0)*x1491*x1503))+(((-1.0)*r01*x1491*x1500))+((r21*x1493))+(((0.4)*sj5))+((x1492*x1498))+(((-1.0)*x1491*x1495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1504=((2.0)*sj5);
IkReal x1505=((2.0)*cj5);
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x1506.valid){
continue;
}
CheckValue<IkReal> x1507 = IKatan2WithCheck(IkReal((((r11*sj6*x1504))+(((-1.0)*cj6*r10*x1504))+(((-1.0)*r12*x1505)))),IkReal((((r01*sj6*x1504))+(((-1.0)*cj6*r00*x1504))+(((-1.0)*r02*x1505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1507.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1506.value)))+(x1507.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1508=IKsin(j0);
IkReal x1509=IKcos(j0);
IkReal x1510=((0.4)*sj6);
IkReal x1511=((0.4)*cj6);
IkReal x1512=(pz*sj6);
IkReal x1513=((1.0)*r20);
IkReal x1514=(cj1*r21);
IkReal x1515=(cj6*pz);
IkReal x1516=((0.4)*r02);
IkReal x1517=(cj1*r20);
IkReal x1518=((0.4)*cj5);
IkReal x1519=(sj1*x1509);
IkReal x1520=(r10*sj1*x1508);
IkReal x1521=((0.4)*sj1*x1508);
IkReal x1522=(r11*sj1*x1508);
evalcond[0]=(((cj5*x1516))+((r00*sj5*x1511))+(((-1.0)*r01*sj5*x1510))+(((0.4)*x1519)));
evalcond[1]=(((r12*x1518))+(((-1.0)*r11*sj5*x1510))+x1521+((r10*sj5*x1511)));
evalcond[2]=(((r12*x1521))+(((-1.0)*pz*r22))+(((0.4)*cj1*r22))+((x1516*x1519))+x1518);
evalcond[3]=(((r01*x1511*x1519))+((x1510*x1520))+((x1510*x1517))+(((-1.0)*r21*x1515))+((r00*x1510*x1519))+(((-1.0)*x1512*x1513))+((x1511*x1522))+((x1511*x1514)));
evalcond[4]=(((r00*x1511*x1519))+(((-1.0)*x1513*x1515))+(((-1.0)*x1510*x1514))+(((-1.0)*x1510*x1522))+(((-1.0)*r01*x1510*x1519))+(((0.4)*sj5))+((r21*x1512))+((x1511*x1520))+((x1511*x1517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1523=((((0.4)*cj6*r20))+(((-0.4)*r21*sj6)));
CheckValue<IkReal> x1526 = IKatan2WithCheck(IkReal(((0.4)*r22)),IkReal(x1523),IKFAST_ATAN2_MAGTHRESH);
if(!x1526.valid){
continue;
}
IkReal x1524=((1.0)*(x1526.value));
if((((x1523*x1523)+(((0.16)*(r22*r22))))) < -0.00001)
continue;
CheckValue<IkReal> x1527=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1523*x1523)+(((0.16)*(r22*r22)))))),-1);
if(!x1527.valid){
continue;
}
if( (((x1527.value)*(((((0.4)*cj1))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x1527.value)*(((((0.4)*cj1))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1525=IKasin(((x1527.value)*(((((0.4)*cj1))+(((-1.0)*pz))))));
j5array[0]=((((-1.0)*x1524))+(((-1.0)*x1525)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1524))+x1525);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1528=IKsin(j5);
IkReal x1529=((0.8)*pz);
evalcond[0]=(((r22*x1529*(IKcos(j5))))+(((-1.0)*(pz*pz)))+((cj6*r20*x1528*x1529))+(((-1.0)*r21*sj6*x1528*x1529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x1530=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1530);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1530);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1530);
rxp2_2=0;
IkReal x1531=((2.0)*sj5);
IkReal x1532=((2.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs((((r01*sj6*x1531))+(((-1.0)*r02*x1532))+(((-1.0)*cj6*r00*x1531)))))+(IKabs(((((-1.0)*cj6*r10*x1531))+(((-1.0)*r12*x1532))+((r11*sj6*x1531))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1533=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1533);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1533);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1533);
rxp2_2=0;
IkReal x1534=cj1*cj1;
IkReal x1535=(r10*sj6);
IkReal x1536=(cj6*r11);
IkReal x1537=((1.0)*x1534);
j0eval[0]=((((-1.0)*x1535*x1537))+x1536+x1535+(((-1.0)*x1536*x1537)));
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1538=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1538);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1538);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1538);
rxp2_2=0;
j0eval[0]=r12;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1545=IKPowWithIntegerCheck(sj1,-1);
if(!x1545.valid){
continue;
}
IkReal x1539=x1545.value;
IkReal x1540=((2.0)*sj5);
IkReal x1541=(cj6*r00);
IkReal x1542=(r01*sj6);
IkReal x1543=((2.0)*cj5);
IkReal x1544=((0.5)*x1539);
CheckValue<IkReal> x1546=IKPowWithIntegerCheck(r12,-1);
if(!x1546.valid){
continue;
}
if( IKabs((x1544*(x1546.value)*(((((-2.0)*cj1*r22))+((x1543*(r02*r02)))+(((-1.0)*r02*x1540*x1542))+(((-1.0)*x1543))+(((5.0)*pz*r22))+((r02*x1540*x1541)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1544*(((((-1.0)*r02*x1543))+(((-1.0)*x1540*x1541))+((x1540*x1542)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1544*(x1546.value)*(((((-2.0)*cj1*r22))+((x1543*(r02*r02)))+(((-1.0)*r02*x1540*x1542))+(((-1.0)*x1543))+(((5.0)*pz*r22))+((r02*x1540*x1541))))))+IKsqr((x1544*(((((-1.0)*r02*x1543))+(((-1.0)*x1540*x1541))+((x1540*x1542))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1544*(x1546.value)*(((((-2.0)*cj1*r22))+((x1543*(r02*r02)))+(((-1.0)*r02*x1540*x1542))+(((-1.0)*x1543))+(((5.0)*pz*r22))+((r02*x1540*x1541))))), (x1544*(((((-1.0)*r02*x1543))+(((-1.0)*x1540*x1541))+((x1540*x1542))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1547=IKsin(j0);
IkReal x1548=IKcos(j0);
IkReal x1549=((0.4)*sj6);
IkReal x1550=((0.4)*cj6);
IkReal x1551=(pz*sj6);
IkReal x1552=((1.0)*r20);
IkReal x1553=(cj1*r21);
IkReal x1554=(cj6*pz);
IkReal x1555=((0.4)*r02);
IkReal x1556=(cj1*r20);
IkReal x1557=((0.4)*cj5);
IkReal x1558=(sj1*x1548);
IkReal x1559=(r10*sj1*x1547);
IkReal x1560=((0.4)*sj1*x1547);
IkReal x1561=(r11*sj1*x1547);
evalcond[0]=(((r00*sj5*x1550))+(((-1.0)*r01*sj5*x1549))+(((0.4)*x1558))+((cj5*x1555)));
evalcond[1]=((((-1.0)*r11*sj5*x1549))+((r10*sj5*x1550))+((r12*x1557))+x1560);
evalcond[2]=(((x1555*x1558))+(((-1.0)*pz*r22))+(((0.4)*cj1*r22))+((r12*x1560))+x1557);
evalcond[3]=(((x1550*x1561))+(((-1.0)*r21*x1554))+((x1550*x1553))+((r00*x1549*x1558))+((x1549*x1559))+((x1549*x1556))+((r01*x1550*x1558))+(((-1.0)*x1551*x1552)));
evalcond[4]=((((-1.0)*x1549*x1553))+(((-1.0)*x1552*x1554))+((x1550*x1556))+((x1550*x1559))+(((-1.0)*x1549*x1561))+(((-1.0)*r01*x1549*x1558))+(((0.4)*sj5))+((r00*x1550*x1558))+((r21*x1551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1562=cj1*cj1;
IkReal x1563=((2.0)*sj6);
IkReal x1564=(pz*sj1);
IkReal x1565=(r01*sj5);
IkReal x1566=(cj5*r02);
IkReal x1567=(r00*sj1);
IkReal x1568=(sj5*sj6);
IkReal x1569=((2.0)*cj6);
IkReal x1570=((0.8)*sj6);
IkReal x1571=((0.8)*cj6*sj1);
IkReal x1572=(r10*x1570);
IkReal x1573=((0.8)*cj6*r11);
CheckValue<IkReal> x1574=IKPowWithIntegerCheck(((((-1.0)*x1562*x1573))+(((-1.0)*x1562*x1572))+x1573+x1572),-1);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(sj1,-1);
if(!x1575.valid){
continue;
}
if( IKabs(((x1574.value)*(((((-1.0)*cj1*r21*x1571))+((r01*x1566*x1571))+(((-1.0)*cj1*r20*sj1*x1570))+((x1566*x1567*x1570))+(((-1.0)*cj6*r01*sj1*x1565*x1570))+((r21*x1564*x1569))+(((1.6)*x1565*x1567*(cj6*cj6)))+(((-0.8)*x1565*x1567))+(((0.8)*cj6*r00*x1567*x1568))+((r20*x1563*x1564)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.5)*(x1575.value)*(((((-1.0)*r00*sj5*x1569))+(((-2.0)*x1566))+((x1563*x1565)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1574.value)*(((((-1.0)*cj1*r21*x1571))+((r01*x1566*x1571))+(((-1.0)*cj1*r20*sj1*x1570))+((x1566*x1567*x1570))+(((-1.0)*cj6*r01*sj1*x1565*x1570))+((r21*x1564*x1569))+(((1.6)*x1565*x1567*(cj6*cj6)))+(((-0.8)*x1565*x1567))+(((0.8)*cj6*r00*x1567*x1568))+((r20*x1563*x1564))))))+IKsqr(((0.5)*(x1575.value)*(((((-1.0)*r00*sj5*x1569))+(((-2.0)*x1566))+((x1563*x1565))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1574.value)*(((((-1.0)*cj1*r21*x1571))+((r01*x1566*x1571))+(((-1.0)*cj1*r20*sj1*x1570))+((x1566*x1567*x1570))+(((-1.0)*cj6*r01*sj1*x1565*x1570))+((r21*x1564*x1569))+(((1.6)*x1565*x1567*(cj6*cj6)))+(((-0.8)*x1565*x1567))+(((0.8)*cj6*r00*x1567*x1568))+((r20*x1563*x1564))))), ((0.5)*(x1575.value)*(((((-1.0)*r00*sj5*x1569))+(((-2.0)*x1566))+((x1563*x1565))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1576=IKsin(j0);
IkReal x1577=IKcos(j0);
IkReal x1578=((0.4)*sj6);
IkReal x1579=((0.4)*cj6);
IkReal x1580=(pz*sj6);
IkReal x1581=((1.0)*r20);
IkReal x1582=(cj1*r21);
IkReal x1583=(cj6*pz);
IkReal x1584=((0.4)*r02);
IkReal x1585=(cj1*r20);
IkReal x1586=((0.4)*cj5);
IkReal x1587=(sj1*x1577);
IkReal x1588=(r10*sj1*x1576);
IkReal x1589=((0.4)*sj1*x1576);
IkReal x1590=(r11*sj1*x1576);
evalcond[0]=((((-1.0)*r01*sj5*x1578))+(((0.4)*x1587))+((r00*sj5*x1579))+((cj5*x1584)));
evalcond[1]=(((r12*x1586))+(((-1.0)*r11*sj5*x1578))+x1589+((r10*sj5*x1579)));
evalcond[2]=(((x1584*x1587))+(((-1.0)*pz*r22))+((r12*x1589))+(((0.4)*cj1*r22))+x1586);
evalcond[3]=((((-1.0)*x1580*x1581))+(((-1.0)*r21*x1583))+((r00*x1578*x1587))+((x1579*x1582))+((x1579*x1590))+((x1578*x1588))+((x1578*x1585))+((r01*x1579*x1587)));
evalcond[4]=((((-1.0)*x1578*x1582))+(((-1.0)*x1578*x1590))+((r00*x1579*x1587))+(((0.4)*sj5))+(((-1.0)*r01*x1578*x1587))+((r21*x1580))+(((-1.0)*x1581*x1583))+((x1579*x1588))+((x1579*x1585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1591=((2.0)*sj5);
IkReal x1592=((2.0)*cj5);
CheckValue<IkReal> x1593 = IKatan2WithCheck(IkReal((((r11*sj6*x1591))+(((-1.0)*cj6*r10*x1591))+(((-1.0)*r12*x1592)))),IkReal(((((-1.0)*r02*x1592))+((r01*sj6*x1591))+(((-1.0)*cj6*r00*x1591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1593.valid){
continue;
}
CheckValue<IkReal> x1594=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x1594.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1593.value)+(((1.5707963267949)*(x1594.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1595=IKsin(j0);
IkReal x1596=IKcos(j0);
IkReal x1597=((0.4)*sj6);
IkReal x1598=((0.4)*cj6);
IkReal x1599=(pz*sj6);
IkReal x1600=((1.0)*r20);
IkReal x1601=(cj1*r21);
IkReal x1602=(cj6*pz);
IkReal x1603=((0.4)*r02);
IkReal x1604=(cj1*r20);
IkReal x1605=((0.4)*cj5);
IkReal x1606=(sj1*x1596);
IkReal x1607=(r10*sj1*x1595);
IkReal x1608=((0.4)*sj1*x1595);
IkReal x1609=(r11*sj1*x1595);
evalcond[0]=(((r00*sj5*x1598))+(((0.4)*x1606))+((cj5*x1603))+(((-1.0)*r01*sj5*x1597)));
evalcond[1]=(x1608+((r10*sj5*x1598))+(((-1.0)*r11*sj5*x1597))+((r12*x1605)));
evalcond[2]=((((-1.0)*pz*r22))+x1605+(((0.4)*cj1*r22))+((r12*x1608))+((x1603*x1606)));
evalcond[3]=(((r01*x1598*x1606))+(((-1.0)*x1599*x1600))+(((-1.0)*r21*x1602))+((r00*x1597*x1606))+((x1598*x1601))+((x1598*x1609))+((x1597*x1607))+((x1597*x1604)));
evalcond[4]=((((-1.0)*x1600*x1602))+((r00*x1598*x1606))+(((-1.0)*x1597*x1609))+(((-1.0)*x1597*x1601))+(((0.4)*sj5))+((x1598*x1607))+((x1598*x1604))+(((-1.0)*r01*x1597*x1606))+((r21*x1599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j5, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1610=sj1*sj1;
IkReal x1611=((-0.8)*sj1);
IkReal x1612=((0.64)*x1610);
CheckValue<IkReal> x1615 = IKatan2WithCheck(IkReal((px*x1611)),IkReal((py*x1611)),IKFAST_ATAN2_MAGTHRESH);
if(!x1615.valid){
continue;
}
IkReal x1613=((1.0)*(x1615.value));
if(((((x1612*(py*py)))+((x1612*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x1616=IKPowWithIntegerCheck(IKabs(IKsqrt((((x1612*(py*py)))+((x1612*(px*px)))))),-1);
if(!x1616.valid){
continue;
}
if( (((x1616.value)*((pp+(((-0.8)*cj1*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x1616.value)*((pp+(((-0.8)*cj1*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1614=IKasin(((x1616.value)*((pp+(((-0.8)*cj1*pz))))));
j0array[0]=((((-1.0)*x1614))+(((-1.0)*x1613)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x1614+(((-1.0)*x1613)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1617=((1.0)*sj1);
cj5array[0]=((((2.5)*npz))+(((-1.0)*r12*sj0*x1617))+(((-1.0)*cj0*r02*x1617))+(((-1.0)*cj1*r22)));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j6eval[3];
IkReal x1618=(r12*sj5);
IkReal x1619=((2.0)*cj5);
IkReal x1620=((2.0)*cj1);
IkReal x1621=((2.0)*cj0*sj1);
j6eval[0]=x1618;
j6eval[1]=((IKabs(((((-1.0)*r20*x1621))+((r00*x1620))+((r11*x1619))+(((5.0)*rxp0_1)))))+(IKabs(((((-1.0)*r21*x1621))+((r01*x1620))+(((5.0)*rxp1_1))+(((-1.0)*r10*x1619))))));
j6eval[2]=IKsign(x1618);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x1622=((5.0)*pp);
IkReal x1623=((4.0)*cj5);
IkReal x1624=((4.0)*npx);
IkReal x1625=(r21*sj5);
IkReal x1626=((10.0)*pz);
IkReal x1627=(npy*r20*sj5);
j6eval[0]=((((-1.0)*npx*x1625))+x1627);
j6eval[1]=IKsign(((((4.0)*x1627))+(((-1.0)*x1624*x1625))));
j6eval[2]=((IKabs(((((-1.0)*r20*x1622))+(((-1.0)*npx*r22*x1623))+((npz*r20*x1623))+(((-1.0)*cj1*x1624))+((npx*x1626)))))+(IKabs(((((-4.0)*cj1*npy))+((npy*x1626))+(((-1.0)*r21*x1622))+(((-1.0)*npy*r22*x1623))+((npz*r21*x1623))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x1628=((4.0)*npx);
IkReal x1629=(cj0*sj1);
IkReal x1630=(r01*sj5);
IkReal x1631=(cj5*r02);
IkReal x1632=((5.0)*pp);
IkReal x1633=((10.0)*px);
IkReal x1634=((4.0)*npy);
IkReal x1635=((4.0)*cj5*npz);
IkReal x1636=(npy*r00*sj5);
j6eval[0]=((((-1.0)*npx*x1630))+x1636);
j6eval[1]=((IKabs(((((-1.0)*r01*x1632))+((r01*x1635))+(((-1.0)*x1629*x1634))+(((-1.0)*x1631*x1634))+((npy*x1633)))))+(IKabs((((npx*x1633))+(((-1.0)*r00*x1632))+((r00*x1635))+(((-1.0)*x1628*x1629))+(((-1.0)*x1628*x1631))))));
j6eval[2]=IKsign((((r00*sj5*x1634))+(((-1.0)*x1628*x1630))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj5=0;
cj5=1.0;
j5=0;
IkReal x1637=((0.4)*cj1);
IkReal x1638=((0.4)*sj1);
j6eval[0]=((IKabs(((((-1.0)*r11*sj0*x1638))+npy+(((-1.0)*r21*x1637))+(((-1.0)*cj0*r01*x1638)))))+(IKabs((((r20*x1637))+((r10*sj0*x1638))+(((-1.0)*npx))+((cj0*r00*x1638))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj5=0;
cj5=1.0;
j5=0;
IkReal x1639=((0.4)*cj1);
IkReal x1640=((0.4)*sj1);
j6eval[0]=((IKabs((((r20*x1639))+(((-1.0)*npx))+((r10*sj0*x1640))+((cj0*r00*x1640)))))+(IKabs((((r21*x1639))+(((-1.0)*npy))+((cj0*r01*x1640))+((r11*sj0*x1640))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1641=((0.4)*cj1);
IkReal x1642=((0.4)*sj1);
CheckValue<IkReal> x1644 = IKatan2WithCheck(IkReal((((r21*x1641))+(((-1.0)*npy))+((cj0*r01*x1642))+((r11*sj0*x1642)))),IkReal((((r20*x1641))+(((-1.0)*npx))+((r10*sj0*x1642))+((cj0*r00*x1642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
IkReal x1643=x1644.value;
j6array[0]=((-1.0)*x1643);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1643)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1645=IKcos(j6);
IkReal x1646=IKsin(j6);
IkReal x1647=((0.4)*cj1);
IkReal x1648=((0.4)*sj0*sj1);
IkReal x1649=((0.4)*cj0*sj1);
evalcond[0]=(((r00*x1645*x1649))+((r10*x1645*x1648))+(((-1.0)*npx*x1645))+(((-1.0)*r01*x1646*x1649))+(((-1.0)*r21*x1646*x1647))+(((-1.0)*r11*x1646*x1648))+((r20*x1645*x1647))+((npy*x1646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1650=((0.4)*cj1);
IkReal x1651=((0.4)*sj1);
CheckValue<IkReal> x1653 = IKatan2WithCheck(IkReal((((r20*x1650))+(((-1.0)*npx))+((r10*sj0*x1651))+((cj0*r00*x1651)))),IkReal(((((-1.0)*r21*x1650))+(((-1.0)*r11*sj0*x1651))+npy+(((-1.0)*cj0*r01*x1651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1653.valid){
continue;
}
IkReal x1652=x1653.value;
j6array[0]=((-1.0)*x1652);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1652)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1654=IKsin(j6);
IkReal x1655=IKcos(j6);
IkReal x1656=((0.4)*sj1);
IkReal x1657=((0.4)*cj1);
evalcond[0]=((((-1.0)*npx*x1654))+((cj0*r01*x1655*x1656))+((r20*x1654*x1657))+((r21*x1655*x1657))+((r11*sj0*x1655*x1656))+((r10*sj0*x1654*x1656))+(((-1.0)*npy*x1655))+((cj0*r00*x1654*x1656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1658=((0.4)*cj1);
IkReal x1659=((0.4)*sj1);
j6eval[0]=((IKabs((((r20*x1658))+(((-1.0)*npx))+((r10*sj0*x1659))+((cj0*r00*x1659)))))+(IKabs(((((-1.0)*r21*x1658))+(((-1.0)*r11*sj0*x1659))+npy+(((-1.0)*cj0*r01*x1659))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1660=((0.4)*cj1);
IkReal x1661=((0.4)*sj1);
j6eval[0]=((IKabs(((((-1.0)*npx))+((r20*x1660))+((r10*sj0*x1661))+((cj0*r00*x1661)))))+(IKabs(((((-1.0)*npy))+((cj0*r01*x1661))+((r11*sj0*x1661))+((r21*x1660))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1662=((0.4)*cj1);
IkReal x1663=((0.4)*sj1);
CheckValue<IkReal> x1665 = IKatan2WithCheck(IkReal(((((-1.0)*npy))+((cj0*r01*x1663))+((r11*sj0*x1663))+((r21*x1662)))),IkReal(((((-1.0)*npx))+((r20*x1662))+((r10*sj0*x1663))+((cj0*r00*x1663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1665.valid){
continue;
}
IkReal x1664=x1665.value;
j6array[0]=((-1.0)*x1664);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1664)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1666=IKcos(j6);
IkReal x1667=IKsin(j6);
IkReal x1668=((0.4)*cj1);
IkReal x1669=((0.4)*sj0*sj1);
IkReal x1670=((0.4)*cj0*sj1);
evalcond[0]=((((-1.0)*r21*x1667*x1668))+((r10*x1666*x1669))+(((-1.0)*npx*x1666))+(((-1.0)*r11*x1667*x1669))+((r00*x1666*x1670))+((npy*x1667))+(((-1.0)*r01*x1667*x1670))+((r20*x1666*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1671=((0.4)*cj1);
IkReal x1672=((0.4)*sj1);
CheckValue<IkReal> x1674 = IKatan2WithCheck(IkReal((((r10*sj0*x1672))+((cj0*r00*x1672))+(((-1.0)*npx))+((r20*x1671)))),IkReal(((((-1.0)*r11*sj0*x1672))+npy+(((-1.0)*cj0*r01*x1672))+(((-1.0)*r21*x1671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1674.valid){
continue;
}
IkReal x1673=x1674.value;
j6array[0]=((-1.0)*x1673);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1673)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1675=IKsin(j6);
IkReal x1676=IKcos(j6);
IkReal x1677=((0.4)*sj1);
IkReal x1678=((0.4)*cj1);
evalcond[0]=(((r11*sj0*x1676*x1677))+((r10*sj0*x1675*x1677))+((r21*x1676*x1678))+((cj0*r00*x1675*x1677))+((r20*x1675*x1678))+(((-1.0)*npx*x1675))+((cj0*r01*x1676*x1677))+(((-1.0)*npy*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
IkReal x1679=(r02*sj5);
IkReal x1680=((2.0)*r10);
IkReal x1681=(cj5*r22);
IkReal x1682=((2.0)*r11);
IkReal x1683=((2.0)*sj0*sj1);
j6eval[0]=x1679;
j6eval[1]=((IKabs((((cj1*x1680))+((x1680*x1681))+(((-1.0)*r20*x1683))+(((-5.0)*rxp0_0)))))+(IKabs(((((-5.0)*rxp1_0))+((cj1*x1682))+((x1681*x1682))+(((-1.0)*r21*x1683))))));
j6eval[2]=IKsign(x1679);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
IkReal x1684=(r22*sj5);
IkReal x1685=((2.0)*r10);
IkReal x1686=(cj5*r02);
IkReal x1687=(cj0*sj1);
IkReal x1688=((2.0)*r11);
IkReal x1689=((2.0)*sj0*sj1);
j6eval[0]=x1684;
j6eval[1]=IKsign(x1684);
j6eval[2]=((IKabs(((((-5.0)*rxp1_2))+(((-1.0)*x1686*x1688))+(((-1.0)*x1687*x1688))+((r01*x1689)))))+(IKabs((((r00*x1689))+(((-1.0)*x1685*x1686))+(((-1.0)*x1685*x1687))+(((-5.0)*rxp0_2))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
IkReal x1690=((5.0)*pp);
IkReal x1691=((10.0)*py);
IkReal x1692=((4.0)*sj0*sj1);
IkReal x1693=(npx*r11*sj5);
IkReal x1694=(npy*r10*sj5);
IkReal x1695=((4.0)*cj5*pz*r22);
IkReal x1696=((4.0)*cj5*px*r02);
j6eval[0]=(x1694+(((-1.0)*x1693)));
j6eval[1]=((IKabs((((r10*x1696))+((r10*x1695))+(((-1.0)*npx*x1692))+((npx*x1691))+(((-1.0)*r10*x1690)))))+(IKabs(((((-1.0)*r11*x1690))+((r11*x1695))+((r11*x1696))+(((-1.0)*npy*x1692))+((npy*x1691))))));
j6eval[2]=IKsign(((((4.0)*x1694))+(((-4.0)*x1693))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=1.0;
j5=0;
IkReal x1697=((0.4)*r02);
IkReal x1698=((0.4)*cj1);
IkReal x1699=((1.0)*pz);
j6eval[0]=((IKabs(((((-1.0)*r21*x1699))+((r21*x1698))+(((-1.0)*r01*x1697)))))+(IKabs((((r20*x1698))+(((-1.0)*r20*x1699))+(((-1.0)*r00*x1697))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=1.0;
j5=0;
IkReal x1700=((0.4)*r02);
IkReal x1701=((0.4)*cj1);
j6eval[0]=((IKabs(((((-1.0)*r21*x1701))+((r01*x1700))+((pz*r21)))))+(IKabs(((((-1.0)*pz*r20))+((r20*x1701))+(((-1.0)*r00*x1700))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1702=((0.4)*r02);
IkReal x1703=((0.4)*cj1);
CheckValue<IkReal> x1705 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+((r20*x1703))+((py*r10))+(((-1.0)*r00*x1702)))),IkReal(((((-1.0)*px*r01))+(((-1.0)*r21*x1703))+((r01*x1702))+npy+(((-1.0)*py*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1705.valid){
continue;
}
IkReal x1704=x1705.value;
j6array[0]=((-1.0)*x1704);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1704)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1706=IKsin(j6);
IkReal x1707=IKcos(j6);
IkReal x1708=((0.4)*r02);
IkReal x1709=((0.4)*cj1);
IkReal x1710=(r01*x1707);
IkReal x1711=(r00*x1706);
evalcond[0]=(((r21*x1707*x1709))+((r20*x1706*x1709))+((py*r11*x1707))+(((-1.0)*x1708*x1711))+(((-1.0)*x1708*x1710))+((py*r10*x1706))+(((-1.0)*npx*x1706))+((px*x1711))+((px*x1710))+(((-1.0)*npy*x1707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1712=((0.4)*r02);
IkReal x1713=((0.4)*cj1);
CheckValue<IkReal> x1715 = IKatan2WithCheck(IkReal((((px*r01))+(((-1.0)*npy))+((r21*x1713))+((py*r11))+(((-1.0)*r01*x1712)))),IkReal(((((-1.0)*r00*x1712))+((px*r00))+((r20*x1713))+(((-1.0)*npx))+((py*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1715.valid){
continue;
}
IkReal x1714=x1715.value;
j6array[0]=((-1.0)*x1714);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1714)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1716=IKcos(j6);
IkReal x1717=IKsin(j6);
IkReal x1718=((0.4)*x1717);
IkReal x1719=(r00*x1716);
IkReal x1720=((1.0)*x1717);
evalcond[0]=(((npy*x1717))+(((-1.0)*npx*x1716))+((py*r10*x1716))+(((-0.4)*r02*x1719))+((px*x1719))+(((-1.0)*py*r11*x1720))+(((0.4)*cj1*r20*x1716))+(((-1.0)*cj1*r21*x1718))+(((-1.0)*px*r01*x1720))+((r01*r02*x1718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1721=((0.4)*r02);
IkReal x1722=((0.4)*cj1);
IkReal x1723=((1.0)*pz);
j6eval[0]=((IKabs((((r00*x1721))+((r20*x1722))+(((-1.0)*r20*x1723)))))+(IKabs((((r01*x1721))+((r21*x1722))+(((-1.0)*r21*x1723))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1724=((0.4)*r02);
IkReal x1725=((0.4)*cj1);
j6eval[0]=((IKabs((((r00*x1724))+(((-1.0)*pz*r20))+((r20*x1725)))))+(IKabs(((((-1.0)*r01*x1724))+((pz*r21))+(((-1.0)*r21*x1725))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1726=((0.4)*r02);
IkReal x1727=((0.4)*cj1);
CheckValue<IkReal> x1729 = IKatan2WithCheck(IkReal((((r00*x1726))+((px*r00))+(((-1.0)*npx))+((py*r10))+((r20*x1727)))),IkReal(((((-1.0)*px*r01))+(((-1.0)*r01*x1726))+npy+(((-1.0)*py*r11))+(((-1.0)*r21*x1727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1729.valid){
continue;
}
IkReal x1728=x1729.value;
j6array[0]=((-1.0)*x1728);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1728)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1730=IKsin(j6);
IkReal x1731=IKcos(j6);
IkReal x1732=((0.4)*r02);
IkReal x1733=((0.4)*cj1);
IkReal x1734=(r01*x1731);
IkReal x1735=(r00*x1730);
evalcond[0]=(((r20*x1730*x1733))+((py*r11*x1731))+((r21*x1731*x1733))+((px*x1735))+((px*x1734))+(((-1.0)*npy*x1731))+((x1732*x1735))+((x1732*x1734))+((py*r10*x1730))+(((-1.0)*npx*x1730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1736=((0.4)*r02);
IkReal x1737=((0.4)*cj1);
CheckValue<IkReal> x1739 = IKatan2WithCheck(IkReal((((r01*x1736))+((px*r01))+((r21*x1737))+(((-1.0)*npy))+((py*r11)))),IkReal((((r00*x1736))+((px*r00))+(((-1.0)*npx))+((py*r10))+((r20*x1737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1739.valid){
continue;
}
IkReal x1738=x1739.value;
j6array[0]=((-1.0)*x1738);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1738)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1740=IKcos(j6);
IkReal x1741=IKsin(j6);
IkReal x1742=((0.4)*x1741);
IkReal x1743=(r00*x1740);
IkReal x1744=((1.0)*x1741);
evalcond[0]=(((npy*x1741))+(((0.4)*r02*x1743))+((px*x1743))+(((-1.0)*py*r11*x1744))+(((0.4)*cj1*r20*x1740))+(((-1.0)*cj1*r21*x1742))+(((-1.0)*r01*r02*x1742))+(((-1.0)*npx*x1740))+((py*r10*x1740))+(((-1.0)*px*r01*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
IkReal x1745=(r22*sj5);
IkReal x1746=((2.0)*sj1);
j6eval[0]=x1745;
j6eval[1]=((IKabs(((((-5.0)*rxp0_2))+(((-1.0)*cj0*r10*x1746))+((r00*sj0*x1746)))))+(IKabs(((((-5.0)*rxp1_2))+((r01*sj0*x1746))+(((-1.0)*cj0*r11*x1746))))));
j6eval[2]=IKsign(x1745);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
IkReal x1747=((4.0)*npx);
IkReal x1748=(cj0*sj1);
IkReal x1749=(r01*sj5);
IkReal x1750=((5.0)*pp);
IkReal x1751=((10.0)*px);
IkReal x1752=(npy*r00*sj5);
IkReal x1753=((4.0)*cj5*pz*r22);
j6eval[0]=(x1752+(((-1.0)*npx*x1749)));
j6eval[1]=IKsign(((((-1.0)*x1747*x1749))+(((4.0)*x1752))));
j6eval[2]=((IKabs((((npy*x1751))+(((-4.0)*npy*x1748))+(((-1.0)*r01*x1750))+((r01*x1753)))))+(IKabs((((npx*x1751))+(((-1.0)*x1747*x1748))+(((-1.0)*r00*x1750))+((r00*x1753))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
IkReal x1754=((10.0)*py);
IkReal x1755=((5.0)*pp);
IkReal x1756=((4.0)*sj0*sj1);
IkReal x1757=(npx*r11*sj5);
IkReal x1758=(npy*r10*sj5);
IkReal x1759=((4.0)*cj5*pz*r22);
j6eval[0]=(x1758+(((-1.0)*x1757)));
j6eval[1]=((IKabs((((npx*x1754))+(((-1.0)*r10*x1755))+(((-1.0)*npx*x1756))+((r10*x1759)))))+(IKabs(((((-1.0)*r11*x1755))+((npy*x1754))+(((-1.0)*npy*x1756))+((r11*x1759))))));
j6eval[2]=IKsign(((((-4.0)*x1757))+(((4.0)*x1758))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[2];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=1.0;
j5=0;
CheckValue<IkReal> x1764=IKPowWithIntegerCheck(r22,-1);
if(!x1764.valid){
continue;
}
IkReal x1760=x1764.value;
IkReal x1761=((20.0)*pz);
IkReal x1762=((8.0)*r22);
IkReal x1763=((25.0)*pp*x1760);
j6eval[0]=((IKabs((((r20*x1763))+(((-1.0)*r20*x1761))+(((-1.0)*r20*x1762)))))+(IKabs((((r21*x1763))+(((-1.0)*r21*x1762))+(((-1.0)*r21*x1761))))));
j6eval[1]=r22;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=1.0;
j5=0;
CheckValue<IkReal> x1769=IKPowWithIntegerCheck(r22,-1);
if(!x1769.valid){
continue;
}
IkReal x1765=x1769.value;
IkReal x1766=((20.0)*pz);
IkReal x1767=((8.0)*r22);
IkReal x1768=((25.0)*pp*x1765);
j6eval[0]=((IKabs((((r20*x1768))+(((-1.0)*r20*x1767))+(((-1.0)*r20*x1766)))))+(IKabs((((r21*x1766))+((r21*x1767))+(((-1.0)*r21*x1768))))));
j6eval[1]=r22;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x1774=IKPowWithIntegerCheck(r22,-1);
if(!x1774.valid){
continue;
}
IkReal x1770=x1774.value;
IkReal x1771=((0.4)*r22);
IkReal x1772=((1.25)*pp*x1770);
CheckValue<IkReal> x1775 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*r20*x1771))+(((-1.0)*npx))+((r20*x1772))+((py*r10)))),IkReal(((((-1.0)*px*r01))+(((-1.0)*r21*x1772))+npy+(((-1.0)*py*r11))+((r21*x1771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1775.valid){
continue;
}
IkReal x1773=x1775.value;
j6array[0]=((-1.0)*x1773);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1773)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1776=IKsin(j6);
IkReal x1777=IKcos(j6);
CheckValue<IkReal> x1783=IKPowWithIntegerCheck(r22,-1);
if(!x1783.valid){
continue;
}
IkReal x1778=x1783.value;
IkReal x1779=((0.4)*r22);
IkReal x1780=(r20*x1776);
IkReal x1781=(r21*x1777);
IkReal x1782=((1.25)*pp*x1778);
evalcond[0]=(((px*r00*x1776))+((py*r11*x1777))+((py*r10*x1776))+(((-1.0)*npx*x1776))+(((-1.0)*npy*x1777))+(((-1.0)*x1779*x1780))+(((-1.0)*x1779*x1781))+((x1780*x1782))+((x1781*x1782))+((px*r01*x1777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(r22,-1);
if(!x1788.valid){
continue;
}
IkReal x1784=x1788.value;
IkReal x1785=((0.4)*r22);
IkReal x1786=((1.25)*pp*x1784);
CheckValue<IkReal> x1789 = IKatan2WithCheck(IkReal((((r21*x1786))+((px*r01))+(((-1.0)*npy))+((py*r11))+(((-1.0)*r21*x1785)))),IkReal((((r20*x1786))+((px*r00))+(((-1.0)*npx))+(((-1.0)*r20*x1785))+((py*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1789.valid){
continue;
}
IkReal x1787=x1789.value;
j6array[0]=((-1.0)*x1787);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1787)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1790=IKcos(j6);
IkReal x1791=IKsin(j6);
CheckValue<IkReal> x1798=IKPowWithIntegerCheck(r22,-1);
if(!x1798.valid){
continue;
}
IkReal x1792=x1798.value;
IkReal x1793=((0.4)*r22);
IkReal x1794=(r21*x1791);
IkReal x1795=((1.25)*pp*x1792);
IkReal x1796=(r20*x1790);
IkReal x1797=((1.0)*x1791);
evalcond[0]=(((x1793*x1794))+(((-1.0)*x1793*x1796))+((px*r00*x1790))+(((-1.0)*py*r11*x1797))+((npy*x1791))+((x1795*x1796))+(((-1.0)*px*r01*x1797))+((py*r10*x1790))+(((-1.0)*npx*x1790))+(((-1.0)*x1794*x1795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[2];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(r22,-1);
if(!x1803.valid){
continue;
}
IkReal x1799=x1803.value;
IkReal x1800=((20.0)*pz);
IkReal x1801=((8.0)*r22);
IkReal x1802=((25.0)*pp*x1799);
j6eval[0]=((IKabs(((((-1.0)*r21*x1802))+(((-1.0)*r21*x1800))+((r21*x1801)))))+(IKabs(((((-1.0)*r20*x1800))+(((-1.0)*r20*x1802))+((r20*x1801))))));
j6eval[1]=r22;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
CheckValue<IkReal> x1808=IKPowWithIntegerCheck(r22,-1);
if(!x1808.valid){
continue;
}
IkReal x1804=x1808.value;
IkReal x1805=((20.0)*pz);
IkReal x1806=((8.0)*r22);
IkReal x1807=((25.0)*pp*x1804);
j6eval[0]=((IKabs(((((-1.0)*r21*x1806))+((r21*x1807))+((r21*x1805)))))+(IKabs(((((-1.0)*r20*x1805))+(((-1.0)*r20*x1807))+((r20*x1806))))));
j6eval[1]=r22;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x1813=IKPowWithIntegerCheck(r22,-1);
if(!x1813.valid){
continue;
}
IkReal x1809=x1813.value;
IkReal x1810=((0.4)*r22);
IkReal x1811=((1.25)*pp*x1809);
CheckValue<IkReal> x1814 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+((r20*x1810))+((py*r10))+(((-1.0)*r20*x1811)))),IkReal(((((-1.0)*px*r01))+npy+(((-1.0)*py*r11))+((r21*x1811))+(((-1.0)*r21*x1810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1814.valid){
continue;
}
IkReal x1812=x1814.value;
j6array[0]=((-1.0)*x1812);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1812)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1815=IKsin(j6);
IkReal x1816=IKcos(j6);
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(r22,-1);
if(!x1822.valid){
continue;
}
IkReal x1817=x1822.value;
IkReal x1818=((0.4)*r22);
IkReal x1819=(r20*x1815);
IkReal x1820=(r21*x1816);
IkReal x1821=((1.25)*pp*x1817);
evalcond[0]=(((x1818*x1819))+((py*r10*x1815))+(((-1.0)*npx*x1815))+((x1818*x1820))+(((-1.0)*x1819*x1821))+((px*r00*x1815))+((py*r11*x1816))+(((-1.0)*npy*x1816))+(((-1.0)*x1820*x1821))+((px*r01*x1816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x1827=IKPowWithIntegerCheck(r22,-1);
if(!x1827.valid){
continue;
}
IkReal x1823=x1827.value;
IkReal x1824=((0.4)*r22);
IkReal x1825=((1.25)*pp*x1823);
CheckValue<IkReal> x1828 = IKatan2WithCheck(IkReal((((px*r01))+(((-1.0)*npy))+((py*r11))+((r21*x1824))+(((-1.0)*r21*x1825)))),IkReal((((px*r00))+(((-1.0)*npx))+((py*r10))+(((-1.0)*r20*x1825))+((r20*x1824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1828.valid){
continue;
}
IkReal x1826=x1828.value;
j6array[0]=((-1.0)*x1826);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1826)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1829=IKcos(j6);
IkReal x1830=IKsin(j6);
CheckValue<IkReal> x1837=IKPowWithIntegerCheck(r22,-1);
if(!x1837.valid){
continue;
}
IkReal x1831=x1837.value;
IkReal x1832=((0.4)*r22);
IkReal x1833=(r21*x1830);
IkReal x1834=((1.25)*pp*x1831);
IkReal x1835=(r20*x1829);
IkReal x1836=((1.0)*x1830);
evalcond[0]=((((-1.0)*x1834*x1835))+(((-1.0)*x1832*x1833))+(((-1.0)*px*r01*x1836))+((npy*x1830))+((px*r00*x1829))+((py*r10*x1829))+(((-1.0)*npx*x1829))+((x1832*x1835))+(((-1.0)*py*r11*x1836))+((x1833*x1834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1838=((10.0)*py);
IkReal x1839=((4.0)*sj5);
IkReal x1840=((5.0)*pp);
IkReal x1841=((4.0)*sj0*sj1);
IkReal x1842=((4.0)*cj5*pz*r22);
CheckValue<IkReal> x1843=IKPowWithIntegerCheck(IKsign(((((-1.0)*npx*r11*x1839))+((npy*r10*x1839)))),-1);
if(!x1843.valid){
continue;
}
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(((((-1.0)*npx*x1841))+((npx*x1838))+(((-1.0)*r10*x1840))+((r10*x1842)))),IkReal((((npy*x1838))+(((-1.0)*npy*x1841))+(((-1.0)*r11*x1840))+((r11*x1842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1843.value)))+(x1844.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1845=IKcos(j6);
IkReal x1846=IKsin(j6);
IkReal x1847=(r11*sj0);
IkReal x1848=(cj1*r20);
IkReal x1849=(cj0*r00);
IkReal x1850=(r10*sj0);
IkReal x1851=(cj0*r01);
IkReal x1852=((0.8)*sj5);
IkReal x1853=((1.0)*npx);
IkReal x1854=((0.4)*cj1);
IkReal x1855=(cj5*r22);
IkReal x1856=((0.4)*sj1);
IkReal x1857=((0.4)*sj5);
IkReal x1858=(npy*x1846);
IkReal x1859=((0.4)*x1845);
IkReal x1860=(r21*x1846);
IkReal x1861=((0.4)*x1846);
IkReal x1862=(x1846*x1856);
evalcond[0]=((((-1.0)*px))+((r00*x1845*x1857))+((cj0*x1856))+(((-1.0)*r01*x1846*x1857)));
evalcond[1]=((((-1.0)*py))+((sj0*x1856))+((r10*x1845*x1857))+(((-1.0)*r11*x1846*x1857)));
evalcond[2]=((((0.8)*pz*x1855))+(((-1.0)*x1852*x1858))+((npx*x1845*x1852))+(((-1.0)*pp)));
evalcond[3]=((((0.4)*x1855))+(((-1.0)*pz))+((r20*x1845*x1857))+x1854+(((-1.0)*x1857*x1860)));
evalcond[4]=(((x1848*x1861))+((x1850*x1862))+((r21*x1845*x1854))+((x1845*x1847*x1856))+((x1845*x1851*x1856))+(((-1.0)*npy*x1845))+(((-1.0)*x1846*x1853))+((x1849*x1862)));
evalcond[5]=((((-1.0)*x1845*x1853))+((x1848*x1859))+(((-1.0)*x1854*x1860))+(((-1.0)*x1851*x1862))+(((-1.0)*x1847*x1862))+((x1845*x1849*x1856))+((x1845*x1850*x1856))+x1858+x1857);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1863=((4.0)*npx);
IkReal x1864=(cj0*sj1);
IkReal x1865=((4.0)*npy);
IkReal x1866=((5.0)*pp);
IkReal x1867=((10.0)*px);
IkReal x1868=((4.0)*cj5*pz*r22);
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal(((((-1.0)*x1863*x1864))+((npx*x1867))+(((-1.0)*r00*x1866))+((r00*x1868)))),IkReal(((((-1.0)*x1864*x1865))+(((-1.0)*r01*x1866))+((npy*x1867))+((r01*x1868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
CheckValue<IkReal> x1870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x1863))+((r00*sj5*x1865)))),-1);
if(!x1870.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1869.value)+(((1.5707963267949)*(x1870.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1871=IKcos(j6);
IkReal x1872=IKsin(j6);
IkReal x1873=(r11*sj0);
IkReal x1874=(cj1*r20);
IkReal x1875=(cj0*r00);
IkReal x1876=(r10*sj0);
IkReal x1877=(cj0*r01);
IkReal x1878=((0.8)*sj5);
IkReal x1879=((1.0)*npx);
IkReal x1880=((0.4)*cj1);
IkReal x1881=(cj5*r22);
IkReal x1882=((0.4)*sj1);
IkReal x1883=((0.4)*sj5);
IkReal x1884=(npy*x1872);
IkReal x1885=((0.4)*x1871);
IkReal x1886=(r21*x1872);
IkReal x1887=((0.4)*x1872);
IkReal x1888=(x1872*x1882);
evalcond[0]=(((r00*x1871*x1883))+(((-1.0)*px))+(((-1.0)*r01*x1872*x1883))+((cj0*x1882)));
evalcond[1]=(((r10*x1871*x1883))+(((-1.0)*py))+(((-1.0)*r11*x1872*x1883))+((sj0*x1882)));
evalcond[2]=((((-1.0)*x1878*x1884))+(((-1.0)*pp))+(((0.8)*pz*x1881))+((npx*x1871*x1878)));
evalcond[3]=(((r20*x1871*x1883))+(((-1.0)*x1883*x1886))+(((-1.0)*pz))+x1880+(((0.4)*x1881)));
evalcond[4]=(((x1874*x1887))+(((-1.0)*x1872*x1879))+((x1876*x1888))+((x1875*x1888))+((x1871*x1877*x1882))+((r21*x1871*x1880))+(((-1.0)*npy*x1871))+((x1871*x1873*x1882)));
evalcond[5]=((((-1.0)*x1873*x1888))+((x1874*x1885))+(((-1.0)*x1880*x1886))+((x1871*x1876*x1882))+x1884+x1883+(((-1.0)*x1871*x1879))+((x1871*x1875*x1882))+(((-1.0)*x1877*x1888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1889=((2.0)*sj1);
CheckValue<IkReal> x1890=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1890.valid){
continue;
}
CheckValue<IkReal> x1891 = IKatan2WithCheck(IkReal((((r00*sj0*x1889))+(((-1.0)*cj0*r10*x1889))+(((-5.0)*rxp0_2)))),IkReal(((((-5.0)*rxp1_2))+(((-1.0)*cj0*r11*x1889))+((r01*sj0*x1889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1891.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1890.value)))+(x1891.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1892=IKcos(j6);
IkReal x1893=IKsin(j6);
IkReal x1894=(r11*sj0);
IkReal x1895=(cj1*r20);
IkReal x1896=(cj0*r00);
IkReal x1897=(r10*sj0);
IkReal x1898=(cj0*r01);
IkReal x1899=((0.8)*sj5);
IkReal x1900=((1.0)*npx);
IkReal x1901=((0.4)*cj1);
IkReal x1902=(cj5*r22);
IkReal x1903=((0.4)*sj1);
IkReal x1904=((0.4)*sj5);
IkReal x1905=(npy*x1893);
IkReal x1906=((0.4)*x1892);
IkReal x1907=(r21*x1893);
IkReal x1908=((0.4)*x1893);
IkReal x1909=(x1893*x1903);
evalcond[0]=((((-1.0)*r01*x1893*x1904))+(((-1.0)*px))+((cj0*x1903))+((r00*x1892*x1904)));
evalcond[1]=(((r10*x1892*x1904))+(((-1.0)*py))+((sj0*x1903))+(((-1.0)*r11*x1893*x1904)));
evalcond[2]=((((-1.0)*x1899*x1905))+((npx*x1892*x1899))+(((-1.0)*pp))+(((0.8)*pz*x1902)));
evalcond[3]=((((0.4)*x1902))+(((-1.0)*x1904*x1907))+(((-1.0)*pz))+x1901+((r20*x1892*x1904)));
evalcond[4]=(((r21*x1892*x1901))+(((-1.0)*x1893*x1900))+((x1892*x1898*x1903))+((x1895*x1908))+((x1892*x1894*x1903))+(((-1.0)*npy*x1892))+((x1897*x1909))+((x1896*x1909)));
evalcond[5]=((((-1.0)*x1901*x1907))+(((-1.0)*x1898*x1909))+(((-1.0)*x1892*x1900))+(((-1.0)*x1894*x1909))+((x1892*x1897*x1903))+x1904+x1905+((x1895*x1906))+((x1892*x1896*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1910=((10.0)*py);
IkReal x1911=((5.0)*pp);
IkReal x1912=((4.0)*r10);
IkReal x1913=((4.0)*r11);
IkReal x1914=((4.0)*sj0*sj1);
IkReal x1915=(cj5*px*r02);
IkReal x1916=((4.0)*cj5*pz*r22);
CheckValue<IkReal> x1917=IKPowWithIntegerCheck(IKsign(((((-1.0)*npx*sj5*x1913))+((npy*sj5*x1912)))),-1);
if(!x1917.valid){
continue;
}
CheckValue<IkReal> x1918 = IKatan2WithCheck(IkReal((((x1912*x1915))+((npx*x1910))+((cj5*pz*r22*x1912))+(((-1.0)*r10*x1911))+(((-1.0)*npx*x1914)))),IkReal((((npy*x1910))+((x1913*x1915))+((cj5*pz*r22*x1913))+(((-1.0)*r11*x1911))+(((-1.0)*npy*x1914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1918.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1917.value)))+(x1918.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1919=IKcos(j6);
IkReal x1920=IKsin(j6);
IkReal x1921=(cj1*r20);
IkReal x1922=(cj0*sj1);
IkReal x1923=((0.8)*sj5);
IkReal x1924=((1.0)*npx);
IkReal x1925=((0.4)*cj1);
IkReal x1926=(cj5*r22);
IkReal x1927=(sj0*sj1);
IkReal x1928=(cj5*r02);
IkReal x1929=((0.4)*sj5);
IkReal x1930=(npy*x1920);
IkReal x1931=((0.4)*x1919);
IkReal x1932=(r21*x1920);
IkReal x1933=((0.4)*x1920);
IkReal x1934=(x1927*x1933);
evalcond[0]=((((-1.0)*r11*x1920*x1929))+(((0.4)*x1927))+(((-1.0)*py))+((r10*x1919*x1929)));
evalcond[1]=(((r20*x1919*x1929))+(((0.4)*x1926))+(((-1.0)*pz))+x1925+(((-1.0)*x1929*x1932)));
evalcond[2]=(((r00*x1919*x1929))+(((0.4)*x1928))+(((0.4)*x1922))+(((-1.0)*px))+(((-1.0)*r01*x1920*x1929)));
evalcond[3]=((((0.8)*px*x1928))+(((0.8)*pz*x1926))+(((-1.0)*x1923*x1930))+(((-1.0)*pp))+((npx*x1919*x1923)));
evalcond[4]=(((r11*x1927*x1931))+((x1921*x1933))+(((-1.0)*npy*x1919))+((r00*x1922*x1933))+((r21*x1919*x1925))+((r10*x1934))+((r01*x1922*x1931))+(((-1.0)*x1920*x1924)));
evalcond[5]=(((x1921*x1931))+((r10*x1927*x1931))+(((-1.0)*x1925*x1932))+x1929+x1930+(((-1.0)*r11*x1934))+((r00*x1922*x1931))+(((-1.0)*x1919*x1924))+(((-1.0)*r01*x1922*x1933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1935=((2.0)*r10);
IkReal x1936=(cj5*r02);
IkReal x1937=(cj0*sj1);
IkReal x1938=((2.0)*r11);
IkReal x1939=((2.0)*sj0*sj1);
CheckValue<IkReal> x1940=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1940.valid){
continue;
}
CheckValue<IkReal> x1941 = IKatan2WithCheck(IkReal((((r00*x1939))+(((-5.0)*rxp0_2))+(((-1.0)*x1935*x1936))+(((-1.0)*x1935*x1937)))),IkReal(((((-5.0)*rxp1_2))+(((-1.0)*x1937*x1938))+((r01*x1939))+(((-1.0)*x1936*x1938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1941.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1940.value)))+(x1941.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1942=IKcos(j6);
IkReal x1943=IKsin(j6);
IkReal x1944=(cj1*r20);
IkReal x1945=(cj0*sj1);
IkReal x1946=((0.8)*sj5);
IkReal x1947=((1.0)*npx);
IkReal x1948=((0.4)*cj1);
IkReal x1949=(cj5*r22);
IkReal x1950=(sj0*sj1);
IkReal x1951=(cj5*r02);
IkReal x1952=((0.4)*sj5);
IkReal x1953=(npy*x1943);
IkReal x1954=((0.4)*x1942);
IkReal x1955=(r21*x1943);
IkReal x1956=((0.4)*x1943);
IkReal x1957=(x1950*x1956);
evalcond[0]=(((r10*x1942*x1952))+(((-1.0)*py))+(((0.4)*x1950))+(((-1.0)*r11*x1943*x1952)));
evalcond[1]=((((-1.0)*x1952*x1955))+((r20*x1942*x1952))+(((-1.0)*pz))+x1948+(((0.4)*x1949)));
evalcond[2]=((((-1.0)*r01*x1943*x1952))+(((-1.0)*px))+(((0.4)*x1951))+(((0.4)*x1945))+((r00*x1942*x1952)));
evalcond[3]=((((0.8)*px*x1951))+(((0.8)*pz*x1949))+(((-1.0)*pp))+((npx*x1942*x1946))+(((-1.0)*x1946*x1953)));
evalcond[4]=(((r11*x1950*x1954))+((x1944*x1956))+(((-1.0)*x1943*x1947))+(((-1.0)*npy*x1942))+((r21*x1942*x1948))+((r10*x1957))+((r00*x1945*x1956))+((r01*x1945*x1954)));
evalcond[5]=((((-1.0)*x1948*x1955))+((x1944*x1954))+(((-1.0)*x1942*x1947))+x1953+x1952+((r00*x1945*x1954))+((r10*x1950*x1954))+(((-1.0)*r11*x1957))+(((-1.0)*r01*x1945*x1956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1958=((2.0)*cj1);
IkReal x1959=((2.0)*sj0*sj1);
IkReal x1960=((2.0)*cj5*r22);
CheckValue<IkReal> x1961=IKPowWithIntegerCheck(IKsign((r02*sj5)),-1);
if(!x1961.valid){
continue;
}
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal((((r10*x1960))+((r10*x1958))+(((-5.0)*rxp0_0))+(((-1.0)*r20*x1959)))),IkReal(((((-5.0)*rxp1_0))+((r11*x1958))+((r11*x1960))+(((-1.0)*r21*x1959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1961.value)))+(x1962.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1963=IKcos(j6);
IkReal x1964=IKsin(j6);
IkReal x1965=(cj1*r20);
IkReal x1966=(cj0*sj1);
IkReal x1967=((0.8)*sj5);
IkReal x1968=((1.0)*npx);
IkReal x1969=((0.4)*cj1);
IkReal x1970=(cj5*r22);
IkReal x1971=(sj0*sj1);
IkReal x1972=(cj5*r02);
IkReal x1973=((0.4)*sj5);
IkReal x1974=(npy*x1964);
IkReal x1975=((0.4)*x1963);
IkReal x1976=(r21*x1964);
IkReal x1977=((0.4)*x1964);
IkReal x1978=(x1971*x1977);
evalcond[0]=((((-1.0)*r11*x1964*x1973))+(((-1.0)*py))+((r10*x1963*x1973))+(((0.4)*x1971)));
evalcond[1]=(((r20*x1963*x1973))+(((-1.0)*x1973*x1976))+(((-1.0)*pz))+x1969+(((0.4)*x1970)));
evalcond[2]=((((-1.0)*px))+((r00*x1963*x1973))+(((-1.0)*r01*x1964*x1973))+(((0.4)*x1966))+(((0.4)*x1972)));
evalcond[3]=((((0.8)*px*x1972))+(((0.8)*pz*x1970))+(((-1.0)*pp))+(((-1.0)*x1967*x1974))+((npx*x1963*x1967)));
evalcond[4]=(((r00*x1966*x1977))+(((-1.0)*npy*x1963))+(((-1.0)*x1964*x1968))+((r01*x1966*x1975))+((r10*x1978))+((r21*x1963*x1969))+((x1965*x1977))+((r11*x1971*x1975)));
evalcond[5]=(((r00*x1966*x1975))+(((-1.0)*r01*x1966*x1977))+x1974+x1973+((x1965*x1975))+(((-1.0)*x1963*x1968))+((r10*x1971*x1975))+(((-1.0)*x1969*x1976))+(((-1.0)*r11*x1978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1979=((4.0)*npx);
IkReal x1980=(cj0*sj1);
IkReal x1981=(cj5*r02);
IkReal x1982=((4.0)*npy);
IkReal x1983=((5.0)*pp);
IkReal x1984=((10.0)*px);
IkReal x1985=((4.0)*cj5*npz);
CheckValue<IkReal> x1986 = IKatan2WithCheck(IkReal((((npx*x1984))+(((-1.0)*x1979*x1981))+(((-1.0)*x1979*x1980))+((r00*x1985))+(((-1.0)*r00*x1983)))),IkReal(((((-1.0)*x1981*x1982))+(((-1.0)*x1980*x1982))+((r01*x1985))+((npy*x1984))+(((-1.0)*r01*x1983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1986.valid){
continue;
}
CheckValue<IkReal> x1987=IKPowWithIntegerCheck(IKsign((((r00*sj5*x1982))+(((-1.0)*r01*sj5*x1979)))),-1);
if(!x1987.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1986.value)+(((1.5707963267949)*(x1987.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1988=IKcos(j6);
IkReal x1989=IKsin(j6);
IkReal x1990=(sj0*sj1);
IkReal x1991=(cj1*r20);
IkReal x1992=(cj0*sj1);
IkReal x1993=((0.8)*sj5);
IkReal x1994=((1.0)*npx);
IkReal x1995=(cj1*r21);
IkReal x1996=((0.4)*cj5);
IkReal x1997=(npy*x1989);
IkReal x1998=((0.4)*x1989);
IkReal x1999=((0.4)*x1988);
evalcond[0]=((((-1.0)*x1993*x1997))+((npx*x1988*x1993))+(((-1.0)*pp))+(((0.8)*cj5*npz)));
evalcond[1]=((((-1.0)*r21*sj5*x1998))+((r20*sj5*x1999))+(((0.4)*cj1))+(((-1.0)*pz))+((r22*x1996)));
evalcond[2]=(((r00*sj5*x1999))+(((-1.0)*r01*sj5*x1998))+((r02*x1996))+(((-1.0)*px))+(((0.4)*x1992)));
evalcond[3]=(((r12*x1996))+((r10*sj5*x1999))+(((-1.0)*py))+(((0.4)*x1990))+(((-1.0)*r11*sj5*x1998)));
evalcond[4]=(((r10*x1990*x1998))+(((-1.0)*npy*x1988))+((x1991*x1998))+((r11*x1990*x1999))+((x1995*x1999))+(((-1.0)*x1989*x1994))+((r00*x1992*x1998))+((r01*x1992*x1999)));
evalcond[5]=((((-1.0)*r01*x1992*x1998))+((r10*x1990*x1999))+((x1991*x1999))+((r00*x1992*x1999))+x1997+(((0.4)*sj5))+(((-1.0)*x1995*x1998))+(((-1.0)*r11*x1990*x1998))+(((-1.0)*x1988*x1994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2000=((5.0)*pp);
IkReal x2001=((4.0)*npy);
IkReal x2002=(cj5*r22);
IkReal x2003=((4.0)*npx);
IkReal x2004=((10.0)*pz);
IkReal x2005=((4.0)*cj5*npz);
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal(((((-1.0)*x2002*x2003))+(((-1.0)*cj1*x2003))+((r20*x2005))+((npx*x2004))+(((-1.0)*r20*x2000)))),IkReal((((r21*x2005))+((npy*x2004))+(((-1.0)*x2001*x2002))+(((-1.0)*cj1*x2001))+(((-1.0)*r21*x2000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
CheckValue<IkReal> x2007=IKPowWithIntegerCheck(IKsign((((r20*sj5*x2001))+(((-1.0)*r21*sj5*x2003)))),-1);
if(!x2007.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2006.value)+(((1.5707963267949)*(x2007.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2008=IKcos(j6);
IkReal x2009=IKsin(j6);
IkReal x2010=(sj0*sj1);
IkReal x2011=(cj1*r20);
IkReal x2012=(cj0*sj1);
IkReal x2013=((0.8)*sj5);
IkReal x2014=((1.0)*npx);
IkReal x2015=(cj1*r21);
IkReal x2016=((0.4)*cj5);
IkReal x2017=(npy*x2009);
IkReal x2018=((0.4)*x2009);
IkReal x2019=((0.4)*x2008);
evalcond[0]=((((-1.0)*x2013*x2017))+(((-1.0)*pp))+((npx*x2008*x2013))+(((0.8)*cj5*npz)));
evalcond[1]=(((r20*sj5*x2019))+(((0.4)*cj1))+((r22*x2016))+(((-1.0)*r21*sj5*x2018))+(((-1.0)*pz)));
evalcond[2]=(((r00*sj5*x2019))+(((0.4)*x2012))+(((-1.0)*px))+(((-1.0)*r01*sj5*x2018))+((r02*x2016)));
evalcond[3]=(((r10*sj5*x2019))+(((-1.0)*r11*sj5*x2018))+(((0.4)*x2010))+(((-1.0)*py))+((r12*x2016)));
evalcond[4]=(((r11*x2010*x2019))+(((-1.0)*x2009*x2014))+((x2015*x2019))+(((-1.0)*npy*x2008))+((x2011*x2018))+((r01*x2012*x2019))+((r10*x2010*x2018))+((r00*x2012*x2018)));
evalcond[5]=((((-1.0)*x2008*x2014))+x2017+(((-1.0)*x2015*x2018))+((x2011*x2019))+(((-1.0)*r01*x2012*x2018))+(((0.4)*sj5))+((r10*x2010*x2019))+(((-1.0)*r11*x2010*x2018))+((r00*x2012*x2019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2020=((2.0)*cj5);
IkReal x2021=((2.0)*cj1);
IkReal x2022=((2.0)*cj0*sj1);
CheckValue<IkReal> x2023=IKPowWithIntegerCheck(IKsign((r12*sj5)),-1);
if(!x2023.valid){
continue;
}
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal((((r00*x2021))+((r11*x2020))+(((5.0)*rxp0_1))+(((-1.0)*r20*x2022)))),IkReal((((r01*x2021))+(((-1.0)*r10*x2020))+(((5.0)*rxp1_1))+(((-1.0)*r21*x2022)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x2023.value)))+(x2024.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2025=IKcos(j6);
IkReal x2026=IKsin(j6);
IkReal x2027=(sj0*sj1);
IkReal x2028=(cj1*r20);
IkReal x2029=(cj0*sj1);
IkReal x2030=((0.8)*sj5);
IkReal x2031=((1.0)*npx);
IkReal x2032=(cj1*r21);
IkReal x2033=((0.4)*cj5);
IkReal x2034=(npy*x2026);
IkReal x2035=((0.4)*x2026);
IkReal x2036=((0.4)*x2025);
evalcond[0]=(((npx*x2025*x2030))+(((-1.0)*pp))+(((-1.0)*x2030*x2034))+(((0.8)*cj5*npz)));
evalcond[1]=(((r22*x2033))+(((0.4)*cj1))+((r20*sj5*x2036))+(((-1.0)*pz))+(((-1.0)*r21*sj5*x2035)));
evalcond[2]=(((r02*x2033))+(((-1.0)*px))+((r00*sj5*x2036))+(((0.4)*x2029))+(((-1.0)*r01*sj5*x2035)));
evalcond[3]=(((r12*x2033))+((r10*sj5*x2036))+(((-1.0)*r11*sj5*x2035))+(((-1.0)*py))+(((0.4)*x2027)));
evalcond[4]=(((r11*x2027*x2036))+((r10*x2027*x2035))+(((-1.0)*npy*x2025))+((x2032*x2036))+((r01*x2029*x2036))+((x2028*x2035))+(((-1.0)*x2026*x2031))+((r00*x2029*x2035)));
evalcond[5]=(((r10*x2027*x2036))+x2034+(((-1.0)*r01*x2029*x2035))+((x2028*x2036))+(((-1.0)*r11*x2027*x2035))+(((0.4)*sj5))+(((-1.0)*x2025*x2031))+(((-1.0)*x2032*x2035))+((r00*x2029*x2036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x243=((1.0)*cj0);
IkReal x244=((1.0)*sj6);
IkReal x245=((1.0)*cj5);
IkReal x246=(cj0*sj1);
IkReal x247=((1.0)*cj6);
IkReal x248=(r10*sj0);
IkReal x249=((1.0)*cj1);
IkReal x250=(r12*sj0);
IkReal x251=(r11*sj0);
IkReal x252=(((r00*sj0))+(((-1.0)*r10*x243)));
IkReal x253=(((r01*sj0))+(((-1.0)*r11*x243)));
IkReal x254=((((-1.0)*r12*x243))+((r02*sj0)));
IkReal x255=((1.0)*x253);
IkReal x256=(((sj1*x251))+((cj1*r21))+((r01*x246)));
IkReal x257=(((cj1*r20))+((r00*x246))+((sj1*x248)));
IkReal x258=(((r02*x246))+((sj1*x250))+((cj1*r22)));
IkReal x259=(((r21*sj1))+(((-1.0)*cj1*r01*x243))+(((-1.0)*x249*x251)));
IkReal x260=((((-1.0)*x248*x249))+((r20*sj1))+(((-1.0)*cj1*r00*x243)));
IkReal x261=(((r22*sj1))+(((-1.0)*x249*x250))+(((-1.0)*cj1*r02*x243)));
IkReal x262=(((cj6*x252))+(((-1.0)*x244*x253)));
IkReal x263=(((cj6*x257))+(((-1.0)*x244*x256)));
IkReal x264=((((-1.0)*x244*x259))+((cj6*x260)));
new_r00=(((sj5*x261))+(((-1.0)*x245*x264)));
new_r01=((((-1.0)*x247*x259))+(((-1.0)*x244*x260)));
new_r02=(((cj5*x261))+((sj5*x264)));
new_r10=(((sj5*x254))+(((-1.0)*x245*x262)));
new_r11=((((-1.0)*x244*x252))+(((-1.0)*x247*x253)));
new_r12=(((sj5*x262))+((cj5*x254)));
new_r20=(((sj5*x258))+(((-1.0)*x245*x263)));
new_r21=((((-1.0)*x244*x257))+(((-1.0)*x247*x256)));
new_r22=(((sj5*x263))+((cj5*x258)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=new_r22;
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j2eval[3];
j2eval[0]=sj3;
j2eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
j4eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=new_r12;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j4mul = 1;
j4=0;
j2mul=-1.0;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].fmul = j2mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(1);
vfree[0] = 4;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j4mul = 1;
j4=0;
j2mul=1.0;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2=IKatan2(new_r10, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].fmul = j2mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(1);
vfree[0] = 4;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x265=new_r22*new_r22;
IkReal x266=((16.0)*new_r10);
IkReal x267=((16.0)*new_r01);
IkReal x268=((16.0)*new_r22);
IkReal x269=((8.0)*new_r11);
IkReal x270=((8.0)*new_r00);
IkReal x271=(x265*x266);
IkReal x272=(x265*x267);
j2eval[0]=((IKabs((((new_r22*x269))+(((-1.0)*x270)))))+(IKabs(((((-1.0)*new_r22*x270))+((x265*x269)))))+(IKabs((x267+(((-1.0)*x272)))))+(IKabs((x271+(((-1.0)*x266)))))+(IKabs((x272+(((-1.0)*x267)))))+(IKabs((x266+(((-1.0)*x271)))))+(IKabs(((((32.0)*new_r11))+(((-1.0)*new_r00*x268))+(((-16.0)*new_r11*x265)))))+(IKabs(((((-32.0)*new_r00*x265))+(((16.0)*new_r00))+((new_r11*x268))))));
if( IKabs(j2eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j2, j4]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j2evalpoly[1];
IkReal x273=new_r22*new_r22;
IkReal x274=((16.0)*new_r10);
IkReal x275=(new_r11*new_r22);
IkReal x276=(x273*x274);
IkReal x277=((((8.0)*x275))+(((-8.0)*new_r00)));
op[0]=x277;
op[1]=(x274+(((-1.0)*x276)));
op[2]=((((-32.0)*new_r00*x273))+(((16.0)*new_r00))+(((16.0)*x275)));
op[3]=(x276+(((-1.0)*x274)));
op[4]=x277;
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

IkReal x278=((16.0)*new_r01);
IkReal x279=new_r22*new_r22;
IkReal x280=(new_r00*new_r22);
IkReal x281=((8.0)*x280);
IkReal x282=(new_r11*x279);
IkReal x283=(x278*x279);
IkReal x284=((8.0)*x282);
j2evalpoly[0]=((((htj2*htj2)*(((((32.0)*new_r11))+(((-16.0)*x282))+(((-16.0)*x280))))))+(((htj2*htj2*htj2)*((x283+(((-1.0)*x278))))))+x284+((htj2*((x278+(((-1.0)*x283))))))+(((-1.0)*x281))+(((htj2*htj2*htj2*htj2)*((x284+(((-1.0)*x281)))))));
if( IKabs(j2evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j4eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x285=cj2*cj2;
IkReal x286=new_r22*new_r22;
IkReal x287=(new_r22*sj2);
IkReal x288=((1.0)*new_r10);
IkReal x289=((((-1.0)*x285*x286))+x286+x285);
j4eval[0]=x289;
j4eval[1]=((IKabs(((((-1.0)*x287*x288))+(((-1.0)*cj2*new_r11)))))+(IKabs(((((-1.0)*cj2*x288))+((new_r11*x287))))));
j4eval[2]=IKsign(x289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=new_r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, new_r01);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x290=IKsin(j4);
IkReal x291=IKcos(j4);
evalcond[0]=x290;
evalcond[1]=((-1.0)*x291);
evalcond[2]=(x290+(((-1.0)*new_r00)));
evalcond[3]=(x291+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x292=IKsin(j4);
IkReal x293=IKcos(j4);
evalcond[0]=x292;
evalcond[1]=(x292+new_r00);
evalcond[2]=(x293+new_r01);
evalcond[3]=((-1.0)*x293);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x294=new_r22*new_r22;
CheckValue<IkReal> x295=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x294))),-1);
if(!x295.valid){
continue;
}
if((((-1.0)*x294*(x295.value))) < -0.00001)
continue;
IkReal gconst62=IKsqrt(((-1.0)*x294*(x295.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst62)))))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x296=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
sj2=IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))));
cj2=gconst62;
if( (gconst62) < -1-IKFAST_SINCOS_THRESH || (gconst62) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=IKacos(gconst62);
CheckValue<IkReal> x297=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x296))),-1);
if(!x297.valid){
continue;
}
if((((-1.0)*x296*(x297.value))) < -0.00001)
continue;
IkReal gconst62=IKsqrt(((-1.0)*x296*(x297.value)));
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x298=IKPowWithIntegerCheck(gconst62,-1);
if(!x298.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x298.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst62*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x298.value)))+IKsqr(((((-1.0)*gconst62*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10*(x298.value)), ((((-1.0)*gconst62*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62))))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x299=IKsin(j4);
IkReal x300=IKcos(j4);
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
IkReal x301=IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))));
IkReal x302=((1.0)*x301);
evalcond[0]=x299;
evalcond[1]=((-1.0)*x300);
evalcond[2]=(((gconst62*x299))+new_r10);
evalcond[3]=(((gconst62*x300))+new_r11);
evalcond[4]=((((-1.0)*x299*x302))+new_r00);
evalcond[5]=(new_r01+(((-1.0)*x300*x302)));
evalcond[6]=(((gconst62*new_r10))+x299+(((-1.0)*new_r00*x302)));
evalcond[7]=(((gconst62*new_r11))+x300+(((-1.0)*new_r01*x302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x303 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x303.valid){
continue;
}
CheckValue<IkReal> x304=IKPowWithIntegerCheck(IKsign(gconst62),-1);
if(!x304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x303.value)+(((1.5707963267949)*(x304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x305=IKsin(j4);
IkReal x306=IKcos(j4);
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
IkReal x307=IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))));
IkReal x308=((1.0)*x307);
evalcond[0]=x305;
evalcond[1]=((-1.0)*x306);
evalcond[2]=(((gconst62*x305))+new_r10);
evalcond[3]=(((gconst62*x306))+new_r11);
evalcond[4]=((((-1.0)*x305*x308))+new_r00);
evalcond[5]=((((-1.0)*x306*x308))+new_r01);
evalcond[6]=(((gconst62*new_r10))+x305+(((-1.0)*new_r00*x308)));
evalcond[7]=(((gconst62*new_r11))+x306+(((-1.0)*new_r01*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x309=new_r22*new_r22;
CheckValue<IkReal> x310=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x309))),-1);
if(!x310.valid){
continue;
}
if((((-1.0)*x309*(x310.value))) < -0.00001)
continue;
IkReal gconst62=IKsqrt(((-1.0)*x309*(x310.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst62)))))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x311=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
sj2=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))))));
cj2=gconst62;
if( (gconst62) < -1-IKFAST_SINCOS_THRESH || (gconst62) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((-1.0)*(IKacos(gconst62)));
CheckValue<IkReal> x312=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x311))),-1);
if(!x312.valid){
continue;
}
if((((-1.0)*x311*(x312.value))) < -0.00001)
continue;
IkReal gconst62=IKsqrt(((-1.0)*x311*(x312.value)));
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x313=IKPowWithIntegerCheck(gconst62,-1);
if(!x313.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x313.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst62*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x313.value)))+IKsqr(((((-1.0)*gconst62*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10*(x313.value)), ((((-1.0)*gconst62*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62))))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x314=IKsin(j4);
IkReal x315=IKcos(j4);
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
IkReal x316=IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))));
evalcond[0]=x314;
evalcond[1]=((-1.0)*x315);
evalcond[2]=(((gconst62*x314))+new_r10);
evalcond[3]=(((gconst62*x315))+new_r11);
evalcond[4]=(new_r00+((x314*x316)));
evalcond[5]=(((x315*x316))+new_r01);
evalcond[6]=(((gconst62*new_r10))+((new_r00*x316))+x314);
evalcond[7]=(((gconst62*new_r11))+((new_r01*x316))+x315);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x317 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x317.valid){
continue;
}
CheckValue<IkReal> x318=IKPowWithIntegerCheck(IKsign(gconst62),-1);
if(!x318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x317.value)+(((1.5707963267949)*(x318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x319=IKsin(j4);
IkReal x320=IKcos(j4);
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
IkReal x321=IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))));
evalcond[0]=x319;
evalcond[1]=((-1.0)*x320);
evalcond[2]=(((gconst62*x319))+new_r10);
evalcond[3]=(((gconst62*x320))+new_r11);
evalcond[4]=(new_r00+((x319*x321)));
evalcond[5]=(((x320*x321))+new_r01);
evalcond[6]=(((new_r00*x321))+((gconst62*new_r10))+x319);
evalcond[7]=(((new_r01*x321))+((gconst62*new_r11))+x320);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x322=new_r22*new_r22;
CheckValue<IkReal> x323=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x322))),-1);
if(!x323.valid){
continue;
}
if((((-1.0)*x322*(x323.value))) < -0.00001)
continue;
IkReal gconst63=((-1.0)*(IKsqrt(((-1.0)*x322*(x323.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst63)))))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x324=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
sj2=IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))));
cj2=gconst63;
if( (gconst63) < -1-IKFAST_SINCOS_THRESH || (gconst63) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=IKacos(gconst63);
CheckValue<IkReal> x325=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x324))),-1);
if(!x325.valid){
continue;
}
if((((-1.0)*x324*(x325.value))) < -0.00001)
continue;
IkReal gconst63=((-1.0)*(IKsqrt(((-1.0)*x324*(x325.value)))));
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x326=IKPowWithIntegerCheck(gconst63,-1);
if(!x326.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x326.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63))))))))+(((-1.0)*gconst63*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x326.value)))+IKsqr((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63))))))))+(((-1.0)*gconst63*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10*(x326.value)), (((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63))))))))+(((-1.0)*gconst63*new_r11))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x327=IKsin(j4);
IkReal x328=IKcos(j4);
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
IkReal x329=IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))));
IkReal x330=((1.0)*x329);
evalcond[0]=x327;
evalcond[1]=((-1.0)*x328);
evalcond[2]=(((gconst63*x327))+new_r10);
evalcond[3]=(((gconst63*x328))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*x327*x330)));
evalcond[5]=((((-1.0)*x328*x330))+new_r01);
evalcond[6]=(((gconst63*new_r10))+x327+(((-1.0)*new_r00*x330)));
evalcond[7]=(((gconst63*new_r11))+x328+(((-1.0)*new_r01*x330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x331=IKPowWithIntegerCheck(IKsign(gconst63),-1);
if(!x331.valid){
continue;
}
CheckValue<IkReal> x332 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x331.value)))+(x332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x333=IKsin(j4);
IkReal x334=IKcos(j4);
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
IkReal x335=IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))));
IkReal x336=((1.0)*x335);
evalcond[0]=x333;
evalcond[1]=((-1.0)*x334);
evalcond[2]=(((gconst63*x333))+new_r10);
evalcond[3]=(((gconst63*x334))+new_r11);
evalcond[4]=((((-1.0)*x333*x336))+new_r00);
evalcond[5]=(new_r01+(((-1.0)*x334*x336)));
evalcond[6]=(((gconst63*new_r10))+x333+(((-1.0)*new_r00*x336)));
evalcond[7]=(((gconst63*new_r11))+x334+(((-1.0)*new_r01*x336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x337=new_r22*new_r22;
CheckValue<IkReal> x338=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x337))),-1);
if(!x338.valid){
continue;
}
if((((-1.0)*x337*(x338.value))) < -0.00001)
continue;
IkReal gconst63=((-1.0)*(IKsqrt(((-1.0)*x337*(x338.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst63)))))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x339=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
sj2=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))))));
cj2=gconst63;
if( (gconst63) < -1-IKFAST_SINCOS_THRESH || (gconst63) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((-1.0)*(IKacos(gconst63)));
CheckValue<IkReal> x340=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x339))),-1);
if(!x340.valid){
continue;
}
if((((-1.0)*x339*(x340.value))) < -0.00001)
continue;
IkReal gconst63=((-1.0)*(IKsqrt(((-1.0)*x339*(x340.value)))));
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x341=IKPowWithIntegerCheck(gconst63,-1);
if(!x341.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x341.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst63*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x341.value)))+IKsqr(((((-1.0)*gconst63*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10*(x341.value)), ((((-1.0)*gconst63*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63))))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x342=IKsin(j4);
IkReal x343=IKcos(j4);
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
IkReal x344=IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))));
evalcond[0]=x342;
evalcond[1]=((-1.0)*x343);
evalcond[2]=(((gconst63*x342))+new_r10);
evalcond[3]=(((gconst63*x343))+new_r11);
evalcond[4]=(new_r00+((x342*x344)));
evalcond[5]=(new_r01+((x343*x344)));
evalcond[6]=(((new_r00*x344))+((gconst63*new_r10))+x342);
evalcond[7]=(((gconst63*new_r11))+((new_r01*x344))+x343);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x345=IKPowWithIntegerCheck(IKsign(gconst63),-1);
if(!x345.valid){
continue;
}
CheckValue<IkReal> x346 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x345.value)))+(x346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x347=IKsin(j4);
IkReal x348=IKcos(j4);
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
IkReal x349=IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))));
evalcond[0]=x347;
evalcond[1]=((-1.0)*x348);
evalcond[2]=(((gconst63*x347))+new_r10);
evalcond[3]=(((gconst63*x348))+new_r11);
evalcond[4]=(((x347*x349))+new_r00);
evalcond[5]=(((x348*x349))+new_r01);
evalcond[6]=(((new_r00*x349))+((gconst63*new_r10))+x347);
evalcond[7]=(((gconst63*new_r11))+((new_r01*x349))+x348);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x350=(new_r01*new_r22);
IkReal x351=(cj2*new_r11);
CheckValue<IkReal> x352=IKPowWithIntegerCheck(cj2,-1);
if(!x352.valid){
continue;
}
if( IKabs(((x352.value)*((((new_r22*sj2*x351))+(((-1.0)*x350))+(((-1.0)*new_r10))+((x350*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj2))+(((-1.0)*x351)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x352.value)*((((new_r22*sj2*x351))+(((-1.0)*x350))+(((-1.0)*new_r10))+((x350*(cj2*cj2)))))))+IKsqr((((new_r01*sj2))+(((-1.0)*x351))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x352.value)*((((new_r22*sj2*x351))+(((-1.0)*x350))+(((-1.0)*new_r10))+((x350*(cj2*cj2)))))), (((new_r01*sj2))+(((-1.0)*x351))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x353=IKcos(j4);
IkReal x354=IKsin(j4);
IkReal x355=(cj2*new_r01);
IkReal x356=(new_r10*sj2);
IkReal x357=((1.0)*new_r22);
IkReal x358=((1.0)*sj2);
IkReal x359=(new_r11*sj2);
IkReal x360=(cj2*new_r00);
IkReal x361=(cj2*x354);
IkReal x362=(new_r22*x353);
evalcond[0]=(x354+((cj2*new_r10))+(((-1.0)*new_r00*x358)));
evalcond[1]=(x353+(((-1.0)*new_r01*x358))+((cj2*new_r11)));
evalcond[2]=(x356+x360+x362);
evalcond[3]=(x361+((sj2*x362))+new_r10);
evalcond[4]=(x355+x359+(((-1.0)*x354*x357)));
evalcond[5]=(((cj2*x362))+new_r00+(((-1.0)*x354*x358)));
evalcond[6]=((((-1.0)*sj2*x354*x357))+new_r11+((cj2*x353)));
evalcond[7]=((((-1.0)*x357*x359))+x354+(((-1.0)*x355*x357)));
evalcond[8]=((((-1.0)*x353*x358))+new_r01+(((-1.0)*x357*x361)));
evalcond[9]=((((-1.0)*x356*x357))+(((-1.0)*x353))+(((-1.0)*x357*x360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x363=((1.0)*cj2);
CheckValue<IkReal> x364=IKPowWithIntegerCheck(new_r22,-1);
if(!x364.valid){
continue;
}
if( IKabs((((new_r00*sj2))+(((-1.0)*new_r10*x363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x364.value)*(((((-1.0)*new_r00*x363))+(((-1.0)*new_r10*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj2))+(((-1.0)*new_r10*x363))))+IKsqr(((x364.value)*(((((-1.0)*new_r00*x363))+(((-1.0)*new_r10*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((new_r00*sj2))+(((-1.0)*new_r10*x363))), ((x364.value)*(((((-1.0)*new_r00*x363))+(((-1.0)*new_r10*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x365=IKcos(j4);
IkReal x366=IKsin(j4);
IkReal x367=(cj2*new_r01);
IkReal x368=(new_r10*sj2);
IkReal x369=((1.0)*new_r22);
IkReal x370=((1.0)*sj2);
IkReal x371=(new_r11*sj2);
IkReal x372=(cj2*new_r00);
IkReal x373=(cj2*x366);
IkReal x374=(new_r22*x365);
evalcond[0]=((((-1.0)*new_r00*x370))+x366+((cj2*new_r10)));
evalcond[1]=(x365+((cj2*new_r11))+(((-1.0)*new_r01*x370)));
evalcond[2]=(x374+x372+x368);
evalcond[3]=(x373+((sj2*x374))+new_r10);
evalcond[4]=(x371+x367+(((-1.0)*x366*x369)));
evalcond[5]=((((-1.0)*x366*x370))+new_r00+((cj2*x374)));
evalcond[6]=((((-1.0)*sj2*x366*x369))+((cj2*x365))+new_r11);
evalcond[7]=((((-1.0)*x367*x369))+x366+(((-1.0)*x369*x371)));
evalcond[8]=((((-1.0)*x369*x373))+new_r01+(((-1.0)*x365*x370)));
evalcond[9]=((((-1.0)*x365))+(((-1.0)*x369*x372))+(((-1.0)*x368*x369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x375=cj2*cj2;
IkReal x376=new_r22*new_r22;
IkReal x377=(new_r22*sj2);
IkReal x378=((1.0)*cj2);
CheckValue<IkReal> x379=IKPowWithIntegerCheck(IKsign((x376+x375+(((-1.0)*x375*x376)))),-1);
if(!x379.valid){
continue;
}
CheckValue<IkReal> x380 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x378))+((new_r11*x377)))),IkReal(((((-1.0)*new_r10*x377))+(((-1.0)*new_r11*x378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x379.value)))+(x380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x381=IKcos(j4);
IkReal x382=IKsin(j4);
IkReal x383=(cj2*new_r01);
IkReal x384=(new_r10*sj2);
IkReal x385=((1.0)*new_r22);
IkReal x386=((1.0)*sj2);
IkReal x387=(new_r11*sj2);
IkReal x388=(cj2*new_r00);
IkReal x389=(cj2*x382);
IkReal x390=(new_r22*x381);
evalcond[0]=((((-1.0)*new_r00*x386))+x382+((cj2*new_r10)));
evalcond[1]=((((-1.0)*new_r01*x386))+x381+((cj2*new_r11)));
evalcond[2]=(x384+x388+x390);
evalcond[3]=(x389+((sj2*x390))+new_r10);
evalcond[4]=(x387+x383+(((-1.0)*x382*x385)));
evalcond[5]=(((cj2*x390))+new_r00+(((-1.0)*x382*x386)));
evalcond[6]=(((cj2*x381))+new_r11+(((-1.0)*sj2*x382*x385)));
evalcond[7]=(x382+(((-1.0)*x385*x387))+(((-1.0)*x383*x385)));
evalcond[8]=((((-1.0)*x381*x386))+new_r01+(((-1.0)*x385*x389)));
evalcond[9]=((((-1.0)*x384*x385))+(((-1.0)*x381))+(((-1.0)*x385*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x392=IKPowWithIntegerCheck(sj3,-1);
if(!x392.valid){
continue;
}
IkReal x391=x392.value;
CheckValue<IkReal> x393=IKPowWithIntegerCheck(new_r12,-1);
if(!x393.valid){
continue;
}
if( IKabs((x391*(x393.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x391)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x391*(x393.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj3*cj3)))))))+IKsqr((new_r02*x391))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x391*(x393.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj3*cj3)))))), (new_r02*x391));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x394=IKcos(j2);
IkReal x395=IKsin(j2);
IkReal x396=((1.0)*new_r02);
IkReal x397=(sj3*x395);
IkReal x398=(sj3*x394);
IkReal x399=(new_r12*x395);
evalcond[0]=((((-1.0)*x398))+new_r02);
evalcond[1]=((((-1.0)*x397))+new_r12);
evalcond[2]=((((-1.0)*x395*x396))+((new_r12*x394)));
evalcond[3]=((((-1.0)*sj3))+x399+((new_r02*x394)));
evalcond[4]=(((new_r00*x398))+((cj3*new_r20))+((new_r10*x397)));
evalcond[5]=(((new_r11*x397))+((new_r01*x398))+((cj3*new_r21)));
evalcond[6]=((-1.0)+((new_r02*x398))+((cj3*new_r22))+((new_r12*x397)));
evalcond[7]=((((-1.0)*cj3*x399))+((new_r22*sj3))+(((-1.0)*cj3*x394*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
j4eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=cj3;
j4eval[2]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x400=((1.0)*cj2);
if( IKabs((((new_r00*sj2))+(((-1.0)*new_r10*x400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x400))+(((-1.0)*new_r10*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj2))+(((-1.0)*new_r10*x400))))+IKsqr(((((-1.0)*new_r00*x400))+(((-1.0)*new_r10*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((new_r00*sj2))+(((-1.0)*new_r10*x400))), ((((-1.0)*new_r00*x400))+(((-1.0)*new_r10*sj2))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x401=IKcos(j4);
IkReal x402=IKsin(j4);
IkReal x403=((1.0)*sj2);
IkReal x404=(cj2*x401);
IkReal x405=((1.0)*x402);
IkReal x406=(x402*x403);
evalcond[0]=(((new_r10*sj2))+x401+((cj2*new_r00)));
evalcond[1]=(x402+((cj2*new_r10))+(((-1.0)*new_r00*x403)));
evalcond[2]=(x401+((cj2*new_r11))+(((-1.0)*new_r01*x403)));
evalcond[3]=(((sj2*x401))+new_r10+((cj2*x402)));
evalcond[4]=(((new_r11*sj2))+((cj2*new_r01))+(((-1.0)*x405)));
evalcond[5]=(x404+new_r00+(((-1.0)*x406)));
evalcond[6]=(x404+new_r11+(((-1.0)*x406)));
evalcond[7]=((((-1.0)*cj2*x405))+(((-1.0)*x401*x403))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x407=((1.0)*cj2);
if( IKabs(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r10*x407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*sj2))+(((-1.0)*new_r11*x407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r10*x407))))+IKsqr((((new_r10*sj2))+(((-1.0)*new_r11*x407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r10*x407))), (((new_r10*sj2))+(((-1.0)*new_r11*x407))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x408=IKsin(j4);
IkReal x409=IKcos(j4);
IkReal x410=((1.0)*sj2);
IkReal x411=(cj2*x408);
IkReal x412=(cj2*x409);
IkReal x413=(x409*x410);
evalcond[0]=(((new_r11*sj2))+x408+((cj2*new_r01)));
evalcond[1]=(x408+((cj2*new_r10))+(((-1.0)*new_r00*x410)));
evalcond[2]=(x409+((cj2*new_r11))+(((-1.0)*new_r01*x410)));
evalcond[3]=(((new_r10*sj2))+((cj2*new_r00))+(((-1.0)*x409)));
evalcond[4]=(((sj2*x408))+x412+new_r11);
evalcond[5]=(x411+new_r10+(((-1.0)*x413)));
evalcond[6]=(x411+new_r01+(((-1.0)*x413)));
evalcond[7]=(new_r00+(((-1.0)*x408*x410))+(((-1.0)*x412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x414=IKsin(j4);
IkReal x415=IKcos(j4);
IkReal x416=((1.0)*sj2);
evalcond[0]=(x414+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x415)));
evalcond[2]=(new_r10+((cj2*x414)));
evalcond[3]=(new_r11+((cj2*x415)));
evalcond[4]=(new_r00+(((-1.0)*x414*x416)));
evalcond[5]=((((-1.0)*x415*x416))+new_r01);
evalcond[6]=(x414+((cj2*new_r10))+(((-1.0)*new_r00*x416)));
evalcond[7]=(x415+((cj2*new_r11))+(((-1.0)*new_r01*x416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x417=IKsin(j4);
IkReal x418=IKcos(j4);
IkReal x419=((1.0)*sj2);
evalcond[0]=(x418+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x417)));
evalcond[2]=(new_r10+((cj2*x417)));
evalcond[3]=(new_r11+((cj2*x418)));
evalcond[4]=((((-1.0)*x417*x419))+new_r00);
evalcond[5]=((((-1.0)*x418*x419))+new_r01);
evalcond[6]=(x417+((cj2*new_r10))+(((-1.0)*new_r00*x419)));
evalcond[7]=(x418+((cj2*new_r11))+(((-1.0)*new_r01*x419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x420=IKsin(j4);
IkReal x421=IKcos(j4);
IkReal x422=((1.0)*cj3);
IkReal x423=((1.0)*x421);
evalcond[0]=(x420+new_r10);
evalcond[1]=(x421+new_r11);
evalcond[2]=(((sj3*x420))+new_r21);
evalcond[3]=(((cj3*x421))+new_r00);
evalcond[4]=((((-1.0)*sj3*x423))+new_r20);
evalcond[5]=((((-1.0)*x420*x422))+new_r01);
evalcond[6]=(x420+((new_r21*sj3))+(((-1.0)*new_r01*x422)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*new_r00*x422))+(((-1.0)*x423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r10, new_r11);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x424=IKsin(j4);
IkReal x425=IKcos(j4);
IkReal x426=((1.0)*x425);
evalcond[0]=(((sj3*x424))+new_r21);
evalcond[1]=(x424+(((-1.0)*new_r10)));
evalcond[2]=(x425+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj3*x426))+new_r20);
evalcond[4]=(((cj3*x425))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*cj3*x424))+(((-1.0)*new_r01)));
evalcond[6]=(x424+((cj3*new_r01))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*x426))+((cj3*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, new_r01);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x427=IKsin(j4);
IkReal x428=IKcos(j4);
IkReal x429=((1.0)*cj3);
IkReal x430=((1.0)*x428);
evalcond[0]=(((sj3*x427))+new_r21);
evalcond[1]=(x427+(((-1.0)*new_r00)));
evalcond[2]=(x428+(((-1.0)*new_r01)));
evalcond[3]=(((cj3*x428))+new_r10);
evalcond[4]=((((-1.0)*sj3*x430))+new_r20);
evalcond[5]=((((-1.0)*x427*x429))+new_r11);
evalcond[6]=(x427+(((-1.0)*new_r11*x429))+((new_r21*sj3)));
evalcond[7]=((((-1.0)*x430))+((new_r20*sj3))+(((-1.0)*new_r10*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x431=IKsin(j4);
IkReal x432=IKcos(j4);
IkReal x433=((1.0)*x432);
evalcond[0]=(x431+new_r00);
evalcond[1]=(x432+new_r01);
evalcond[2]=(((sj3*x431))+new_r21);
evalcond[3]=((((-1.0)*sj3*x433))+new_r20);
evalcond[4]=(((cj3*x432))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*cj3*x431))+(((-1.0)*new_r11)));
evalcond[6]=(x431+((cj3*new_r11))+((new_r21*sj3)));
evalcond[7]=((((-1.0)*x433))+((new_r20*sj3))+((cj3*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j4eval[0]=IKabs(new_r22);
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x435=IKPowWithIntegerCheck(sj3,-1);
if(!x435.valid){
continue;
}
IkReal x434=x435.value;
CheckValue<IkReal> x436=IKPowWithIntegerCheck(cj3,-1);
if(!x436.valid){
continue;
}
CheckValue<IkReal> x437=IKPowWithIntegerCheck(sj2,-1);
if(!x437.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x434)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x434*(x436.value)*(x437.value)*(((((-1.0)*new_r10*sj3))+((cj2*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x434))+IKsqr((x434*(x436.value)*(x437.value)*(((((-1.0)*new_r10*sj3))+((cj2*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x434), (x434*(x436.value)*(x437.value)*(((((-1.0)*new_r10*sj3))+((cj2*new_r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x438=IKsin(j4);
IkReal x439=IKcos(j4);
IkReal x440=(cj2*new_r01);
IkReal x441=((1.0)*cj3);
IkReal x442=(new_r10*sj2);
IkReal x443=(new_r11*sj2);
IkReal x444=(cj2*new_r00);
IkReal x445=((1.0)*sj2);
IkReal x446=(cj2*x438);
IkReal x447=(cj2*x439);
IkReal x448=((1.0)*x439);
IkReal x449=(cj3*x439);
evalcond[0]=(((sj3*x438))+new_r21);
evalcond[1]=((((-1.0)*sj3*x448))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x445))+x438+((cj2*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x445))+x439+((cj2*new_r11)));
evalcond[4]=(x449+x444+x442);
evalcond[5]=(x446+((sj2*x449))+new_r10);
evalcond[6]=((((-1.0)*x438*x441))+x440+x443);
evalcond[7]=((((-1.0)*x438*x445))+((cj3*x447))+new_r00);
evalcond[8]=((((-1.0)*sj2*x438*x441))+x447+new_r11);
evalcond[9]=((((-1.0)*x439*x445))+new_r01+(((-1.0)*x441*x446)));
evalcond[10]=(x438+((new_r21*sj3))+(((-1.0)*x440*x441))+(((-1.0)*x441*x443)));
evalcond[11]=((((-1.0)*x448))+((new_r20*sj3))+(((-1.0)*x441*x444))+(((-1.0)*x441*x442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x451=IKPowWithIntegerCheck(sj3,-1);
if(!x451.valid){
continue;
}
IkReal x450=x451.value;
CheckValue<IkReal> x452=IKPowWithIntegerCheck(cj2,-1);
if(!x452.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x450)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x450*(x452.value)*(((((-1.0)*cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x450))+IKsqr((x450*(x452.value)*(((((-1.0)*cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x450), (x450*(x452.value)*(((((-1.0)*cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x453=IKsin(j4);
IkReal x454=IKcos(j4);
IkReal x455=(cj2*new_r01);
IkReal x456=((1.0)*cj3);
IkReal x457=(new_r10*sj2);
IkReal x458=(new_r11*sj2);
IkReal x459=(cj2*new_r00);
IkReal x460=((1.0)*sj2);
IkReal x461=(cj2*x453);
IkReal x462=(cj2*x454);
IkReal x463=((1.0)*x454);
IkReal x464=(cj3*x454);
evalcond[0]=(((sj3*x453))+new_r21);
evalcond[1]=((((-1.0)*sj3*x463))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x460))+x453+((cj2*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x460))+x454+((cj2*new_r11)));
evalcond[4]=(x459+x457+x464);
evalcond[5]=(x461+new_r10+((sj2*x464)));
evalcond[6]=(x458+x455+(((-1.0)*x453*x456)));
evalcond[7]=(((cj3*x462))+(((-1.0)*x453*x460))+new_r00);
evalcond[8]=((((-1.0)*sj2*x453*x456))+x462+new_r11);
evalcond[9]=((((-1.0)*x456*x461))+(((-1.0)*x454*x460))+new_r01);
evalcond[10]=((((-1.0)*x456*x458))+x453+(((-1.0)*x455*x456))+((new_r21*sj3)));
evalcond[11]=(((new_r20*sj3))+(((-1.0)*x456*x457))+(((-1.0)*x456*x459))+(((-1.0)*x463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x465=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x465.valid){
continue;
}
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x465.value)))+(x466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x467=IKsin(j4);
IkReal x468=IKcos(j4);
IkReal x469=(cj2*new_r01);
IkReal x470=((1.0)*cj3);
IkReal x471=(new_r10*sj2);
IkReal x472=(new_r11*sj2);
IkReal x473=(cj2*new_r00);
IkReal x474=((1.0)*sj2);
IkReal x475=(cj2*x467);
IkReal x476=(cj2*x468);
IkReal x477=((1.0)*x468);
IkReal x478=(cj3*x468);
evalcond[0]=(((sj3*x467))+new_r21);
evalcond[1]=((((-1.0)*sj3*x477))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x474))+x467+((cj2*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x474))+x468+((cj2*new_r11)));
evalcond[4]=(x471+x473+x478);
evalcond[5]=(x475+new_r10+((sj2*x478)));
evalcond[6]=((((-1.0)*x467*x470))+x469+x472);
evalcond[7]=((((-1.0)*x467*x474))+((cj3*x476))+new_r00);
evalcond[8]=(x476+new_r11+(((-1.0)*sj2*x467*x470)));
evalcond[9]=((((-1.0)*x468*x474))+new_r01+(((-1.0)*x470*x475)));
evalcond[10]=((((-1.0)*x469*x470))+x467+((new_r21*sj3))+(((-1.0)*x470*x472)));
evalcond[11]=(((new_r20*sj3))+(((-1.0)*x477))+(((-1.0)*x470*x471))+(((-1.0)*x470*x473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x479=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x479.valid){
continue;
}
CheckValue<IkReal> x480 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x479.value)))+(x480.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(new_r21+((sj3*(IKsin(j4)))));
evalcond[1]=((((-1.0)*sj3*(IKcos(j4))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
j2eval[0]=sj3;
j2eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=new_r00;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x481=((1.0)*new_r10);
IkReal x482=((new_r10*new_r10)+(new_r00*new_r00));
j2eval[0]=x482;
j2eval[1]=IKsign(x482);
j2eval[2]=((IKabs((((new_r00*sj4))+(((-1.0)*cj4*x481)))))+(IKabs(((((-1.0)*cj4*new_r00))+(((-1.0)*sj4*x481))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x483=((1.0)*cj4);
IkReal x484=(((new_r10*new_r11))+((new_r00*new_r01)));
j2eval[0]=x484;
j2eval[1]=((IKabs(((((-1.0)*new_r11*x483))+((cj4*new_r00)))))+(IKabs(((((-1.0)*new_r01*x483))+(((-1.0)*new_r10*x483))))));
j2eval[2]=IKsign(x484);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x485=((1.0)*new_r10);
IkReal x486=(((cj4*new_r00))+(((-1.0)*sj4*x485)));
j2eval[0]=x486;
j2eval[1]=IKsign(x486);
j2eval[2]=((IKabs(((((-1.0)*(cj4*cj4)))+(new_r10*new_r10))))+(IKabs(((((-1.0)*new_r00*x485))+((cj4*sj4))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x489 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x489)==0){
continue;
}
IkReal x487=pow(x489,-0.5);
IkReal x488=((-1.0)*x487);
CheckValue<IkReal> x490 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x490.valid){
continue;
}
IkReal gconst50=((-1.0)*(x490.value));
IkReal gconst51=(new_r00*x488);
IkReal gconst52=(new_r10*x488);
CheckValue<IkReal> x491 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x491.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x491.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
CheckValue<IkReal> x495 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x495.valid){
continue;
}
IkReal x492=((-1.0)*(x495.value));
IkReal x493=x487;
IkReal x494=((-1.0)*x493);
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x492;
IkReal gconst50=x492;
IkReal gconst51=(new_r00*x494);
IkReal gconst52=(new_r10*x494);
IkReal x496=((new_r10*new_r10)+(new_r00*new_r00));
j2eval[0]=x496;
j2eval[1]=IKsign(x496);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x500 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x500.valid){
continue;
}
IkReal x497=((-1.0)*(x500.value));
IkReal x498=x487;
IkReal x499=((-1.0)*x498);
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x497;
IkReal gconst50=x497;
IkReal gconst51=(new_r00*x499);
IkReal gconst52=(new_r10*x499);
IkReal x501=new_r10*new_r10;
IkReal x502=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x503=x487;
IkReal x504=(new_r10*x503);
j2eval[0]=x502;
j2eval[1]=((IKabs((((new_r11*x504))+(((-1.0)*new_r00*x504)))))+(IKabs((((x501*x503))+((new_r01*x504))))));
j2eval[2]=IKsign(x502);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x508 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x508.valid){
continue;
}
IkReal x505=((-1.0)*(x508.value));
IkReal x506=x487;
IkReal x507=((-1.0)*x506);
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x505;
IkReal gconst50=x505;
IkReal gconst51=(new_r00*x507);
IkReal gconst52=(new_r10*x507);
IkReal x509=new_r10*new_r10;
IkReal x510=new_r00*new_r00;
CheckValue<IkReal> x517=IKPowWithIntegerCheck((x509+x510),-1);
if(!x517.valid){
continue;
}
IkReal x511=x517.value;
IkReal x512=(x509*x511);
CheckValue<IkReal> x518=IKPowWithIntegerCheck(((((-1.0)*x510))+(((-1.0)*x509))),-1);
if(!x518.valid){
continue;
}
IkReal x513=x518.value;
IkReal x514=((1.0)*x513);
IkReal x515=(new_r00*x514);
IkReal x516=(new_r10*x514);
j2eval[0]=((IKabs(((((-1.0)*new_r10*x515))+(((-1.0)*new_r10*x515*(new_r00*new_r00)))+(((-1.0)*x515*(new_r10*new_r10*new_r10))))))+(IKabs((((x510*x512))+(((-1.0)*x512))+((x511*(x510*x510)))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x519 = IKatan2WithCheck(IkReal(((new_r00*new_r00)+(((-1.0)*(gconst52*gconst52))))),IkReal(((((-1.0)*gconst51*gconst52))+(((-1.0)*new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x519.valid){
continue;
}
CheckValue<IkReal> x520=IKPowWithIntegerCheck(IKsign((((gconst51*new_r00))+((gconst52*new_r10)))),-1);
if(!x520.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x519.value)+(((1.5707963267949)*(x520.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x521=IKcos(j2);
IkReal x522=IKsin(j2);
IkReal x523=(gconst52*x521);
IkReal x524=((1.0)*x522);
IkReal x525=(gconst51*x521);
IkReal x526=(gconst51*x524);
evalcond[0]=(gconst52+((new_r10*x522))+((new_r00*x521)));
evalcond[1]=(((gconst52*x522))+x525+new_r10);
evalcond[2]=(gconst51+(((-1.0)*new_r00*x524))+((new_r10*x521)));
evalcond[3]=(gconst52+((new_r11*x521))+(((-1.0)*new_r01*x524)));
evalcond[4]=((((-1.0)*x526))+x523+new_r00);
evalcond[5]=((((-1.0)*x526))+x523+new_r11);
evalcond[6]=(((new_r01*x521))+(((-1.0)*gconst51))+((new_r11*x522)));
evalcond[7]=((((-1.0)*x525))+(((-1.0)*gconst52*x524))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x527=((1.0)*gconst52);
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal((((gconst52*new_r00))+(((-1.0)*new_r11*x527)))),IkReal(((((-1.0)*new_r01*x527))+(((-1.0)*new_r10*x527)))),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
CheckValue<IkReal> x529=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x529.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x528.value)+(((1.5707963267949)*(x529.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x530=IKcos(j2);
IkReal x531=IKsin(j2);
IkReal x532=(gconst52*x530);
IkReal x533=((1.0)*x531);
IkReal x534=(gconst51*x530);
IkReal x535=(gconst51*x533);
evalcond[0]=(gconst52+((new_r10*x531))+((new_r00*x530)));
evalcond[1]=(((gconst52*x531))+x534+new_r10);
evalcond[2]=(gconst51+(((-1.0)*new_r00*x533))+((new_r10*x530)));
evalcond[3]=(gconst52+((new_r11*x530))+(((-1.0)*new_r01*x533)));
evalcond[4]=((((-1.0)*x535))+x532+new_r00);
evalcond[5]=((((-1.0)*x535))+x532+new_r11);
evalcond[6]=(((new_r01*x530))+(((-1.0)*gconst51))+((new_r11*x531)));
evalcond[7]=((((-1.0)*x534))+(((-1.0)*gconst52*x533))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x536=((1.0)*new_r10);
CheckValue<IkReal> x537=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal((((gconst51*new_r00))+(((-1.0)*gconst52*x536)))),IkReal(((((-1.0)*gconst51*x536))+(((-1.0)*gconst52*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x537.value)))+(x538.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x539=IKcos(j2);
IkReal x540=IKsin(j2);
IkReal x541=(gconst52*x539);
IkReal x542=((1.0)*x540);
IkReal x543=(gconst51*x539);
IkReal x544=(gconst51*x542);
evalcond[0]=(((new_r10*x540))+gconst52+((new_r00*x539)));
evalcond[1]=(((gconst52*x540))+x543+new_r10);
evalcond[2]=((((-1.0)*new_r00*x542))+gconst51+((new_r10*x539)));
evalcond[3]=(gconst52+((new_r11*x539))+(((-1.0)*new_r01*x542)));
evalcond[4]=((((-1.0)*x544))+x541+new_r00);
evalcond[5]=((((-1.0)*x544))+x541+new_r11);
evalcond[6]=(((new_r01*x539))+(((-1.0)*gconst51))+((new_r11*x540)));
evalcond[7]=((((-1.0)*x543))+(((-1.0)*gconst52*x542))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x547 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x547)==0){
continue;
}
IkReal x545=pow(x547,-0.5);
IkReal x546=((1.0)*x545);
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
IkReal gconst53=((3.14159265358979)+(((-1.0)*(x548.value))));
IkReal gconst54=(new_r00*x546);
IkReal gconst55=(new_r10*x546);
CheckValue<IkReal> x549 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x549.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x549.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
CheckValue<IkReal> x553 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x553.valid){
continue;
}
IkReal x550=((1.0)*(x553.value));
IkReal x551=x545;
IkReal x552=((1.0)*x551);
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x550)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x550)));
IkReal gconst54=(new_r00*x552);
IkReal gconst55=(new_r10*x552);
IkReal x554=((new_r10*new_r10)+(new_r00*new_r00));
j2eval[0]=x554;
j2eval[1]=IKsign(x554);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x558 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x558.valid){
continue;
}
IkReal x555=((1.0)*(x558.value));
IkReal x556=x545;
IkReal x557=((1.0)*x556);
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x555)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x555)));
IkReal gconst54=(new_r00*x557);
IkReal gconst55=(new_r10*x557);
IkReal x559=new_r10*new_r10;
IkReal x560=(new_r10*new_r11);
IkReal x561=(((new_r00*new_r01))+x560);
IkReal x562=x545;
IkReal x563=((1.0)*x562);
j2eval[0]=x561;
j2eval[1]=((IKabs((((new_r00*new_r10*x562))+(((-1.0)*x560*x563)))))+(IKabs(((((-1.0)*new_r01*new_r10*x563))+(((-1.0)*x559*x563))))));
j2eval[2]=IKsign(x561);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x567 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x567.valid){
continue;
}
IkReal x564=((1.0)*(x567.value));
IkReal x565=x545;
IkReal x566=((1.0)*x565);
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x564)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x564)));
IkReal gconst54=(new_r00*x566);
IkReal gconst55=(new_r10*x566);
IkReal x568=new_r10*new_r10;
IkReal x569=new_r00*new_r00;
CheckValue<IkReal> x576=IKPowWithIntegerCheck((x568+x569),-1);
if(!x576.valid){
continue;
}
IkReal x570=x576.value;
IkReal x571=(x568*x570);
CheckValue<IkReal> x577=IKPowWithIntegerCheck(((((-1.0)*x568))+(((-1.0)*x569))),-1);
if(!x577.valid){
continue;
}
IkReal x572=x577.value;
IkReal x573=((1.0)*x572);
IkReal x574=(new_r00*x573);
IkReal x575=(new_r10*x573);
j2eval[0]=((IKabs(((((-1.0)*x571))+((x570*(x569*x569)))+((x569*x571)))))+(IKabs(((((-1.0)*new_r10*x574))+(((-1.0)*x574*(new_r10*new_r10*new_r10)))+(((-1.0)*new_r10*x574*(new_r00*new_r00)))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x578 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst55*gconst55)))+(new_r00*new_r00))),IkReal(((((-1.0)*new_r00*new_r10))+(((-1.0)*gconst54*gconst55)))),IKFAST_ATAN2_MAGTHRESH);
if(!x578.valid){
continue;
}
CheckValue<IkReal> x579=IKPowWithIntegerCheck(IKsign((((gconst54*new_r00))+((gconst55*new_r10)))),-1);
if(!x579.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x578.value)+(((1.5707963267949)*(x579.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x580=IKsin(j2);
IkReal x581=IKcos(j2);
IkReal x582=((1.0)*gconst54);
IkReal x583=(gconst55*x581);
IkReal x584=((1.0)*x580);
IkReal x585=(x580*x582);
evalcond[0]=(gconst55+((new_r00*x581))+((new_r10*x580)));
evalcond[1]=(((gconst55*x580))+new_r10+((gconst54*x581)));
evalcond[2]=(gconst54+(((-1.0)*new_r00*x584))+((new_r10*x581)));
evalcond[3]=((((-1.0)*new_r01*x584))+gconst55+((new_r11*x581)));
evalcond[4]=(x583+new_r00+(((-1.0)*x585)));
evalcond[5]=(x583+new_r11+(((-1.0)*x585)));
evalcond[6]=(((new_r01*x581))+(((-1.0)*x582))+((new_r11*x580)));
evalcond[7]=((((-1.0)*gconst55*x584))+new_r01+(((-1.0)*x581*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x586=((1.0)*gconst55);
CheckValue<IkReal> x587 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x586))+((gconst55*new_r00)))),IkReal(((((-1.0)*new_r01*x586))+(((-1.0)*new_r10*x586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x587.valid){
continue;
}
CheckValue<IkReal> x588=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x588.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x587.value)+(((1.5707963267949)*(x588.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x589=IKsin(j2);
IkReal x590=IKcos(j2);
IkReal x591=((1.0)*gconst54);
IkReal x592=(gconst55*x590);
IkReal x593=((1.0)*x589);
IkReal x594=(x589*x591);
evalcond[0]=(gconst55+((new_r00*x590))+((new_r10*x589)));
evalcond[1]=(((gconst55*x589))+((gconst54*x590))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x593))+((new_r10*x590))+gconst54);
evalcond[3]=(((new_r11*x590))+(((-1.0)*new_r01*x593))+gconst55);
evalcond[4]=((((-1.0)*x594))+x592+new_r00);
evalcond[5]=((((-1.0)*x594))+x592+new_r11);
evalcond[6]=(((new_r01*x590))+(((-1.0)*x591))+((new_r11*x589)));
evalcond[7]=((((-1.0)*gconst55*x593))+(((-1.0)*x590*x591))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x595=((1.0)*new_r10);
CheckValue<IkReal> x596=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x596.valid){
continue;
}
CheckValue<IkReal> x597 = IKatan2WithCheck(IkReal(((((-1.0)*gconst55*x595))+((gconst54*new_r00)))),IkReal(((((-1.0)*gconst55*new_r00))+(((-1.0)*gconst54*x595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x597.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x596.value)))+(x597.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x598=IKsin(j2);
IkReal x599=IKcos(j2);
IkReal x600=((1.0)*gconst54);
IkReal x601=(gconst55*x599);
IkReal x602=((1.0)*x598);
IkReal x603=(x598*x600);
evalcond[0]=(((new_r10*x598))+gconst55+((new_r00*x599)));
evalcond[1]=(((gconst54*x599))+new_r10+((gconst55*x598)));
evalcond[2]=(((new_r10*x599))+gconst54+(((-1.0)*new_r00*x602)));
evalcond[3]=(((new_r11*x599))+gconst55+(((-1.0)*new_r01*x602)));
evalcond[4]=(x601+(((-1.0)*x603))+new_r00);
evalcond[5]=(x601+(((-1.0)*x603))+new_r11);
evalcond[6]=(((new_r11*x598))+((new_r01*x599))+(((-1.0)*x600)));
evalcond[7]=((((-1.0)*x599*x600))+(((-1.0)*gconst55*x602))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x604=IKcos(j2);
IkReal x605=IKsin(j2);
IkReal x606=((1.0)*x605);
evalcond[0]=(x604+new_r10);
evalcond[1]=((((-1.0)*x606))+new_r00);
evalcond[2]=((((-1.0)*x606))+new_r11);
evalcond[3]=((((-1.0)*x604))+new_r01);
evalcond[4]=(((new_r10*x605))+((new_r00*x604)));
evalcond[5]=(((new_r11*x604))+(((-1.0)*new_r01*x606)));
evalcond[6]=((-1.0)+((new_r11*x605))+((new_r01*x604)));
evalcond[7]=((1.0)+((new_r10*x604))+(((-1.0)*new_r00*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x607=IKsin(j2);
IkReal x608=IKcos(j2);
IkReal x609=((1.0)*x607);
evalcond[0]=(x607+new_r00);
evalcond[1]=(x607+new_r11);
evalcond[2]=(x608+new_r01);
evalcond[3]=((((-1.0)*x608))+new_r10);
evalcond[4]=(((new_r10*x607))+((new_r00*x608)));
evalcond[5]=(((new_r11*x608))+(((-1.0)*new_r01*x609)));
evalcond[6]=((1.0)+((new_r11*x607))+((new_r01*x608)));
evalcond[7]=((-1.0)+((new_r10*x608))+(((-1.0)*new_r00*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=1.0;
j3=0;
new_r10=0;
new_r00=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x611 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x611.valid){
continue;
}
IkReal x610=x611.value;
j2array[0]=((-1.0)*x610);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x610)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j2))))+((new_r11*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=1.0;
j3=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x613 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x613.valid){
continue;
}
IkReal x612=x613.value;
j2array[0]=((-1.0)*x612);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x612)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j2))))+((new_r11*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x614=((1.0)*new_r10);
CheckValue<IkReal> x615 = IKatan2WithCheck(IkReal((((cj4*sj4))+(((-1.0)*new_r00*x614)))),IkReal(((((-1.0)*(cj4*cj4)))+(new_r10*new_r10))),IKFAST_ATAN2_MAGTHRESH);
if(!x615.valid){
continue;
}
CheckValue<IkReal> x616=IKPowWithIntegerCheck(IKsign((((cj4*new_r00))+(((-1.0)*sj4*x614)))),-1);
if(!x616.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x615.value)+(((1.5707963267949)*(x616.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x617=IKsin(j2);
IkReal x618=IKcos(j2);
IkReal x619=((1.0)*sj4);
IkReal x620=(cj4*x618);
IkReal x621=((1.0)*x617);
IkReal x622=(x617*x619);
evalcond[0]=(cj4+((new_r10*x617))+((new_r00*x618)));
evalcond[1]=(((sj4*x618))+new_r10+((cj4*x617)));
evalcond[2]=(sj4+(((-1.0)*new_r00*x621))+((new_r10*x618)));
evalcond[3]=((((-1.0)*new_r01*x621))+cj4+((new_r11*x618)));
evalcond[4]=((((-1.0)*x622))+x620+new_r00);
evalcond[5]=((((-1.0)*x622))+x620+new_r11);
evalcond[6]=(((new_r11*x617))+(((-1.0)*x619))+((new_r01*x618)));
evalcond[7]=((((-1.0)*x618*x619))+(((-1.0)*cj4*x621))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x623=((1.0)*cj4);
CheckValue<IkReal> x624 = IKatan2WithCheck(IkReal((((cj4*new_r00))+(((-1.0)*new_r11*x623)))),IkReal(((((-1.0)*new_r01*x623))+(((-1.0)*new_r10*x623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x624.valid){
continue;
}
CheckValue<IkReal> x625=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x625.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x624.value)+(((1.5707963267949)*(x625.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x626=IKsin(j2);
IkReal x627=IKcos(j2);
IkReal x628=((1.0)*sj4);
IkReal x629=(cj4*x627);
IkReal x630=((1.0)*x626);
IkReal x631=(x626*x628);
evalcond[0]=(cj4+((new_r00*x627))+((new_r10*x626)));
evalcond[1]=(((sj4*x627))+((cj4*x626))+new_r10);
evalcond[2]=(sj4+(((-1.0)*new_r00*x630))+((new_r10*x627)));
evalcond[3]=((((-1.0)*new_r01*x630))+cj4+((new_r11*x627)));
evalcond[4]=((((-1.0)*x631))+x629+new_r00);
evalcond[5]=((((-1.0)*x631))+x629+new_r11);
evalcond[6]=((((-1.0)*x628))+((new_r01*x627))+((new_r11*x626)));
evalcond[7]=((((-1.0)*cj4*x630))+(((-1.0)*x627*x628))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x632=((1.0)*new_r10);
CheckValue<IkReal> x633=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x633.valid){
continue;
}
CheckValue<IkReal> x634 = IKatan2WithCheck(IkReal((((new_r00*sj4))+(((-1.0)*cj4*x632)))),IkReal(((((-1.0)*sj4*x632))+(((-1.0)*cj4*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x634.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x633.value)))+(x634.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x635=IKsin(j2);
IkReal x636=IKcos(j2);
IkReal x637=((1.0)*sj4);
IkReal x638=(cj4*x636);
IkReal x639=((1.0)*x635);
IkReal x640=(x635*x637);
evalcond[0]=(cj4+((new_r00*x636))+((new_r10*x635)));
evalcond[1]=(((sj4*x636))+((cj4*x635))+new_r10);
evalcond[2]=(sj4+(((-1.0)*new_r00*x639))+((new_r10*x636)));
evalcond[3]=((((-1.0)*new_r01*x639))+cj4+((new_r11*x636)));
evalcond[4]=((((-1.0)*x640))+x638+new_r00);
evalcond[5]=((((-1.0)*x640))+x638+new_r11);
evalcond[6]=((((-1.0)*x637))+((new_r01*x636))+((new_r11*x635)));
evalcond[7]=((((-1.0)*cj4*x639))+(((-1.0)*x636*x637))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x641=((1.0)*sj4);
IkReal x642=(((new_r10*new_r11))+((new_r00*new_r01)));
j2eval[0]=x642;
j2eval[1]=((IKabs((((new_r01*sj4))+(((-1.0)*new_r10*x641)))))+(IKabs(((((-1.0)*new_r11*x641))+(((-1.0)*new_r00*x641))))));
j2eval[2]=IKsign(x642);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x643=((1.0)*new_r11);
IkReal x644=((new_r01*new_r01)+(new_r11*new_r11));
j2eval[0]=x644;
j2eval[1]=((IKabs(((((-1.0)*sj4*x643))+((cj4*new_r01)))))+(IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x643))))));
j2eval[2]=IKsign(x644);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x645=(((cj4*new_r01))+((new_r11*sj4)));
j2eval[0]=x645;
j2eval[1]=((IKabs(((-1.0)+((new_r01*new_r10))+(cj4*cj4))))+(IKabs(((((-1.0)*cj4*sj4))+(((-1.0)*new_r10*new_r11))))));
j2eval[2]=IKsign(x645);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x647 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x647)==0){
continue;
}
IkReal x646=pow(x647,-0.5);
CheckValue<IkReal> x648 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x648.valid){
continue;
}
IkReal gconst56=((-1.0)*(x648.value));
IkReal gconst57=((-1.0)*new_r01*x646);
IkReal gconst58=(new_r11*x646);
CheckValue<IkReal> x649 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x649.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x649.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
CheckValue<IkReal> x652 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x652.valid){
continue;
}
IkReal x650=((-1.0)*(x652.value));
IkReal x651=x646;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x650;
IkReal gconst56=x650;
IkReal gconst57=((-1.0)*new_r01*x651);
IkReal gconst58=(new_r11*x651);
IkReal x653=new_r01*new_r01;
IkReal x654=(new_r00*new_r01);
IkReal x655=(((new_r10*new_r11))+x654);
IkReal x656=x646;
IkReal x657=(new_r01*x656);
j2eval[0]=x655;
j2eval[1]=((IKabs((((x654*x656))+((new_r11*x657)))))+(IKabs(((((-1.0)*x653*x656))+((new_r10*x657))))));
j2eval[2]=IKsign(x655);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x660 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x660.valid){
continue;
}
IkReal x658=((-1.0)*(x660.value));
IkReal x659=x646;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x658;
IkReal gconst56=x658;
IkReal gconst57=((-1.0)*new_r01*x659);
IkReal gconst58=(new_r11*x659);
IkReal x661=((new_r01*new_r01)+(new_r11*new_r11));
j2eval[0]=x661;
j2eval[1]=IKsign(x661);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x664 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x664.valid){
continue;
}
IkReal x662=((-1.0)*(x664.value));
IkReal x663=x646;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x662;
IkReal gconst56=x662;
IkReal gconst57=((-1.0)*new_r01*x663);
IkReal gconst58=(new_r11*x663);
IkReal x665=new_r01*new_r01;
IkReal x666=new_r11*new_r11;
IkReal x667=((1.0)*x665);
CheckValue<IkReal> x673=IKPowWithIntegerCheck((x665+x666),-1);
if(!x673.valid){
continue;
}
IkReal x668=x673.value;
CheckValue<IkReal> x674=IKPowWithIntegerCheck(((((-1.0)*x666))+(((-1.0)*x667))),-1);
if(!x674.valid){
continue;
}
IkReal x669=x674.value;
IkReal x670=((1.0)*x669);
IkReal x671=(new_r11*x670);
IkReal x672=(new_r01*x670);
j2eval[0]=((IKabs(((((-1.0)*new_r01*x671))+(((-1.0)*new_r01*x671*(new_r11*new_r11)))+(((-1.0)*x671*(new_r01*new_r01*new_r01))))))+(IKabs((((x668*(x666*x666)))+((x665*x666*x668))+(((-1.0)*x667*x668))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
IkReal x675=((-1.0)*(x676.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x675;
new_r11=0;
new_r00=0;
IkReal gconst56=x675;
IkReal x677 = new_r01*new_r01;
if(IKabs(x677)==0){
continue;
}
IkReal gconst57=((-1.0)*new_r01*(pow(x677,-0.5)));
IkReal gconst58=0;
j2eval[0]=new_r10;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x678=IKPowWithIntegerCheck(gconst57,-1);
if(!x678.valid){
continue;
}
cj2array[0]=((-1.0)*new_r10*(x678.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x679=IKsin(j2);
IkReal x680=IKcos(j2);
IkReal x681=((-1.0)*x679);
evalcond[0]=(new_r10*x679);
evalcond[1]=(new_r01*x681);
evalcond[2]=(gconst57*x681);
evalcond[3]=(gconst57+((new_r10*x680)));
evalcond[4]=(gconst57+((new_r01*x680)));
evalcond[5]=(((gconst57*x680))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x682=IKPowWithIntegerCheck(new_r10,-1);
if(!x682.valid){
continue;
}
cj2array[0]=((-1.0)*gconst57*(x682.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x683=IKsin(j2);
IkReal x684=IKcos(j2);
IkReal x685=(gconst57*x684);
IkReal x686=((-1.0)*x683);
evalcond[0]=(new_r10*x683);
evalcond[1]=(new_r01*x686);
evalcond[2]=(gconst57*x686);
evalcond[3]=(x685+new_r10);
evalcond[4]=(gconst57+((new_r01*x684)));
evalcond[5]=(x685+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst57;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
IkReal x687=((-1.0)*(x688.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x687;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst56=x687;
IkReal gconst57=((-1.0)*new_r01);
IkReal gconst58=new_r11;
j2eval[0]=-1.0;
j2eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j2eval[2]=-1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x690 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x690.valid){
continue;
}
IkReal x689=((-1.0)*(x690.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x689;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst56=x689;
IkReal gconst57=((-1.0)*new_r01);
IkReal gconst58=new_r11;
j2eval[0]=-1.0;
j2eval[1]=-1.0;
j2eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
IkReal x691=((-1.0)*(x692.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x691;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst56=x691;
IkReal gconst57=((-1.0)*new_r01);
IkReal gconst58=new_r11;
j2eval[0]=1.0;
j2eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j2eval[2]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x693=((1.0)*new_r11);
CheckValue<IkReal> x694=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x694.valid){
continue;
}
CheckValue<IkReal> x695 = IKatan2WithCheck(IkReal(((((-1.0)*gconst57*x693))+((gconst58*new_r01)))),IkReal(((((-1.0)*gconst57*new_r01))+(((-1.0)*gconst58*x693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x695.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x694.value)))+(x695.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x696=IKcos(j2);
IkReal x697=IKsin(j2);
IkReal x698=(gconst57*x696);
IkReal x699=(gconst58*x696);
IkReal x700=((1.0)*x697);
IkReal x701=(gconst58*x700);
evalcond[0]=((((-1.0)*x701))+x698);
evalcond[1]=(gconst57+((new_r11*x697))+((new_r01*x696)));
evalcond[2]=(x699+((gconst57*x697))+new_r11);
evalcond[3]=(gconst58+((new_r11*x696))+(((-1.0)*new_r01*x700)));
evalcond[4]=((((-1.0)*gconst57*x700))+(((-1.0)*x699)));
evalcond[5]=((((-1.0)*x701))+x698+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x702 = IKatan2WithCheck(IkReal((gconst57*new_r11)),IkReal((gconst58*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x702.valid){
continue;
}
CheckValue<IkReal> x703=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst57*gconst57)))+(((-1.0)*(gconst58*gconst58))))),-1);
if(!x703.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x702.value)+(((1.5707963267949)*(x703.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x704=IKcos(j2);
IkReal x705=IKsin(j2);
IkReal x706=(gconst57*x704);
IkReal x707=(gconst58*x704);
IkReal x708=((1.0)*x705);
IkReal x709=(gconst58*x708);
evalcond[0]=((((-1.0)*x709))+x706);
evalcond[1]=(((new_r01*x704))+gconst57+((new_r11*x705)));
evalcond[2]=(((gconst57*x705))+x707+new_r11);
evalcond[3]=(gconst58+((new_r11*x704))+(((-1.0)*new_r01*x708)));
evalcond[4]=((((-1.0)*gconst57*x708))+(((-1.0)*x707)));
evalcond[5]=((((-1.0)*x709))+x706+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal((gconst57*gconst58)),IkReal(gconst58*gconst58),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
CheckValue<IkReal> x711=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst58*new_r11))+((gconst57*new_r01)))),-1);
if(!x711.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x710.value)+(((1.5707963267949)*(x711.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x712=IKcos(j2);
IkReal x713=IKsin(j2);
IkReal x714=(gconst57*x712);
IkReal x715=(gconst58*x712);
IkReal x716=((1.0)*x713);
IkReal x717=(gconst58*x716);
evalcond[0]=((((-1.0)*x717))+x714);
evalcond[1]=(((new_r01*x712))+gconst57+((new_r11*x713)));
evalcond[2]=(((gconst57*x713))+x715+new_r11);
evalcond[3]=(gconst58+((new_r11*x712))+(((-1.0)*new_r01*x716)));
evalcond[4]=((((-1.0)*gconst57*x716))+(((-1.0)*x715)));
evalcond[5]=((((-1.0)*x717))+x714+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x718=IKPowWithIntegerCheck(gconst58,-1);
if(!x718.valid){
continue;
}
cj2array[0]=(new_r00*(x718.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x719=IKsin(j2);
IkReal x720=IKcos(j2);
IkReal x721=((-1.0)*x719);
evalcond[0]=(new_r11*x719);
evalcond[1]=(new_r00*x721);
evalcond[2]=(gconst58*x721);
evalcond[3]=(gconst58+((new_r11*x720)));
evalcond[4]=(((gconst58*x720))+new_r11);
evalcond[5]=((((-1.0)*gconst58))+((new_r00*x720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x723 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x723.valid){
continue;
}
IkReal x722=((-1.0)*(x723.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x722;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst56=x722;
IkReal gconst57=0;
IkReal x724 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x724)==0){
continue;
}
IkReal gconst58=(new_r11*(pow(x724,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x726 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x726.valid){
continue;
}
IkReal x725=((-1.0)*(x726.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x725;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst56=x725;
IkReal gconst57=0;
IkReal x727 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x727)==0){
continue;
}
IkReal gconst58=(new_r11*(pow(x727,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x729 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x729.valid){
continue;
}
IkReal x728=((-1.0)*(x729.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x728;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst56=x728;
IkReal gconst57=0;
IkReal x730 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x730)==0){
continue;
}
IkReal gconst58=(new_r11*(pow(x730,-0.5)));
j2eval[0]=new_r10;
j2eval[1]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x731=IKPowWithIntegerCheck(new_r10,-1);
if(!x731.valid){
continue;
}
CheckValue<IkReal> x732=IKPowWithIntegerCheck(new_r11,-1);
if(!x732.valid){
continue;
}
if( IKabs((gconst58*(x731.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst58*(x732.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst58*(x731.value)))+IKsqr(((-1.0)*gconst58*(x732.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((gconst58*(x731.value)), ((-1.0)*gconst58*(x732.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x733=IKcos(j2);
IkReal x734=IKsin(j2);
IkReal x735=((1.0)*gconst58);
IkReal x736=((-1.0)*gconst58);
evalcond[0]=(new_r10*x733);
evalcond[1]=(new_r11*x734);
evalcond[2]=(x733*x736);
evalcond[3]=(x734*x736);
evalcond[4]=(gconst58+((new_r11*x733)));
evalcond[5]=(new_r11+((gconst58*x733)));
evalcond[6]=((((-1.0)*x734*x735))+new_r10);
evalcond[7]=((((-1.0)*x735))+((new_r10*x734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x737=IKPowWithIntegerCheck(gconst58,-1);
if(!x737.valid){
continue;
}
CheckValue<IkReal> x738=IKPowWithIntegerCheck(new_r11,-1);
if(!x738.valid){
continue;
}
if( IKabs((new_r10*(x737.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst58*(x738.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x737.value)))+IKsqr(((-1.0)*gconst58*(x738.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x737.value)), ((-1.0)*gconst58*(x738.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x739=IKcos(j2);
IkReal x740=IKsin(j2);
IkReal x741=((1.0)*gconst58);
IkReal x742=((-1.0)*gconst58);
evalcond[0]=(new_r10*x739);
evalcond[1]=(new_r11*x740);
evalcond[2]=(x739*x742);
evalcond[3]=(x740*x742);
evalcond[4]=(gconst58+((new_r11*x739)));
evalcond[5]=(new_r11+((gconst58*x739)));
evalcond[6]=((((-1.0)*x740*x741))+new_r10);
evalcond[7]=(((new_r10*x740))+(((-1.0)*x741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
CheckValue<IkReal> x744=IKPowWithIntegerCheck(IKsign(gconst58),-1);
if(!x744.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x743.value)+(((1.5707963267949)*(x744.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x745=IKcos(j2);
IkReal x746=IKsin(j2);
IkReal x747=((1.0)*gconst58);
IkReal x748=((-1.0)*gconst58);
evalcond[0]=(new_r10*x745);
evalcond[1]=(new_r11*x746);
evalcond[2]=(x745*x748);
evalcond[3]=(x746*x748);
evalcond[4]=(gconst58+((new_r11*x745)));
evalcond[5]=(((gconst58*x745))+new_r11);
evalcond[6]=((((-1.0)*x746*x747))+new_r10);
evalcond[7]=(((new_r10*x746))+(((-1.0)*x747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x750 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x750.valid){
continue;
}
IkReal x749=((-1.0)*(x750.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x749;
new_r01=0;
IkReal gconst56=x749;
IkReal gconst57=0;
IkReal x751 = new_r11*new_r11;
if(IKabs(x751)==0){
continue;
}
IkReal gconst58=(new_r11*(pow(x751,-0.5)));
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
IkReal x752=((-1.0)*(x753.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x752;
new_r01=0;
IkReal gconst56=x752;
IkReal gconst57=0;
IkReal x754 = new_r11*new_r11;
if(IKabs(x754)==0){
continue;
}
IkReal gconst58=(new_r11*(pow(x754,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x756 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x756.valid){
continue;
}
IkReal x755=((-1.0)*(x756.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x755;
new_r01=0;
IkReal gconst56=x755;
IkReal gconst57=0;
IkReal x757 = new_r11*new_r11;
if(IKabs(x757)==0){
continue;
}
IkReal gconst58=(new_r11*(pow(x757,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x758=IKPowWithIntegerCheck(gconst58,-1);
if(!x758.valid){
continue;
}
CheckValue<IkReal> x759=IKPowWithIntegerCheck(new_r11,-1);
if(!x759.valid){
continue;
}
if( IKabs((new_r10*(x758.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst58*(x759.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x758.value)))+IKsqr(((-1.0)*gconst58*(x759.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x758.value)), ((-1.0)*gconst58*(x759.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x760=IKsin(j2);
IkReal x761=IKcos(j2);
IkReal x762=((1.0)*gconst58);
evalcond[0]=(new_r11*x760);
evalcond[1]=((-1.0)*gconst58*x760);
evalcond[2]=(((new_r11*x761))+gconst58);
evalcond[3]=(((gconst58*x761))+new_r11);
evalcond[4]=(new_r10+(((-1.0)*x760*x762)));
evalcond[5]=(new_r00+(((-1.0)*x761*x762)));
evalcond[6]=(((new_r10*x761))+(((-1.0)*new_r00*x760)));
evalcond[7]=(((new_r10*x760))+(((-1.0)*x762))+((new_r00*x761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
CheckValue<IkReal> x764=IKPowWithIntegerCheck(IKsign(gconst58),-1);
if(!x764.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x763.value)+(((1.5707963267949)*(x764.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x765=IKsin(j2);
IkReal x766=IKcos(j2);
IkReal x767=((1.0)*gconst58);
evalcond[0]=(new_r11*x765);
evalcond[1]=((-1.0)*gconst58*x765);
evalcond[2]=(((new_r11*x766))+gconst58);
evalcond[3]=(((gconst58*x766))+new_r11);
evalcond[4]=((((-1.0)*x765*x767))+new_r10);
evalcond[5]=((((-1.0)*x766*x767))+new_r00);
evalcond[6]=(((new_r10*x766))+(((-1.0)*new_r00*x765)));
evalcond[7]=(((new_r10*x765))+(((-1.0)*x767))+((new_r00*x766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x768.valid){
continue;
}
CheckValue<IkReal> x769=IKPowWithIntegerCheck(IKsign(gconst58),-1);
if(!x769.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x768.value)+(((1.5707963267949)*(x769.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x770=IKsin(j2);
IkReal x771=IKcos(j2);
IkReal x772=((1.0)*gconst58);
evalcond[0]=(new_r11*x770);
evalcond[1]=((-1.0)*gconst58*x770);
evalcond[2]=(gconst58+((new_r11*x771)));
evalcond[3]=(((gconst58*x771))+new_r11);
evalcond[4]=(new_r10+(((-1.0)*x770*x772)));
evalcond[5]=((((-1.0)*x771*x772))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x770))+((new_r10*x771)));
evalcond[7]=(((new_r00*x771))+((new_r10*x770))+(((-1.0)*x772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x773=((1.0)*new_r11);
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*x773))+((gconst57*gconst58)))),IkReal(((((-1.0)*(gconst57*gconst57)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
CheckValue<IkReal> x775=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst58*x773))+((gconst57*new_r01)))),-1);
if(!x775.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x774.value)+(((1.5707963267949)*(x775.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x776=IKsin(j2);
IkReal x777=IKcos(j2);
IkReal x778=((1.0)*gconst58);
IkReal x779=(gconst57*x777);
IkReal x780=((1.0)*x776);
IkReal x781=(x776*x778);
evalcond[0]=(gconst57+((new_r11*x776))+((new_r01*x777)));
evalcond[1]=(((gconst57*x776))+((gconst58*x777))+new_r11);
evalcond[2]=(gconst57+((new_r10*x777))+(((-1.0)*new_r00*x780)));
evalcond[3]=((((-1.0)*new_r01*x780))+gconst58+((new_r11*x777)));
evalcond[4]=((((-1.0)*x781))+x779+new_r10);
evalcond[5]=((((-1.0)*x781))+x779+new_r01);
evalcond[6]=(((new_r00*x777))+((new_r10*x776))+(((-1.0)*x778)));
evalcond[7]=((((-1.0)*gconst57*x780))+new_r00+(((-1.0)*x777*x778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x782=((1.0)*new_r11);
CheckValue<IkReal> x783=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x783.valid){
continue;
}
CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal(((((-1.0)*gconst57*x782))+((gconst58*new_r01)))),IkReal(((((-1.0)*gconst58*x782))+(((-1.0)*gconst57*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x784.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x783.value)))+(x784.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x785=IKsin(j2);
IkReal x786=IKcos(j2);
IkReal x787=((1.0)*gconst58);
IkReal x788=(gconst57*x786);
IkReal x789=((1.0)*x785);
IkReal x790=(x785*x787);
evalcond[0]=(((new_r11*x785))+gconst57+((new_r01*x786)));
evalcond[1]=(((gconst58*x786))+new_r11+((gconst57*x785)));
evalcond[2]=(((new_r10*x786))+gconst57+(((-1.0)*new_r00*x789)));
evalcond[3]=((((-1.0)*new_r01*x789))+((new_r11*x786))+gconst58);
evalcond[4]=((((-1.0)*x790))+x788+new_r10);
evalcond[5]=((((-1.0)*x790))+x788+new_r01);
evalcond[6]=(((new_r10*x785))+(((-1.0)*x787))+((new_r00*x786)));
evalcond[7]=((((-1.0)*gconst57*x789))+(((-1.0)*x786*x787))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x791=((1.0)*gconst57);
CheckValue<IkReal> x792 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x791))+((gconst57*new_r01)))),IkReal(((((-1.0)*new_r11*x791))+(((-1.0)*new_r00*x791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x792.valid){
continue;
}
CheckValue<IkReal> x793=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x793.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x792.value)+(((1.5707963267949)*(x793.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x794=IKsin(j2);
IkReal x795=IKcos(j2);
IkReal x796=((1.0)*gconst58);
IkReal x797=(gconst57*x795);
IkReal x798=((1.0)*x794);
IkReal x799=(x794*x796);
evalcond[0]=(((new_r11*x794))+gconst57+((new_r01*x795)));
evalcond[1]=(((gconst58*x795))+((gconst57*x794))+new_r11);
evalcond[2]=(((new_r10*x795))+gconst57+(((-1.0)*new_r00*x798)));
evalcond[3]=((((-1.0)*new_r01*x798))+((new_r11*x795))+gconst58);
evalcond[4]=((((-1.0)*x799))+x797+new_r10);
evalcond[5]=((((-1.0)*x799))+x797+new_r01);
evalcond[6]=((((-1.0)*x796))+((new_r10*x794))+((new_r00*x795)));
evalcond[7]=((((-1.0)*x795*x796))+(((-1.0)*gconst57*x798))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x801 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x801)==0){
continue;
}
IkReal x800=pow(x801,-0.5);
CheckValue<IkReal> x802 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x802.valid){
continue;
}
IkReal gconst59=((3.14159265358979)+(((-1.0)*(x802.value))));
IkReal gconst60=((1.0)*new_r01*x800);
IkReal gconst61=((-1.0)*new_r11*x800);
CheckValue<IkReal> x803 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x803.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x803.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
CheckValue<IkReal> x806 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x806.valid){
continue;
}
IkReal x804=((1.0)*(x806.value));
IkReal x805=x800;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x804)));
IkReal gconst59=((3.14159265358979)+(((-1.0)*x804)));
IkReal gconst60=((1.0)*new_r01*x805);
IkReal gconst61=((-1.0)*new_r11*x805);
IkReal x807=new_r01*new_r01;
IkReal x808=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x809=x800;
IkReal x810=((1.0)*new_r01*x809);
j2eval[0]=x808;
j2eval[1]=((IKabs(((((-1.0)*new_r10*x810))+((x807*x809)))))+(IKabs(((((-1.0)*new_r11*x810))+(((-1.0)*new_r00*x810))))));
j2eval[2]=IKsign(x808);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x813 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x813.valid){
continue;
}
IkReal x811=((1.0)*(x813.value));
IkReal x812=x800;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x811)));
IkReal gconst59=((3.14159265358979)+(((-1.0)*x811)));
IkReal gconst60=((1.0)*new_r01*x812);
IkReal gconst61=((-1.0)*new_r11*x812);
IkReal x814=((new_r01*new_r01)+(new_r11*new_r11));
j2eval[0]=x814;
j2eval[1]=IKsign(x814);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x817 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x817.valid){
continue;
}
IkReal x815=((1.0)*(x817.value));
IkReal x816=x800;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x815)));
IkReal gconst59=((3.14159265358979)+(((-1.0)*x815)));
IkReal gconst60=((1.0)*new_r01*x816);
IkReal gconst61=((-1.0)*new_r11*x816);
IkReal x818=new_r01*new_r01;
IkReal x819=new_r11*new_r11;
IkReal x820=((1.0)*x818);
CheckValue<IkReal> x826=IKPowWithIntegerCheck((x818+x819),-1);
if(!x826.valid){
continue;
}
IkReal x821=x826.value;
CheckValue<IkReal> x827=IKPowWithIntegerCheck(((((-1.0)*x820))+(((-1.0)*x819))),-1);
if(!x827.valid){
continue;
}
IkReal x822=x827.value;
IkReal x823=((1.0)*x822);
IkReal x824=(new_r11*x823);
IkReal x825=(new_r01*x823);
j2eval[0]=((IKabs((((x821*(x819*x819)))+((x818*x819*x821))+(((-1.0)*x820*x821)))))+(IKabs(((((-1.0)*new_r01*x824*(new_r11*new_r11)))+(((-1.0)*x824*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x824))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x829 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x829.valid){
continue;
}
IkReal x828=((1.0)*(x829.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x828)));
new_r11=0;
new_r00=0;
IkReal gconst59=((3.14159265358979)+(((-1.0)*x828)));
IkReal x830 = new_r01*new_r01;
if(IKabs(x830)==0){
continue;
}
IkReal gconst60=((1.0)*new_r01*(pow(x830,-0.5)));
IkReal gconst61=0;
j2eval[0]=new_r10;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x831=IKPowWithIntegerCheck(gconst60,-1);
if(!x831.valid){
continue;
}
cj2array[0]=((-1.0)*new_r10*(x831.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x832=IKsin(j2);
IkReal x833=IKcos(j2);
IkReal x834=((-1.0)*x832);
evalcond[0]=(new_r10*x832);
evalcond[1]=(new_r01*x834);
evalcond[2]=(gconst60*x834);
evalcond[3]=(gconst60+((new_r10*x833)));
evalcond[4]=(((new_r01*x833))+gconst60);
evalcond[5]=(((gconst60*x833))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x835=IKPowWithIntegerCheck(new_r10,-1);
if(!x835.valid){
continue;
}
cj2array[0]=((-1.0)*gconst60*(x835.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x836=IKsin(j2);
IkReal x837=IKcos(j2);
IkReal x838=(gconst60*x837);
IkReal x839=((-1.0)*x836);
evalcond[0]=(new_r10*x836);
evalcond[1]=(new_r01*x839);
evalcond[2]=(gconst60*x839);
evalcond[3]=(new_r10+x838);
evalcond[4]=(((new_r01*x837))+gconst60);
evalcond[5]=(new_r01+x838);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst60;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
IkReal x840=((1.0)*(x841.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x840)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst59=((3.14159265358979)+(((-1.0)*x840)));
IkReal gconst60=((1.0)*new_r01);
IkReal gconst61=((-1.0)*new_r11);
j2eval[0]=1.0;
j2eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r01*new_r01))))))+(IKabs(((1.0)*new_r01*new_r11))));
j2eval[2]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x843 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x843.valid){
continue;
}
IkReal x842=((1.0)*(x843.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x842)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst59=((3.14159265358979)+(((-1.0)*x842)));
IkReal gconst60=((1.0)*new_r01);
IkReal gconst61=((-1.0)*new_r11);
j2eval[0]=-1.0;
j2eval[1]=-1.0;
j2eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x845 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x845.valid){
continue;
}
IkReal x844=((1.0)*(x845.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x844)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst59=((3.14159265358979)+(((-1.0)*x844)));
IkReal gconst60=((1.0)*new_r01);
IkReal gconst61=((-1.0)*new_r11);
j2eval[0]=1.0;
j2eval[1]=1.0;
j2eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x846=((1.0)*gconst60);
CheckValue<IkReal> x847=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x847.valid){
continue;
}
CheckValue<IkReal> x848 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x846))+((gconst61*new_r01)))),IkReal(((((-1.0)*gconst61*new_r11))+(((-1.0)*new_r01*x846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x848.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x847.value)))+(x848.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x849=IKcos(j2);
IkReal x850=IKsin(j2);
IkReal x851=(gconst60*x849);
IkReal x852=((1.0)*x850);
IkReal x853=(gconst61*x849);
IkReal x854=(gconst61*x852);
evalcond[0]=((((-1.0)*x854))+x851);
evalcond[1]=(gconst60+((new_r01*x849))+((new_r11*x850)));
evalcond[2]=(new_r11+x853+((gconst60*x850)));
evalcond[3]=((((-1.0)*new_r01*x852))+gconst61+((new_r11*x849)));
evalcond[4]=((((-1.0)*gconst60*x852))+(((-1.0)*x853)));
evalcond[5]=((((-1.0)*x854))+new_r01+x851);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x855 = IKatan2WithCheck(IkReal((gconst60*new_r11)),IkReal((gconst61*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
CheckValue<IkReal> x856=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst60*gconst60)))+(((-1.0)*(gconst61*gconst61))))),-1);
if(!x856.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x855.value)+(((1.5707963267949)*(x856.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x857=IKcos(j2);
IkReal x858=IKsin(j2);
IkReal x859=(gconst60*x857);
IkReal x860=((1.0)*x858);
IkReal x861=(gconst61*x857);
IkReal x862=(gconst61*x860);
evalcond[0]=((((-1.0)*x862))+x859);
evalcond[1]=(gconst60+((new_r11*x858))+((new_r01*x857)));
evalcond[2]=(new_r11+x861+((gconst60*x858)));
evalcond[3]=((((-1.0)*new_r01*x860))+gconst61+((new_r11*x857)));
evalcond[4]=((((-1.0)*x861))+(((-1.0)*gconst60*x860)));
evalcond[5]=((((-1.0)*x862))+new_r01+x859);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x863=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*new_r11))+((gconst60*new_r01)))),-1);
if(!x863.valid){
continue;
}
CheckValue<IkReal> x864 = IKatan2WithCheck(IkReal((gconst60*gconst61)),IkReal(gconst61*gconst61),IKFAST_ATAN2_MAGTHRESH);
if(!x864.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x863.value)))+(x864.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x865=IKcos(j2);
IkReal x866=IKsin(j2);
IkReal x867=(gconst60*x865);
IkReal x868=((1.0)*x866);
IkReal x869=(gconst61*x865);
IkReal x870=(gconst61*x868);
evalcond[0]=(x867+(((-1.0)*x870)));
evalcond[1]=(((new_r01*x865))+gconst60+((new_r11*x866)));
evalcond[2]=(((gconst60*x866))+new_r11+x869);
evalcond[3]=((((-1.0)*new_r01*x868))+gconst61+((new_r11*x865)));
evalcond[4]=((((-1.0)*x869))+(((-1.0)*gconst60*x868)));
evalcond[5]=(new_r01+x867+(((-1.0)*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x871=IKPowWithIntegerCheck(gconst61,-1);
if(!x871.valid){
continue;
}
cj2array[0]=(new_r00*(x871.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x872=IKsin(j2);
IkReal x873=IKcos(j2);
IkReal x874=((-1.0)*x872);
evalcond[0]=(new_r11*x872);
evalcond[1]=(new_r00*x874);
evalcond[2]=(gconst61*x874);
evalcond[3]=(gconst61+((new_r11*x873)));
evalcond[4]=(new_r11+((gconst61*x873)));
evalcond[5]=(((new_r00*x873))+(((-1.0)*gconst61)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x876 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x876.valid){
continue;
}
IkReal x875=((1.0)*(x876.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x875)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst59=((3.14159265358979)+(((-1.0)*x875)));
IkReal gconst60=0;
IkReal x877 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x877)==0){
continue;
}
IkReal gconst61=((-1.0)*new_r11*(pow(x877,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x879 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x879.valid){
continue;
}
IkReal x878=((1.0)*(x879.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x878)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst59=((3.14159265358979)+(((-1.0)*x878)));
IkReal gconst60=0;
IkReal x880 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x880)==0){
continue;
}
IkReal gconst61=((-1.0)*new_r11*(pow(x880,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x882 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x882.valid){
continue;
}
IkReal x881=((1.0)*(x882.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x881)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst59=((3.14159265358979)+(((-1.0)*x881)));
IkReal gconst60=0;
IkReal x883 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x883)==0){
continue;
}
IkReal gconst61=((-1.0)*new_r11*(pow(x883,-0.5)));
j2eval[0]=new_r10;
j2eval[1]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x884=IKPowWithIntegerCheck(new_r10,-1);
if(!x884.valid){
continue;
}
CheckValue<IkReal> x885=IKPowWithIntegerCheck(new_r11,-1);
if(!x885.valid){
continue;
}
if( IKabs((gconst61*(x884.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst61*(x885.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst61*(x884.value)))+IKsqr(((-1.0)*gconst61*(x885.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((gconst61*(x884.value)), ((-1.0)*gconst61*(x885.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x886=IKcos(j2);
IkReal x887=IKsin(j2);
IkReal x888=(gconst61*x887);
IkReal x889=(gconst61*x886);
evalcond[0]=(new_r10*x886);
evalcond[1]=(new_r11*x887);
evalcond[2]=((-1.0)*x889);
evalcond[3]=((-1.0)*x888);
evalcond[4]=(((new_r11*x886))+gconst61);
evalcond[5]=(new_r11+x889);
evalcond[6]=((((-1.0)*x888))+new_r10);
evalcond[7]=(((new_r10*x887))+(((-1.0)*gconst61)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x890=IKPowWithIntegerCheck(gconst61,-1);
if(!x890.valid){
continue;
}
CheckValue<IkReal> x891=IKPowWithIntegerCheck(new_r11,-1);
if(!x891.valid){
continue;
}
if( IKabs((new_r10*(x890.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst61*(x891.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x890.value)))+IKsqr(((-1.0)*gconst61*(x891.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x890.value)), ((-1.0)*gconst61*(x891.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x892=IKcos(j2);
IkReal x893=IKsin(j2);
IkReal x894=(gconst61*x893);
IkReal x895=(gconst61*x892);
evalcond[0]=(new_r10*x892);
evalcond[1]=(new_r11*x893);
evalcond[2]=((-1.0)*x895);
evalcond[3]=((-1.0)*x894);
evalcond[4]=(((new_r11*x892))+gconst61);
evalcond[5]=(new_r11+x895);
evalcond[6]=((((-1.0)*x894))+new_r10);
evalcond[7]=((((-1.0)*gconst61))+((new_r10*x893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x896 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x896.valid){
continue;
}
CheckValue<IkReal> x897=IKPowWithIntegerCheck(IKsign(gconst61),-1);
if(!x897.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x896.value)+(((1.5707963267949)*(x897.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x898=IKcos(j2);
IkReal x899=IKsin(j2);
IkReal x900=(gconst61*x899);
IkReal x901=(gconst61*x898);
evalcond[0]=(new_r10*x898);
evalcond[1]=(new_r11*x899);
evalcond[2]=((-1.0)*x901);
evalcond[3]=((-1.0)*x900);
evalcond[4]=(((new_r11*x898))+gconst61);
evalcond[5]=(new_r11+x901);
evalcond[6]=((((-1.0)*x900))+new_r10);
evalcond[7]=((((-1.0)*gconst61))+((new_r10*x899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x903 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x903.valid){
continue;
}
IkReal x902=((1.0)*(x903.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x902)));
new_r01=0;
IkReal gconst59=((3.14159265358979)+(((-1.0)*x902)));
IkReal gconst60=0;
IkReal x904 = new_r11*new_r11;
if(IKabs(x904)==0){
continue;
}
IkReal gconst61=((-1.0)*new_r11*(pow(x904,-0.5)));
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x906 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x906.valid){
continue;
}
IkReal x905=((1.0)*(x906.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x905)));
new_r01=0;
IkReal gconst59=((3.14159265358979)+(((-1.0)*x905)));
IkReal gconst60=0;
IkReal x907 = new_r11*new_r11;
if(IKabs(x907)==0){
continue;
}
IkReal gconst61=((-1.0)*new_r11*(pow(x907,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x909 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x909.valid){
continue;
}
IkReal x908=((1.0)*(x909.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x908)));
new_r01=0;
IkReal gconst59=((3.14159265358979)+(((-1.0)*x908)));
IkReal gconst60=0;
IkReal x910 = new_r11*new_r11;
if(IKabs(x910)==0){
continue;
}
IkReal gconst61=((-1.0)*new_r11*(pow(x910,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x911=IKPowWithIntegerCheck(gconst61,-1);
if(!x911.valid){
continue;
}
CheckValue<IkReal> x912=IKPowWithIntegerCheck(new_r11,-1);
if(!x912.valid){
continue;
}
if( IKabs((new_r10*(x911.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst61*(x912.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x911.value)))+IKsqr(((-1.0)*gconst61*(x912.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x911.value)), ((-1.0)*gconst61*(x912.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x913=IKsin(j2);
IkReal x914=IKcos(j2);
IkReal x915=((1.0)*gconst61);
IkReal x916=(gconst61*x913);
evalcond[0]=(new_r11*x913);
evalcond[1]=((-1.0)*x916);
evalcond[2]=(gconst61+((new_r11*x914)));
evalcond[3]=(((gconst61*x914))+new_r11);
evalcond[4]=((((-1.0)*x913*x915))+new_r10);
evalcond[5]=((((-1.0)*x914*x915))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x913))+((new_r10*x914)));
evalcond[7]=((((-1.0)*x915))+((new_r10*x913))+((new_r00*x914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x917 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x917.valid){
continue;
}
CheckValue<IkReal> x918=IKPowWithIntegerCheck(IKsign(gconst61),-1);
if(!x918.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x917.value)+(((1.5707963267949)*(x918.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x919=IKsin(j2);
IkReal x920=IKcos(j2);
IkReal x921=((1.0)*gconst61);
IkReal x922=(gconst61*x919);
evalcond[0]=(new_r11*x919);
evalcond[1]=((-1.0)*x922);
evalcond[2]=(gconst61+((new_r11*x920)));
evalcond[3]=(((gconst61*x920))+new_r11);
evalcond[4]=((((-1.0)*x919*x921))+new_r10);
evalcond[5]=((((-1.0)*x920*x921))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x919))+((new_r10*x920)));
evalcond[7]=((((-1.0)*x921))+((new_r10*x919))+((new_r00*x920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x923=IKPowWithIntegerCheck(IKsign(gconst61),-1);
if(!x923.valid){
continue;
}
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x923.value)))+(x924.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x925=IKsin(j2);
IkReal x926=IKcos(j2);
IkReal x927=((1.0)*gconst61);
IkReal x928=(gconst61*x925);
evalcond[0]=(new_r11*x925);
evalcond[1]=((-1.0)*x928);
evalcond[2]=(gconst61+((new_r11*x926)));
evalcond[3]=(((gconst61*x926))+new_r11);
evalcond[4]=((((-1.0)*x925*x927))+new_r10);
evalcond[5]=((((-1.0)*x926*x927))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x925))+((new_r10*x926)));
evalcond[7]=((((-1.0)*x927))+((new_r00*x926))+((new_r10*x925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x929=((1.0)*new_r11);
CheckValue<IkReal> x930=IKPowWithIntegerCheck(IKsign((((gconst60*new_r01))+(((-1.0)*gconst61*x929)))),-1);
if(!x930.valid){
continue;
}
CheckValue<IkReal> x931 = IKatan2WithCheck(IkReal((((gconst60*gconst61))+(((-1.0)*new_r01*x929)))),IkReal(((((-1.0)*(gconst60*gconst60)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x931.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x930.value)))+(x931.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x932=IKsin(j2);
IkReal x933=IKcos(j2);
IkReal x934=((1.0)*gconst61);
IkReal x935=(gconst60*x933);
IkReal x936=((1.0)*x932);
IkReal x937=(x932*x934);
evalcond[0]=(gconst60+((new_r01*x933))+((new_r11*x932)));
evalcond[1]=(((gconst60*x932))+((gconst61*x933))+new_r11);
evalcond[2]=(gconst60+(((-1.0)*new_r00*x936))+((new_r10*x933)));
evalcond[3]=(gconst61+(((-1.0)*new_r01*x936))+((new_r11*x933)));
evalcond[4]=(new_r10+x935+(((-1.0)*x937)));
evalcond[5]=(new_r01+x935+(((-1.0)*x937)));
evalcond[6]=(((new_r00*x933))+((new_r10*x932))+(((-1.0)*x934)));
evalcond[7]=((((-1.0)*gconst60*x936))+new_r00+(((-1.0)*x933*x934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x938=((1.0)*gconst60);
CheckValue<IkReal> x939 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x938))+((gconst61*new_r01)))),IkReal(((((-1.0)*gconst61*new_r11))+(((-1.0)*new_r01*x938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x939.valid){
continue;
}
CheckValue<IkReal> x940=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x940.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x939.value)+(((1.5707963267949)*(x940.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x941=IKsin(j2);
IkReal x942=IKcos(j2);
IkReal x943=((1.0)*gconst61);
IkReal x944=(gconst60*x942);
IkReal x945=((1.0)*x941);
IkReal x946=(x941*x943);
evalcond[0]=(((new_r01*x942))+gconst60+((new_r11*x941)));
evalcond[1]=(((gconst61*x942))+((gconst60*x941))+new_r11);
evalcond[2]=(gconst60+((new_r10*x942))+(((-1.0)*new_r00*x945)));
evalcond[3]=(gconst61+((new_r11*x942))+(((-1.0)*new_r01*x945)));
evalcond[4]=((((-1.0)*x946))+new_r10+x944);
evalcond[5]=((((-1.0)*x946))+new_r01+x944);
evalcond[6]=((((-1.0)*x943))+((new_r00*x942))+((new_r10*x941)));
evalcond[7]=((((-1.0)*x942*x943))+(((-1.0)*gconst60*x945))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x947=((1.0)*gconst60);
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x947))+((gconst60*new_r01)))),IkReal(((((-1.0)*new_r11*x947))+(((-1.0)*new_r00*x947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
CheckValue<IkReal> x949=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x949.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x948.value)+(((1.5707963267949)*(x949.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x950=IKsin(j2);
IkReal x951=IKcos(j2);
IkReal x952=((1.0)*gconst61);
IkReal x953=(gconst60*x951);
IkReal x954=((1.0)*x950);
IkReal x955=(x950*x952);
evalcond[0]=(((new_r01*x951))+gconst60+((new_r11*x950)));
evalcond[1]=(((gconst60*x950))+((gconst61*x951))+new_r11);
evalcond[2]=(((new_r10*x951))+gconst60+(((-1.0)*new_r00*x954)));
evalcond[3]=(gconst61+(((-1.0)*new_r01*x954))+((new_r11*x951)));
evalcond[4]=(new_r10+(((-1.0)*x955))+x953);
evalcond[5]=(new_r01+(((-1.0)*x955))+x953);
evalcond[6]=(((new_r10*x950))+((new_r00*x951))+(((-1.0)*x952)));
evalcond[7]=((((-1.0)*gconst60*x954))+(((-1.0)*x951*x952))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r01=0;
new_r11=0;
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x957 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x957.valid){
continue;
}
IkReal x956=x957.value;
j2array[0]=((-1.0)*x956);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x956)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j2))))+((new_r10*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r10, ((-1.0)*new_r11));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x958=IKcos(j2);
IkReal x959=IKsin(j2);
IkReal x960=((1.0)*x959);
evalcond[0]=(new_r11+x958);
evalcond[1]=(new_r10+(((-1.0)*x960)));
evalcond[2]=((((-1.0)*x958))+new_r00);
evalcond[3]=(new_r01+(((-1.0)*x960)));
evalcond[4]=(((new_r01*x958))+((new_r11*x959)));
evalcond[5]=(((new_r10*x958))+(((-1.0)*new_r00*x960)));
evalcond[6]=((-1.0)+((new_r10*x959))+((new_r00*x958)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x960))+((new_r11*x958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x961=IKsin(j2);
IkReal x962=IKcos(j2);
IkReal x963=((1.0)*x961);
evalcond[0]=(new_r10+x961);
evalcond[1]=(new_r00+x962);
evalcond[2]=(new_r01+x961);
evalcond[3]=((((-1.0)*x962))+new_r11);
evalcond[4]=(((new_r11*x961))+((new_r01*x962)));
evalcond[5]=((((-1.0)*new_r00*x963))+((new_r10*x962)));
evalcond[6]=((1.0)+((new_r00*x962))+((new_r10*x961)));
evalcond[7]=((-1.0)+((new_r11*x962))+(((-1.0)*new_r01*x963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r11=0;
new_r00=0;
j2eval[0]=new_r01;
j2eval[1]=((IKabs(cj4))+(IKabs(sj4)));
j2eval[2]=IKsign(new_r01);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r11=0;
new_r00=0;
j2eval[0]=new_r10;
j2eval[1]=((IKabs(cj4))+(IKabs(sj4)));
j2eval[2]=IKsign(new_r10);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r11=0;
new_r00=0;
j2eval[0]=new_r01;
j2eval[1]=new_r10;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x964=IKPowWithIntegerCheck(new_r01,-1);
if(!x964.valid){
continue;
}
CheckValue<IkReal> x965=IKPowWithIntegerCheck(new_r10,-1);
if(!x965.valid){
continue;
}
if( IKabs((cj4*(x964.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj4*(x965.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj4*(x964.value)))+IKsqr(((-1.0)*sj4*(x965.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj4*(x964.value)), ((-1.0)*sj4*(x965.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x966=IKcos(j2);
IkReal x967=IKsin(j2);
IkReal x968=((1.0)*cj4);
IkReal x969=(sj4*x966);
IkReal x970=((1.0)*x967);
IkReal x971=(x967*x968);
evalcond[0]=(sj4+((new_r10*x966)));
evalcond[1]=(((new_r01*x966))+sj4);
evalcond[2]=(cj4+(((-1.0)*new_r01*x970)));
evalcond[3]=((((-1.0)*x968))+((new_r10*x967)));
evalcond[4]=(new_r10+x969+(((-1.0)*x971)));
evalcond[5]=((((-1.0)*x966*x968))+(((-1.0)*sj4*x970)));
evalcond[6]=(new_r01+x969+(((-1.0)*x971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x972=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x972.valid){
continue;
}
CheckValue<IkReal> x973 = IKatan2WithCheck(IkReal(cj4),IkReal(((-1.0)*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x973.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x972.value)))+(x973.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x974=IKcos(j2);
IkReal x975=IKsin(j2);
IkReal x976=((1.0)*cj4);
IkReal x977=(sj4*x974);
IkReal x978=((1.0)*x975);
IkReal x979=(x975*x976);
evalcond[0]=(sj4+((new_r10*x974)));
evalcond[1]=(((new_r01*x974))+sj4);
evalcond[2]=(cj4+(((-1.0)*new_r01*x978)));
evalcond[3]=(((new_r10*x975))+(((-1.0)*x976)));
evalcond[4]=(new_r10+x977+(((-1.0)*x979)));
evalcond[5]=((((-1.0)*x974*x976))+(((-1.0)*sj4*x978)));
evalcond[6]=(new_r01+x977+(((-1.0)*x979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x980=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x980.valid){
continue;
}
CheckValue<IkReal> x981 = IKatan2WithCheck(IkReal(cj4),IkReal(((-1.0)*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x981.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x980.value)))+(x981.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x982=IKcos(j2);
IkReal x983=IKsin(j2);
IkReal x984=((1.0)*cj4);
IkReal x985=(sj4*x982);
IkReal x986=((1.0)*x983);
IkReal x987=(x983*x984);
evalcond[0]=(sj4+((new_r10*x982)));
evalcond[1]=(sj4+((new_r01*x982)));
evalcond[2]=(cj4+(((-1.0)*new_r01*x986)));
evalcond[3]=((((-1.0)*x984))+((new_r10*x983)));
evalcond[4]=((((-1.0)*x987))+new_r10+x985);
evalcond[5]=((((-1.0)*sj4*x986))+(((-1.0)*x982*x984)));
evalcond[6]=((((-1.0)*x987))+new_r01+x985);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x989 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x989.valid){
continue;
}
IkReal x988=x989.value;
j2array[0]=((-1.0)*x988);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x988)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j2))))+((new_r10*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x991 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x991.valid){
continue;
}
IkReal x990=x991.value;
j2array[0]=((-1.0)*x990);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x990)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j2))))+((new_r11*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r01=0;
new_r10=0;
j2eval[0]=new_r11;
j2eval[1]=IKsign(new_r11);
j2eval[2]=((IKabs(cj4))+(IKabs(sj4)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r01=0;
new_r10=0;
j2eval[0]=new_r00;
j2eval[1]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x992=IKPowWithIntegerCheck(new_r00,-1);
if(!x992.valid){
continue;
}
CheckValue<IkReal> x993=IKPowWithIntegerCheck(new_r11,-1);
if(!x993.valid){
continue;
}
if( IKabs((sj4*(x992.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x993.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*(x992.value)))+IKsqr(((-1.0)*cj4*(x993.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((sj4*(x992.value)), ((-1.0)*cj4*(x993.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x994=IKsin(j2);
IkReal x995=IKcos(j2);
IkReal x996=((1.0)*cj4);
IkReal x997=((1.0)*x994);
evalcond[0]=(cj4+((new_r11*x995)));
evalcond[1]=(sj4+((new_r11*x994)));
evalcond[2]=(sj4+(((-1.0)*new_r00*x997)));
evalcond[3]=((((-1.0)*x996))+((new_r00*x995)));
evalcond[4]=(((sj4*x995))+(((-1.0)*x994*x996)));
evalcond[5]=(((sj4*x994))+((cj4*x995))+new_r11);
evalcond[6]=((((-1.0)*x995*x996))+(((-1.0)*sj4*x997))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x998=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x998.valid){
continue;
}
CheckValue<IkReal> x999 = IKatan2WithCheck(IkReal(((-1.0)*sj4)),IkReal(((-1.0)*cj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x999.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x998.value)))+(x999.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x1000=IKsin(j2);
IkReal x1001=IKcos(j2);
IkReal x1002=((1.0)*cj4);
IkReal x1003=((1.0)*x1000);
evalcond[0]=(cj4+((new_r11*x1001)));
evalcond[1]=(sj4+((new_r11*x1000)));
evalcond[2]=(sj4+(((-1.0)*new_r00*x1003)));
evalcond[3]=((((-1.0)*x1002))+((new_r00*x1001)));
evalcond[4]=(((sj4*x1001))+(((-1.0)*x1000*x1002)));
evalcond[5]=(((sj4*x1000))+((cj4*x1001))+new_r11);
evalcond[6]=((((-1.0)*x1001*x1002))+new_r00+(((-1.0)*sj4*x1003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1004=IKPowWithIntegerCheck(IKsign((((cj4*new_r01))+((new_r11*sj4)))),-1);
if(!x1004.valid){
continue;
}
CheckValue<IkReal> x1005 = IKatan2WithCheck(IkReal(((-1.0)+((new_r01*new_r10))+(cj4*cj4))),IkReal(((((-1.0)*cj4*sj4))+(((-1.0)*new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1005.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1004.value)))+(x1005.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1006=IKsin(j2);
IkReal x1007=IKcos(j2);
IkReal x1008=((1.0)*cj4);
IkReal x1009=(sj4*x1007);
IkReal x1010=((1.0)*x1006);
IkReal x1011=(x1006*x1008);
evalcond[0]=(sj4+((new_r11*x1006))+((new_r01*x1007)));
evalcond[1]=(((sj4*x1006))+((cj4*x1007))+new_r11);
evalcond[2]=(sj4+((new_r10*x1007))+(((-1.0)*new_r00*x1010)));
evalcond[3]=(cj4+((new_r11*x1007))+(((-1.0)*new_r01*x1010)));
evalcond[4]=(x1009+(((-1.0)*x1011))+new_r10);
evalcond[5]=(x1009+(((-1.0)*x1011))+new_r01);
evalcond[6]=((((-1.0)*x1008))+((new_r10*x1006))+((new_r00*x1007)));
evalcond[7]=((((-1.0)*x1007*x1008))+new_r00+(((-1.0)*sj4*x1010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1012=((1.0)*new_r11);
CheckValue<IkReal> x1013 = IKatan2WithCheck(IkReal((((cj4*new_r01))+(((-1.0)*sj4*x1012)))),IkReal(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x1012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1013.valid){
continue;
}
CheckValue<IkReal> x1014=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x1014.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1013.value)+(((1.5707963267949)*(x1014.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1015=IKsin(j2);
IkReal x1016=IKcos(j2);
IkReal x1017=((1.0)*cj4);
IkReal x1018=(sj4*x1016);
IkReal x1019=((1.0)*x1015);
IkReal x1020=(x1015*x1017);
evalcond[0]=(sj4+((new_r11*x1015))+((new_r01*x1016)));
evalcond[1]=(((sj4*x1015))+((cj4*x1016))+new_r11);
evalcond[2]=(sj4+((new_r10*x1016))+(((-1.0)*new_r00*x1019)));
evalcond[3]=(cj4+((new_r11*x1016))+(((-1.0)*new_r01*x1019)));
evalcond[4]=(x1018+(((-1.0)*x1020))+new_r10);
evalcond[5]=(x1018+(((-1.0)*x1020))+new_r01);
evalcond[6]=((((-1.0)*x1017))+((new_r10*x1015))+((new_r00*x1016)));
evalcond[7]=((((-1.0)*x1016*x1017))+new_r00+(((-1.0)*sj4*x1019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1021=((1.0)*sj4);
CheckValue<IkReal> x1022=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1022.valid){
continue;
}
CheckValue<IkReal> x1023 = IKatan2WithCheck(IkReal((((new_r01*sj4))+(((-1.0)*new_r10*x1021)))),IkReal(((((-1.0)*new_r00*x1021))+(((-1.0)*new_r11*x1021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1023.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1022.value)))+(x1023.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1024=IKsin(j2);
IkReal x1025=IKcos(j2);
IkReal x1026=((1.0)*cj4);
IkReal x1027=(sj4*x1025);
IkReal x1028=((1.0)*x1024);
IkReal x1029=(x1024*x1026);
evalcond[0]=(sj4+((new_r11*x1024))+((new_r01*x1025)));
evalcond[1]=(((sj4*x1024))+((cj4*x1025))+new_r11);
evalcond[2]=((((-1.0)*new_r00*x1028))+((new_r10*x1025))+sj4);
evalcond[3]=(((new_r11*x1025))+cj4+(((-1.0)*new_r01*x1028)));
evalcond[4]=(x1027+(((-1.0)*x1029))+new_r10);
evalcond[5]=(x1027+(((-1.0)*x1029))+new_r01);
evalcond[6]=(((new_r10*x1024))+(((-1.0)*x1026))+((new_r00*x1025)));
evalcond[7]=((((-1.0)*sj4*x1028))+new_r00+(((-1.0)*x1025*x1026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x1030=((-1.0)*new_r22);
CheckValue<IkReal> x1032 = IKatan2WithCheck(IkReal((new_r01*x1030)),IkReal((new_r11*x1030)),IKFAST_ATAN2_MAGTHRESH);
if(!x1032.valid){
continue;
}
IkReal x1031=x1032.value;
j2array[0]=((-1.0)*x1031);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1031)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1033=IKcos(j2);
IkReal x1034=IKsin(j2);
IkReal x1035=((1.0)*new_r00);
IkReal x1036=(new_r10*x1034);
evalcond[0]=(x1036+((new_r00*x1033)));
evalcond[1]=(((new_r11*x1034))+((new_r01*x1033)));
evalcond[2]=((((-1.0)*x1034*x1035))+((new_r10*x1033)));
evalcond[3]=(((new_r11*x1033))+(((-1.0)*new_r01*x1034)));
evalcond[4]=((((-1.0)*new_r22*x1036))+(((-1.0)*new_r22*x1033*x1035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x1038 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1038.valid){
continue;
}
IkReal x1037=x1038.value;
j2array[0]=((-1.0)*x1037);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1037)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1039=IKcos(j2);
IkReal x1040=IKsin(j2);
IkReal x1041=((1.0)*new_r22);
IkReal x1042=(new_r00*x1039);
IkReal x1043=((1.0)*x1040);
IkReal x1044=(new_r10*x1040);
evalcond[0]=(x1042+x1044);
evalcond[1]=(((new_r10*x1039))+(((-1.0)*new_r00*x1043)));
evalcond[2]=(((new_r11*x1039))+(((-1.0)*new_r01*x1043)));
evalcond[3]=((((-1.0)*new_r01*x1039*x1041))+(((-1.0)*new_r11*x1040*x1041)));
evalcond[4]=((((-1.0)*x1041*x1044))+(((-1.0)*x1041*x1042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x1046 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1046.valid){
continue;
}
IkReal x1045=x1046.value;
j2array[0]=((-1.0)*x1045);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1045)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1047=IKcos(j2);
IkReal x1048=IKsin(j2);
IkReal x1049=((1.0)*new_r22);
IkReal x1050=(new_r11*x1048);
IkReal x1051=((1.0)*x1048);
IkReal x1052=(new_r01*x1047);
evalcond[0]=(x1050+x1052);
evalcond[1]=((((-1.0)*new_r00*x1051))+((new_r10*x1047)));
evalcond[2]=((((-1.0)*new_r01*x1051))+((new_r11*x1047)));
evalcond[3]=((((-1.0)*x1049*x1050))+(((-1.0)*x1049*x1052)));
evalcond[4]=((((-1.0)*new_r00*x1047*x1049))+(((-1.0)*new_r10*x1048*x1049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1054=IKPowWithIntegerCheck(sj3,-1);
if(!x1054.valid){
continue;
}
IkReal x1053=x1054.value;
CheckValue<IkReal> x1055=IKPowWithIntegerCheck(new_r00,-1);
if(!x1055.valid){
continue;
}
if( IKabs((x1053*(x1055.value)*((((sj3*sj4))+((new_r02*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x1053)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1053*(x1055.value)*((((sj3*sj4))+((new_r02*new_r10))))))+IKsqr((new_r02*x1053))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1053*(x1055.value)*((((sj3*sj4))+((new_r02*new_r10))))), (new_r02*x1053));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[18];
IkReal x1056=IKcos(j2);
IkReal x1057=IKsin(j2);
IkReal x1058=(cj3*cj4);
IkReal x1059=((1.0)*sj4);
IkReal x1060=((1.0)*cj3);
IkReal x1061=(sj3*x1057);
IkReal x1062=(new_r01*x1056);
IkReal x1063=(cj3*x1056);
IkReal x1064=(new_r11*x1057);
IkReal x1065=((1.0)*x1057);
IkReal x1066=(sj3*x1056);
evalcond[0]=(new_r02+(((-1.0)*x1066)));
evalcond[1]=(new_r12+(((-1.0)*x1061)));
evalcond[2]=((((-1.0)*new_r02*x1065))+((new_r12*x1056)));
evalcond[3]=(sj4+(((-1.0)*new_r00*x1065))+((new_r10*x1056)));
evalcond[4]=(cj4+(((-1.0)*new_r01*x1065))+((new_r11*x1056)));
evalcond[5]=(((x1057*x1058))+new_r10+((sj4*x1056)));
evalcond[6]=((((-1.0)*sj3))+((new_r02*x1056))+((new_r12*x1057)));
evalcond[7]=(x1058+((new_r00*x1056))+((new_r10*x1057)));
evalcond[8]=(((x1056*x1058))+(((-1.0)*x1057*x1059))+new_r00);
evalcond[9]=((((-1.0)*cj3*x1057*x1059))+new_r11+((cj4*x1056)));
evalcond[10]=(x1062+x1064+(((-1.0)*cj3*x1059)));
evalcond[11]=((((-1.0)*x1059*x1063))+(((-1.0)*cj4*x1065))+new_r01);
evalcond[12]=(((new_r00*x1066))+((new_r10*x1061))+((cj3*new_r20)));
evalcond[13]=(((sj3*x1062))+((new_r11*x1061))+((cj3*new_r21)));
evalcond[14]=((-1.0)+((new_r02*x1066))+((new_r12*x1061))+((cj3*new_r22)));
evalcond[15]=((((-1.0)*new_r02*x1056*x1060))+((new_r22*sj3))+(((-1.0)*new_r12*x1057*x1060)));
evalcond[16]=((((-1.0)*x1060*x1064))+(((-1.0)*x1060*x1062))+sj4+((new_r21*sj3)));
evalcond[17]=(((new_r20*sj3))+(((-1.0)*new_r10*x1057*x1060))+(((-1.0)*new_r00*x1056*x1060))+(((-1.0)*cj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1067=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1067.valid){
continue;
}
CheckValue<IkReal> x1068 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1068.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1067.value)))+(x1068.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[18];
IkReal x1069=IKcos(j2);
IkReal x1070=IKsin(j2);
IkReal x1071=(cj3*cj4);
IkReal x1072=((1.0)*sj4);
IkReal x1073=((1.0)*cj3);
IkReal x1074=(sj3*x1070);
IkReal x1075=(new_r01*x1069);
IkReal x1076=(cj3*x1069);
IkReal x1077=(new_r11*x1070);
IkReal x1078=((1.0)*x1070);
IkReal x1079=(sj3*x1069);
evalcond[0]=((((-1.0)*x1079))+new_r02);
evalcond[1]=((((-1.0)*x1074))+new_r12);
evalcond[2]=(((new_r12*x1069))+(((-1.0)*new_r02*x1078)));
evalcond[3]=(sj4+(((-1.0)*new_r00*x1078))+((new_r10*x1069)));
evalcond[4]=(cj4+(((-1.0)*new_r01*x1078))+((new_r11*x1069)));
evalcond[5]=(((x1070*x1071))+new_r10+((sj4*x1069)));
evalcond[6]=(((new_r02*x1069))+(((-1.0)*sj3))+((new_r12*x1070)));
evalcond[7]=(x1071+((new_r00*x1069))+((new_r10*x1070)));
evalcond[8]=(((x1069*x1071))+(((-1.0)*x1070*x1072))+new_r00);
evalcond[9]=(((cj4*x1069))+(((-1.0)*cj3*x1070*x1072))+new_r11);
evalcond[10]=(x1077+x1075+(((-1.0)*cj3*x1072)));
evalcond[11]=((((-1.0)*cj4*x1078))+(((-1.0)*x1072*x1076))+new_r01);
evalcond[12]=(((new_r00*x1079))+((new_r10*x1074))+((cj3*new_r20)));
evalcond[13]=(((sj3*x1075))+((new_r11*x1074))+((cj3*new_r21)));
evalcond[14]=((-1.0)+((new_r02*x1079))+((new_r12*x1074))+((cj3*new_r22)));
evalcond[15]=((((-1.0)*new_r12*x1070*x1073))+((new_r22*sj3))+(((-1.0)*new_r02*x1069*x1073)));
evalcond[16]=(sj4+(((-1.0)*x1073*x1075))+(((-1.0)*x1073*x1077))+((new_r21*sj3)));
evalcond[17]=((((-1.0)*new_r10*x1070*x1073))+((new_r20*sj3))+(((-1.0)*new_r00*x1069*x1073))+(((-1.0)*cj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1080=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1080.valid){
continue;
}
CheckValue<IkReal> x1081 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1081.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1080.value)))+(x1081.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1082=IKcos(j2);
IkReal x1083=IKsin(j2);
IkReal x1084=((1.0)*new_r02);
IkReal x1085=(sj3*x1083);
IkReal x1086=(sj3*x1082);
IkReal x1087=(new_r12*x1083);
evalcond[0]=((((-1.0)*x1086))+new_r02);
evalcond[1]=((((-1.0)*x1085))+new_r12);
evalcond[2]=((((-1.0)*x1083*x1084))+((new_r12*x1082)));
evalcond[3]=((((-1.0)*sj3))+x1087+((new_r02*x1082)));
evalcond[4]=(((new_r00*x1086))+((new_r10*x1085))+((cj3*new_r20)));
evalcond[5]=(((new_r01*x1086))+((new_r11*x1085))+((cj3*new_r21)));
evalcond[6]=((-1.0)+((new_r02*x1086))+((cj3*new_r22))+((new_r12*x1085)));
evalcond[7]=((((-1.0)*cj3*x1087))+(((-1.0)*cj3*x1082*x1084))+((new_r22*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
j4eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=cj3;
j4eval[2]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1088=((1.0)*cj2);
if( IKabs(((((-1.0)*new_r10*x1088))+((new_r00*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x1088))+(((-1.0)*new_r10*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r10*x1088))+((new_r00*sj2))))+IKsqr(((((-1.0)*new_r00*x1088))+(((-1.0)*new_r10*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r10*x1088))+((new_r00*sj2))), ((((-1.0)*new_r00*x1088))+(((-1.0)*new_r10*sj2))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1089=IKcos(j4);
IkReal x1090=IKsin(j4);
IkReal x1091=((1.0)*sj2);
IkReal x1092=(cj2*x1089);
IkReal x1093=((1.0)*x1090);
IkReal x1094=(x1090*x1091);
evalcond[0]=(x1089+((new_r10*sj2))+((cj2*new_r00)));
evalcond[1]=((((-1.0)*new_r00*x1091))+x1090+((cj2*new_r10)));
evalcond[2]=(x1089+(((-1.0)*new_r01*x1091))+((cj2*new_r11)));
evalcond[3]=(((sj2*x1089))+new_r10+((cj2*x1090)));
evalcond[4]=(((new_r11*sj2))+(((-1.0)*x1093))+((cj2*new_r01)));
evalcond[5]=(x1092+(((-1.0)*x1094))+new_r00);
evalcond[6]=(x1092+(((-1.0)*x1094))+new_r11);
evalcond[7]=((((-1.0)*cj2*x1093))+(((-1.0)*x1089*x1091))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1095=((1.0)*cj2);
if( IKabs(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r10*x1095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*sj2))+(((-1.0)*new_r11*x1095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r10*x1095))))+IKsqr((((new_r10*sj2))+(((-1.0)*new_r11*x1095))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r10*x1095))), (((new_r10*sj2))+(((-1.0)*new_r11*x1095))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1096=IKsin(j4);
IkReal x1097=IKcos(j4);
IkReal x1098=((1.0)*sj2);
IkReal x1099=(cj2*x1096);
IkReal x1100=(cj2*x1097);
IkReal x1101=(x1097*x1098);
evalcond[0]=(x1096+((new_r11*sj2))+((cj2*new_r01)));
evalcond[1]=((((-1.0)*new_r00*x1098))+x1096+((cj2*new_r10)));
evalcond[2]=(x1097+(((-1.0)*new_r01*x1098))+((cj2*new_r11)));
evalcond[3]=(((new_r10*sj2))+(((-1.0)*x1097))+((cj2*new_r00)));
evalcond[4]=(x1100+((sj2*x1096))+new_r11);
evalcond[5]=(x1099+new_r10+(((-1.0)*x1101)));
evalcond[6]=(x1099+new_r01+(((-1.0)*x1101)));
evalcond[7]=((((-1.0)*x1096*x1098))+(((-1.0)*x1100))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1102=IKsin(j4);
IkReal x1103=IKcos(j4);
IkReal x1104=((1.0)*sj2);
evalcond[0]=(x1102+new_r21);
evalcond[1]=((((-1.0)*x1103))+new_r20);
evalcond[2]=(new_r10+((cj2*x1102)));
evalcond[3]=(new_r11+((cj2*x1103)));
evalcond[4]=(new_r00+(((-1.0)*x1102*x1104)));
evalcond[5]=((((-1.0)*x1103*x1104))+new_r01);
evalcond[6]=(x1102+((cj2*new_r10))+(((-1.0)*new_r00*x1104)));
evalcond[7]=(x1103+((cj2*new_r11))+(((-1.0)*new_r01*x1104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1105=IKsin(j4);
IkReal x1106=IKcos(j4);
IkReal x1107=((1.0)*sj2);
evalcond[0]=(x1106+new_r20);
evalcond[1]=((((-1.0)*x1105))+new_r21);
evalcond[2]=(new_r10+((cj2*x1105)));
evalcond[3]=(new_r11+((cj2*x1106)));
evalcond[4]=(new_r00+(((-1.0)*x1105*x1107)));
evalcond[5]=((((-1.0)*x1106*x1107))+new_r01);
evalcond[6]=(x1105+((cj2*new_r10))+(((-1.0)*new_r00*x1107)));
evalcond[7]=(x1106+((cj2*new_r11))+(((-1.0)*new_r01*x1107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1108=IKsin(j4);
IkReal x1109=IKcos(j4);
IkReal x1110=((1.0)*cj3);
IkReal x1111=((1.0)*x1109);
evalcond[0]=(x1108+new_r10);
evalcond[1]=(x1109+new_r11);
evalcond[2]=(((sj3*x1108))+new_r21);
evalcond[3]=(new_r00+((cj3*x1109)));
evalcond[4]=((((-1.0)*sj3*x1111))+new_r20);
evalcond[5]=((((-1.0)*x1108*x1110))+new_r01);
evalcond[6]=(x1108+(((-1.0)*new_r01*x1110))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*x1111))+(((-1.0)*new_r00*x1110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r10, new_r11);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1112=IKsin(j4);
IkReal x1113=IKcos(j4);
IkReal x1114=((1.0)*x1113);
evalcond[0]=(((sj3*x1112))+new_r21);
evalcond[1]=(x1112+(((-1.0)*new_r10)));
evalcond[2]=(x1113+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj3*x1114))+new_r20);
evalcond[4]=((((-1.0)*new_r00))+((cj3*x1113)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*cj3*x1112)));
evalcond[6]=(x1112+((cj3*new_r01))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+((cj3*new_r00))+(((-1.0)*x1114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, new_r01);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1115=IKsin(j4);
IkReal x1116=IKcos(j4);
IkReal x1117=((1.0)*cj3);
IkReal x1118=((1.0)*x1116);
evalcond[0]=(((sj3*x1115))+new_r21);
evalcond[1]=(x1115+(((-1.0)*new_r00)));
evalcond[2]=(x1116+(((-1.0)*new_r01)));
evalcond[3]=(new_r10+((cj3*x1116)));
evalcond[4]=((((-1.0)*sj3*x1118))+new_r20);
evalcond[5]=(new_r11+(((-1.0)*x1115*x1117)));
evalcond[6]=(x1115+(((-1.0)*new_r11*x1117))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*new_r10*x1117))+(((-1.0)*x1118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1119=IKsin(j4);
IkReal x1120=IKcos(j4);
IkReal x1121=((1.0)*x1120);
evalcond[0]=(x1119+new_r00);
evalcond[1]=(x1120+new_r01);
evalcond[2]=(((sj3*x1119))+new_r21);
evalcond[3]=((((-1.0)*sj3*x1121))+new_r20);
evalcond[4]=((((-1.0)*new_r10))+((cj3*x1120)));
evalcond[5]=((((-1.0)*new_r11))+(((-1.0)*cj3*x1119)));
evalcond[6]=(x1119+((cj3*new_r11))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*x1121))+((cj3*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j4eval[0]=IKabs(new_r22);
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1123=IKPowWithIntegerCheck(sj3,-1);
if(!x1123.valid){
continue;
}
IkReal x1122=x1123.value;
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(cj3,-1);
if(!x1124.valid){
continue;
}
CheckValue<IkReal> x1125=IKPowWithIntegerCheck(sj2,-1);
if(!x1125.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1122)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1122*(x1124.value)*(x1125.value)*(((((-1.0)*new_r10*sj3))+((cj2*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1122))+IKsqr((x1122*(x1124.value)*(x1125.value)*(((((-1.0)*new_r10*sj3))+((cj2*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x1122), (x1122*(x1124.value)*(x1125.value)*(((((-1.0)*new_r10*sj3))+((cj2*new_r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x1126=IKsin(j4);
IkReal x1127=IKcos(j4);
IkReal x1128=(cj2*new_r01);
IkReal x1129=((1.0)*cj3);
IkReal x1130=(new_r10*sj2);
IkReal x1131=(new_r11*sj2);
IkReal x1132=(cj2*new_r00);
IkReal x1133=((1.0)*sj2);
IkReal x1134=(cj2*x1126);
IkReal x1135=(cj2*x1127);
IkReal x1136=((1.0)*x1127);
IkReal x1137=(cj3*x1127);
evalcond[0]=(((sj3*x1126))+new_r21);
evalcond[1]=((((-1.0)*sj3*x1136))+new_r20);
evalcond[2]=(x1126+(((-1.0)*new_r00*x1133))+((cj2*new_r10)));
evalcond[3]=(x1127+(((-1.0)*new_r01*x1133))+((cj2*new_r11)));
evalcond[4]=(x1132+x1130+x1137);
evalcond[5]=(x1134+((sj2*x1137))+new_r10);
evalcond[6]=(x1128+x1131+(((-1.0)*x1126*x1129)));
evalcond[7]=(((cj3*x1135))+(((-1.0)*x1126*x1133))+new_r00);
evalcond[8]=(x1135+(((-1.0)*sj2*x1126*x1129))+new_r11);
evalcond[9]=((((-1.0)*x1127*x1133))+new_r01+(((-1.0)*x1129*x1134)));
evalcond[10]=(x1126+(((-1.0)*x1128*x1129))+((new_r21*sj3))+(((-1.0)*x1129*x1131)));
evalcond[11]=(((new_r20*sj3))+(((-1.0)*x1136))+(((-1.0)*x1129*x1130))+(((-1.0)*x1129*x1132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1139=IKPowWithIntegerCheck(sj3,-1);
if(!x1139.valid){
continue;
}
IkReal x1138=x1139.value;
CheckValue<IkReal> x1140=IKPowWithIntegerCheck(cj2,-1);
if(!x1140.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1138)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1138*(x1140.value)*(((((-1.0)*cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1138))+IKsqr((x1138*(x1140.value)*(((((-1.0)*cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x1138), (x1138*(x1140.value)*(((((-1.0)*cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x1141=IKsin(j4);
IkReal x1142=IKcos(j4);
IkReal x1143=(cj2*new_r01);
IkReal x1144=((1.0)*cj3);
IkReal x1145=(new_r10*sj2);
IkReal x1146=(new_r11*sj2);
IkReal x1147=(cj2*new_r00);
IkReal x1148=((1.0)*sj2);
IkReal x1149=(cj2*x1141);
IkReal x1150=(cj2*x1142);
IkReal x1151=((1.0)*x1142);
IkReal x1152=(cj3*x1142);
evalcond[0]=(((sj3*x1141))+new_r21);
evalcond[1]=((((-1.0)*sj3*x1151))+new_r20);
evalcond[2]=(x1141+(((-1.0)*new_r00*x1148))+((cj2*new_r10)));
evalcond[3]=(x1142+(((-1.0)*new_r01*x1148))+((cj2*new_r11)));
evalcond[4]=(x1147+x1145+x1152);
evalcond[5]=(x1149+((sj2*x1152))+new_r10);
evalcond[6]=(x1143+x1146+(((-1.0)*x1141*x1144)));
evalcond[7]=(((cj3*x1150))+(((-1.0)*x1141*x1148))+new_r00);
evalcond[8]=(x1150+(((-1.0)*sj2*x1141*x1144))+new_r11);
evalcond[9]=(new_r01+(((-1.0)*x1144*x1149))+(((-1.0)*x1142*x1148)));
evalcond[10]=(x1141+(((-1.0)*x1143*x1144))+((new_r21*sj3))+(((-1.0)*x1144*x1146)));
evalcond[11]=(((new_r20*sj3))+(((-1.0)*x1151))+(((-1.0)*x1144*x1147))+(((-1.0)*x1144*x1145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1153=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1153.valid){
continue;
}
CheckValue<IkReal> x1154 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1153.value)))+(x1154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x1155=IKsin(j4);
IkReal x1156=IKcos(j4);
IkReal x1157=(cj2*new_r01);
IkReal x1158=((1.0)*cj3);
IkReal x1159=(new_r10*sj2);
IkReal x1160=(new_r11*sj2);
IkReal x1161=(cj2*new_r00);
IkReal x1162=((1.0)*sj2);
IkReal x1163=(cj2*x1155);
IkReal x1164=(cj2*x1156);
IkReal x1165=((1.0)*x1156);
IkReal x1166=(cj3*x1156);
evalcond[0]=(((sj3*x1155))+new_r21);
evalcond[1]=((((-1.0)*sj3*x1165))+new_r20);
evalcond[2]=(x1155+((cj2*new_r10))+(((-1.0)*new_r00*x1162)));
evalcond[3]=(x1156+(((-1.0)*new_r01*x1162))+((cj2*new_r11)));
evalcond[4]=(x1159+x1166+x1161);
evalcond[5]=(((sj2*x1166))+x1163+new_r10);
evalcond[6]=(x1157+x1160+(((-1.0)*x1155*x1158)));
evalcond[7]=(((cj3*x1164))+(((-1.0)*x1155*x1162))+new_r00);
evalcond[8]=(x1164+(((-1.0)*sj2*x1155*x1158))+new_r11);
evalcond[9]=((((-1.0)*x1156*x1162))+(((-1.0)*x1158*x1163))+new_r01);
evalcond[10]=(x1155+(((-1.0)*x1157*x1158))+(((-1.0)*x1158*x1160))+((new_r21*sj3)));
evalcond[11]=(((new_r20*sj3))+(((-1.0)*x1158*x1161))+(((-1.0)*x1158*x1159))+(((-1.0)*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - iiwa7 (7ffdc467256b7c19bcb14eb810c5d515)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
